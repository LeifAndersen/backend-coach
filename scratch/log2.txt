Chez Scheme Transcript [Fri Apr 21 13:18:02 2017]
> (#%$np-tracer #t)
> (parameterize ([optimize-level 0])
    (let ()
      (define (fact n)
        (if (= n 0)
            1
            (* n (fact (- n 1)))))
      (fact 5)))
output of cpnanopass:
(case-lambda
  [clause
   ()
   0
   ((case-lambda
      [clause
       (#{g0 a5dids9skwzdhr1md4j13r-0})
       1
       ((case-lambda
          [clause
           (#{swap a5dids9skwzdhr1md4j13r-1})
           1
           (#[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
             '#t
             #{swap a5dids9skwzdhr1md4j13r-1}
             (case-lambda
               [clause
                ()
                0
                (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                             [clause
                                                              (#{n a5dids9skwzdhr1md4j13r-3})
                                                              1
                                                              (if (#[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                    #{n a5dids9skwzdhr1md4j13r-3}
                                                                    '0)
                                                                  '1
                                                                  (#[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                    #{n a5dids9skwzdhr1md4j13r-3}
                                                                    (#{fact a5dids9skwzdhr1md4j13r-2}
                                                                      (#[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                        #{n a5dids9skwzdhr1md4j13r-3}
                                                                        '1))))])])
                  (#{fact a5dids9skwzdhr1md4j13r-2} '5))])
             #{swap a5dids9skwzdhr1md4j13r-1})])
         (case-lambda
           [clause
            ()
            0
            ((case-lambda
               [clause
                (#{g1 a5dids9skwzdhr1md4j13r-4})
                1
                (begin
                  (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                    #{g0 a5dids9skwzdhr1md4j13r-0})
                  (set! #{g0 a5dids9skwzdhr1md4j13r-0}
                    #{g1 a5dids9skwzdhr1md4j13r-4}))])
              (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]))]))])
     '0)])
output of np-recognize-let:
(case-lambda
  [clause
   ()
   0
   (let ([#{g0 a5dids9skwzdhr1md4j13r-0} '0])
     (let ([#{swap a5dids9skwzdhr1md4j13r-1} (case-lambda
                                               [clause
                                                ()
                                                0
                                                (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                                                  (begin
                                                    (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                                                      #{g0 a5dids9skwzdhr1md4j13r-0})
                                                    (set! #{g0 a5dids9skwzdhr1md4j13r-0}
                                                      #{g1 a5dids9skwzdhr1md4j13r-4})))])])
       (#[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
         '#t
         #{swap a5dids9skwzdhr1md4j13r-1}
         (case-lambda
           [clause
            ()
            0
            (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                         [clause
                                                          (#{n a5dids9skwzdhr1md4j13r-3})
                                                          1
                                                          (if (#[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                '0)
                                                              '1
                                                              (#[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                (#{fact a5dids9skwzdhr1md4j13r-2}
                                                                  (#[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                    #{n a5dids9skwzdhr1md4j13r-3}
                                                                    '1))))])])
              (#{fact a5dids9skwzdhr1md4j13r-2} '5))])
         #{swap a5dids9skwzdhr1md4j13r-1})))])
output of np-discover-names:
(case-lambda
  [clause
   ()
   0
   (let ([#{g0 a5dids9skwzdhr1md4j13r-0} '0])
     (let ([#{swap a5dids9skwzdhr1md4j13r-1} (case-lambda
                                               [clause
                                                ()
                                                0
                                                (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                                                  (begin
                                                    (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                                                      #{g0 a5dids9skwzdhr1md4j13r-0})
                                                    (set! #{g0 a5dids9skwzdhr1md4j13r-0}
                                                      #{g1 a5dids9skwzdhr1md4j13r-4})))])])
       (#[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
         '#t
         #{swap a5dids9skwzdhr1md4j13r-1}
         (case-lambda
           [clause
            ()
            0
            (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                         [clause
                                                          (#{n a5dids9skwzdhr1md4j13r-3})
                                                          1
                                                          (if (#[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                '0)
                                                              '1
                                                              (#[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                (#{fact a5dids9skwzdhr1md4j13r-2}
                                                                  (#[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                    #{n a5dids9skwzdhr1md4j13r-3}
                                                                    '1))))])])
              (#{fact a5dids9skwzdhr1md4j13r-2} '5))])
         #{swap a5dids9skwzdhr1md4j13r-1})))])
output of np-convert-assignments:
(case-lambda
  [clause
   ()
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (#[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (let ([#{swap a5dids9skwzdhr1md4j13r-1} (case-lambda
                                                 [clause
                                                  ()
                                                  0
                                                  (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                                                    (begin
                                                      (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                                                        (#[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                                                          #{g0 a5dids9skwzdhr1md4j13r-0}))
                                                      (#[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                                                        #{g0 a5dids9skwzdhr1md4j13r-0}
                                                        #{g1 a5dids9skwzdhr1md4j13r-4})))])])
         (#[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t
           #{swap a5dids9skwzdhr1md4j13r-1}
           (case-lambda
             [clause
              ()
              0
              (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                           [clause
                                                            (#{n a5dids9skwzdhr1md4j13r-3})
                                                            1
                                                            (if (#[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  '0)
                                                                '1
                                                                (#[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  (#{fact a5dids9skwzdhr1md4j13r-2}
                                                                    (#[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                      #{n a5dids9skwzdhr1md4j13r-3}
                                                                      '1))))])])
                (#{fact a5dids9skwzdhr1md4j13r-2} '5))])
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-sanitize-bindings:
(case-lambda
  [clause
   ()
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (#[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (letrec ([#{swap a5dids9skwzdhr1md4j13r-1} (case-lambda
                                                    [clause
                                                     ()
                                                     0
                                                     (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                                                       (begin
                                                         (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                                                           (#[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                                                             #{g0 a5dids9skwzdhr1md4j13r-0}))
                                                         (#[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                                                           #{g0 a5dids9skwzdhr1md4j13r-0}
                                                           #{g1 a5dids9skwzdhr1md4j13r-4})))])])
         (#[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t
           #{swap a5dids9skwzdhr1md4j13r-1}
           (case-lambda
             [clause
              ()
              0
              (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                           [clause
                                                            (#{n a5dids9skwzdhr1md4j13r-3})
                                                            1
                                                            (if (#[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  '0)
                                                                '1
                                                                (#[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  (#{fact a5dids9skwzdhr1md4j13r-2}
                                                                    (#[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                      #{n a5dids9skwzdhr1md4j13r-3}
                                                                      '1))))])])
                (#{fact a5dids9skwzdhr1md4j13r-2} '5))])
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-suppress-procedure-checks:
(case-lambda
  [clause
   ()
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (#[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (letrec ([#{swap a5dids9skwzdhr1md4j13r-1} (case-lambda
                                                    [clause
                                                     ()
                                                     0
                                                     (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                                                       (begin
                                                         (#[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                                                           (#[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                                                             #{g0 a5dids9skwzdhr1md4j13r-0}))
                                                         (#[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                                                           #{g0 a5dids9skwzdhr1md4j13r-0}
                                                           #{g1 a5dids9skwzdhr1md4j13r-4})))])])
         (#[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t
           #{swap a5dids9skwzdhr1md4j13r-1}
           (case-lambda
             [clause
              ()
              0
              (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                           [clause
                                                            (#{n a5dids9skwzdhr1md4j13r-3})
                                                            1
                                                            (if (#[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  '0)
                                                                '1
                                                                (#[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  (#{fact a5dids9skwzdhr1md4j13r-2}
                                                                    (#[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                      #{n a5dids9skwzdhr1md4j13r-3}
                                                                      '1))))])])
                (#{fact a5dids9skwzdhr1md4j13r-2} '5))])
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-recognize-mrvs:
(case-lambda
  [clause
   ()
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (call
                                             #f
                                             #[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (letrec ([#{swap a5dids9skwzdhr1md4j13r-1} (case-lambda
                                                    [clause
                                                     ()
                                                     0
                                                     (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (call
                                                                                             #f
                                                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                                                       (begin
                                                         (call
                                                           #f
                                                           #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                                                           (call
                                                             #f
                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                                                             #{g0 a5dids9skwzdhr1md4j13r-0}))
                                                         (call
                                                           #f
                                                           #[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                                                           #{g0 a5dids9skwzdhr1md4j13r-0}
                                                           #{g1 a5dids9skwzdhr1md4j13r-4})))])])
         (call #f
           #[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t #{swap a5dids9skwzdhr1md4j13r-1}
           (case-lambda
             [clause
              ()
              0
              (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                           [clause
                                                            (#{n a5dids9skwzdhr1md4j13r-3})
                                                            1
                                                            (if (call
                                                                  #f
                                                                  #[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  '0)
                                                                '1
                                                                (call
                                                                  #f
                                                                  #[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  (call
                                                                    #f
                                                                    #{fact a5dids9skwzdhr1md4j13r-2}
                                                                    (call
                                                                      #f
                                                                      #[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                      #{n a5dids9skwzdhr1md4j13r-3}
                                                                      '1))))])])
                (call #f #{fact a5dids9skwzdhr1md4j13r-2} '5))])
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-expand-foreign:
(case-lambda
  [clause
   ()
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (call
                                             #f
                                             #[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (letrec ([#{swap a5dids9skwzdhr1md4j13r-1} (case-lambda
                                                    [clause
                                                     ()
                                                     0
                                                     (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (call
                                                                                             #f
                                                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                                                       (begin
                                                         (call
                                                           #f
                                                           #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                                                           (call
                                                             #f
                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                                                             #{g0 a5dids9skwzdhr1md4j13r-0}))
                                                         (call
                                                           #f
                                                           #[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                                                           #{g0 a5dids9skwzdhr1md4j13r-0}
                                                           #{g1 a5dids9skwzdhr1md4j13r-4})))])])
         (call #f
           #[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t #{swap a5dids9skwzdhr1md4j13r-1}
           (case-lambda
             [clause
              ()
              0
              (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                           [clause
                                                            (#{n a5dids9skwzdhr1md4j13r-3})
                                                            1
                                                            (if (call
                                                                  #f
                                                                  #[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  '0)
                                                                '1
                                                                (call
                                                                  #f
                                                                  #[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  (call
                                                                    #f
                                                                    #{fact a5dids9skwzdhr1md4j13r-2}
                                                                    (call
                                                                      #f
                                                                      #[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                      #{n a5dids9skwzdhr1md4j13r-3}
                                                                      '1))))])])
                (call #f #{fact a5dids9skwzdhr1md4j13r-2} '5))])
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-recognize-loops:
(case-lambda
  [clause
   ()
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (call
                                             #f
                                             #[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (letrec ([#{swap a5dids9skwzdhr1md4j13r-1} (case-lambda
                                                    [clause
                                                     ()
                                                     0
                                                     (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (call
                                                                                             #f
                                                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                                                       (begin
                                                         (call
                                                           #f
                                                           #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                                                           (call
                                                             #f
                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                                                             #{g0 a5dids9skwzdhr1md4j13r-0}))
                                                         (call
                                                           #f
                                                           #[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                                                           #{g0 a5dids9skwzdhr1md4j13r-0}
                                                           #{g1 a5dids9skwzdhr1md4j13r-4})))])])
         (call #f
           #[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t #{swap a5dids9skwzdhr1md4j13r-1}
           (case-lambda
             [clause
              ()
              0
              (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                           [clause
                                                            (#{n a5dids9skwzdhr1md4j13r-3})
                                                            1
                                                            (if (call
                                                                  #f
                                                                  #[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  '0)
                                                                '1
                                                                (call
                                                                  #f
                                                                  #[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                  #{n a5dids9skwzdhr1md4j13r-3}
                                                                  (call
                                                                    #f
                                                                    #{fact a5dids9skwzdhr1md4j13r-2}
                                                                    (call
                                                                      #f
                                                                      #[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                      #{n a5dids9skwzdhr1md4j13r-3}
                                                                      '1))))])])
                (call #f #{fact a5dids9skwzdhr1md4j13r-2} '5))])
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-name-anonymous-lambda:
(case-lambda
  [clause
   ()
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (call
                                             #f
                                             #[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (letrec ([#{swap a5dids9skwzdhr1md4j13r-1} (case-lambda
                                                    [clause
                                                     ()
                                                     0
                                                     (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (call
                                                                                             #f
                                                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                                                       (begin
                                                         (call
                                                           #f
                                                           #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                                                           (call
                                                             #f
                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                                                             #{g0 a5dids9skwzdhr1md4j13r-0}))
                                                         (call
                                                           #f
                                                           #[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                                                           #{g0 a5dids9skwzdhr1md4j13r-0}
                                                           #{g1 a5dids9skwzdhr1md4j13r-4})))])])
         (call #f
           #[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t #{swap a5dids9skwzdhr1md4j13r-1}
           (letrec ([#{anon a5dids9skwzdhr1md4j13r-6} (case-lambda
                                                        [clause
                                                         ()
                                                         0
                                                         (letrec ([#{fact a5dids9skwzdhr1md4j13r-2} (case-lambda
                                                                                                      [clause
                                                                                                       (#{n a5dids9skwzdhr1md4j13r-3})
                                                                                                       1
                                                                                                       (if (call
                                                                                                             #f
                                                                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                                                                                             #{n a5dids9skwzdhr1md4j13r-3}
                                                                                                             '0)
                                                                                                           '1
                                                                                                           (call
                                                                                                             #f
                                                                                                             #[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                                                                                             #{n a5dids9skwzdhr1md4j13r-3}
                                                                                                             (call
                                                                                                               #f
                                                                                                               #{fact a5dids9skwzdhr1md4j13r-2}
                                                                                                               (call
                                                                                                                 #f
                                                                                                                 #[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                                                                                                 #{n a5dids9skwzdhr1md4j13r-3}
                                                                                                                 '1))))])])
                                                           (call
                                                             #f
                                                             #{fact a5dids9skwzdhr1md4j13r-2}
                                                             '5))])])
             #{anon a5dids9skwzdhr1md4j13r-6})
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-convert-closures:
(case-lambda
  [clause
   ()
   #f
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (call
                                             #f
                                             #[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (closures
         ((#{swap a5dids9skwzdhr1md4j13r-1}
            (#{g0 a5dids9skwzdhr1md4j13r-0})
            (case-lambda
              [clause
               ()
               #{cp a5dids9skwzdhr1md4j13r-7}
               0
               (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (call
                                                       #f
                                                       #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                 (begin
                   (call
                     #f
                     #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                     (call
                       #f
                       #[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                       #{g0 a5dids9skwzdhr1md4j13r-0}))
                   (call
                     #f
                     #[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                     #{g0 a5dids9skwzdhr1md4j13r-0}
                     #{g1 a5dids9skwzdhr1md4j13r-4})))])))
         (call #f
           #[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t #{swap a5dids9skwzdhr1md4j13r-1}
           (closures
             ((#{anon a5dids9skwzdhr1md4j13r-6}
                ()
                (case-lambda
                  [clause
                   ()
                   #f
                   0
                   (closures
                     ((#{fact a5dids9skwzdhr1md4j13r-2}
                        (#{fact a5dids9skwzdhr1md4j13r-2})
                        (case-lambda
                          [clause
                           (#{n a5dids9skwzdhr1md4j13r-3})
                           #{cp a5dids9skwzdhr1md4j13r-8}
                           1
                           (if (call
                                 #f
                                 #[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                 #{n a5dids9skwzdhr1md4j13r-3}
                                 '0)
                               '1
                               (call
                                 #f
                                 #[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                 #{n a5dids9skwzdhr1md4j13r-3}
                                 (call
                                   #f
                                   #{fact a5dids9skwzdhr1md4j13r-2}
                                   (call
                                     #f
                                     #[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                     #{n a5dids9skwzdhr1md4j13r-3}
                                     '1))))])))
                     (call #f #{fact a5dids9skwzdhr1md4j13r-2} '5))])))
             #{anon a5dids9skwzdhr1md4j13r-6})
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-optimize-direct-call:
(case-lambda
  [clause
   ()
   #f
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (call
                                             #f
                                             #[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (closures
         ((#{swap a5dids9skwzdhr1md4j13r-1}
            (#{g0 a5dids9skwzdhr1md4j13r-0})
            (case-lambda
              [clause
               ()
               #{cp a5dids9skwzdhr1md4j13r-7}
               0
               (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (call
                                                       #f
                                                       #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                 (begin
                   (call
                     #f
                     #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                     (call
                       #f
                       #[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                       #{g0 a5dids9skwzdhr1md4j13r-0}))
                   (call
                     #f
                     #[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                     #{g0 a5dids9skwzdhr1md4j13r-0}
                     #{g1 a5dids9skwzdhr1md4j13r-4})))])))
         (call #f
           #[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t #{swap a5dids9skwzdhr1md4j13r-1}
           (closures
             ((#{anon a5dids9skwzdhr1md4j13r-6}
                ()
                (case-lambda
                  [clause
                   ()
                   #f
                   0
                   (closures
                     ((#{fact a5dids9skwzdhr1md4j13r-2}
                        (#{fact a5dids9skwzdhr1md4j13r-2})
                        (case-lambda
                          [clause
                           (#{n a5dids9skwzdhr1md4j13r-3})
                           #{cp a5dids9skwzdhr1md4j13r-8}
                           1
                           (if (call
                                 #f
                                 #[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                 #{n a5dids9skwzdhr1md4j13r-3}
                                 '0)
                               '1
                               (call
                                 #f
                                 #[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                 #{n a5dids9skwzdhr1md4j13r-3}
                                 (call
                                   #{dcl a5dids9skwzdhr1md4j13r-9}
                                   #{fact a5dids9skwzdhr1md4j13r-2}
                                   (call
                                     #f
                                     #[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                     #{n a5dids9skwzdhr1md4j13r-3}
                                     '1))))])))
                     (call
                       #{dcl a5dids9skwzdhr1md4j13r-9}
                       #{fact a5dids9skwzdhr1md4j13r-2}
                       '5))])))
             #{anon a5dids9skwzdhr1md4j13r-6})
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-identify-scc:
(case-lambda
  [clause
   ()
   #f
   0
   (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
     (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (call
                                             #f
                                             #[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                             #{t a5dids9skwzdhr1md4j13r-5}
                                             '#<unbound object>)])
       (closures
         ((#{swap a5dids9skwzdhr1md4j13r-1}
            (#{g0 a5dids9skwzdhr1md4j13r-0})
            (case-lambda
              [clause
               ()
               #{cp a5dids9skwzdhr1md4j13r-7}
               0
               (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (call
                                                       #f
                                                       #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
                 (begin
                   (call
                     #f
                     #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
                     (call
                       #f
                       #[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                       #{g0 a5dids9skwzdhr1md4j13r-0}))
                   (call
                     #f
                     #[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
                     #{g0 a5dids9skwzdhr1md4j13r-0}
                     #{g1 a5dids9skwzdhr1md4j13r-4})))])))
         (call #f
           #[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
           '#t #{swap a5dids9skwzdhr1md4j13r-1}
           (closures
             ((#{anon a5dids9skwzdhr1md4j13r-6}
                ()
                (case-lambda
                  [clause
                   ()
                   #f
                   0
                   (closures
                     ((#{fact a5dids9skwzdhr1md4j13r-2}
                        (#{fact a5dids9skwzdhr1md4j13r-2})
                        (case-lambda
                          [clause
                           (#{n a5dids9skwzdhr1md4j13r-3})
                           #{cp a5dids9skwzdhr1md4j13r-8}
                           1
                           (if (call
                                 #f
                                 #[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
                                 #{n a5dids9skwzdhr1md4j13r-3}
                                 '0)
                               '1
                               (call
                                 #f
                                 #[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
                                 #{n a5dids9skwzdhr1md4j13r-3}
                                 (call
                                   #{dcl a5dids9skwzdhr1md4j13r-9}
                                   #{fact a5dids9skwzdhr1md4j13r-2}
                                   (call
                                     #f
                                     #[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                                     #{n a5dids9skwzdhr1md4j13r-3}
                                     '1))))])))
                     (call
                       #{dcl a5dids9skwzdhr1md4j13r-9}
                       #{fact a5dids9skwzdhr1md4j13r-2}
                       '5))])))
             #{anon a5dids9skwzdhr1md4j13r-6})
           #{swap a5dids9skwzdhr1md4j13r-1}))))])
output of np-expand/optimize-closures:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (call
                                                #f
                                                #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
          (begin
            (call
              #f
              #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
              (call
                #f
                #[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)))
            (call
              #f
              #[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
              (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)
              #{g1 a5dids9skwzdhr1md4j13r-4})))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         #f
         0
         (call #{dcl a5dids9skwzdhr1md4j13r-9} #f '5)]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         #f
         1
         (if (call
               #f
               #[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
               #{n a5dids9skwzdhr1md4j13r-3}
               '0)
             '1
             (call
               #f
               #[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
               #{n a5dids9skwzdhr1md4j13r-3}
               (call
                 #{dcl a5dids9skwzdhr1md4j13r-9}
                 #f
                 (call
                   #f
                   #[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                   #{n a5dids9skwzdhr1md4j13r-3}
                   '1))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         #f
         0
         (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
           (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (call
                                                   #f
                                                   #[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                                   #{t a5dids9skwzdhr1md4j13r-5}
                                                   '#<unbound object>)])
             (let ([#{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> 16)])
               (begin
                 (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
                   (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
                 (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
                   #{g0 a5dids9skwzdhr1md4j13r-0})
                 (call #f
                   #[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
                   '#t #{swap a5dids9skwzdhr1md4j13r-1}
                   #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
                   #{swap a5dids9skwzdhr1md4j13r-1})))))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-simplify-if:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (call
                                                #f
                                                #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)])])
          (begin
            (call
              #f
              #[#{primref a0xltlrcpeygsahopkplcn-2} optimize-level 34 (0 1)]
              (call
                #f
                #[#{primref a0xltlrcpeygsahopkplcn-2} car 263802 (1)]
                (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)))
            (call
              #f
              #[#{primref a0xltlrcpeygsahopkplcn-2} set-car! 262458 (2)]
              (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)
              #{g1 a5dids9skwzdhr1md4j13r-4})))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         #f
         0
         (call #{dcl a5dids9skwzdhr1md4j13r-9} #f '5)]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         #f
         1
         (if (call
               #f
               #[#{primref a0xltlrcpeygsahopkplcn-2} = 82530 (-2)]
               #{n a5dids9skwzdhr1md4j13r-3}
               '0)
             '1
             (call
               #f
               #[#{primref a0xltlrcpeygsahopkplcn-2} * 19834 (-1)]
               #{n a5dids9skwzdhr1md4j13r-3}
               (call
                 #{dcl a5dids9skwzdhr1md4j13r-9}
                 #f
                 (call
                   #f
                   #[#{primref a0xltlrcpeygsahopkplcn-2} - 19834 (-2)]
                   #{n a5dids9skwzdhr1md4j13r-3}
                   '1))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         #f
         0
         (let ([#{t a5dids9skwzdhr1md4j13r-5} '0])
           (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (call
                                                   #f
                                                   #[#{primref a0xltlrcpeygsahopkplcn-2} cons 262650 (2)]
                                                   #{t a5dids9skwzdhr1md4j13r-5}
                                                   '#<unbound object>)])
             (let ([#{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> 16)])
               (begin
                 (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
                   (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
                 (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
                   #{g0 a5dids9skwzdhr1md4j13r-0})
                 (call #f
                   #[#{primref a0xltlrcpeygsahopkplcn-2} dynamic-wind 58 (3 4)]
                   '#t #{swap a5dids9skwzdhr1md4j13r-1}
                   #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
                   #{swap a5dids9skwzdhr1md4j13r-1})))))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-expand-primitives:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568)])
          (begin
            (call
              #f
              #<literal optimize-level>
              (mref (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11) zero 7))
            (let ([#{t a5dids9skwzdhr1md4j13r-14} (inline
                                                    #<info>
                                                    lea1
                                                    (mref
                                                      #{cp a5dids9skwzdhr1md4j13r-7}
                                                      zero
                                                      11))])
              (begin
                (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
                  #{g1 a5dids9skwzdhr1md4j13r-4})
                (if (inline
                      #<info>
                      log!test
                      #{g1 a5dids9skwzdhr1md4j13r-4}
                      7)
                    62
                    (inline
                      #<info>
                      remember
                      #{t a5dids9skwzdhr1md4j13r-14}))))))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         #f
         0
         (call #{dcl a5dids9skwzdhr1md4j13r-9} #f 40)]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         #f
         1
         (if (if (inline #<info> eq? #{n a5dids9skwzdhr1md4j13r-3} 0)
                 14
                 (if (inline
                       #<info>
                       log!test
                       #{n a5dids9skwzdhr1md4j13r-3}
                       7)
                     6
                     (begin
                       (pariah)
                       (call
                         #f
                         #<literal #(libspec = 34826)>
                         #{n a5dids9skwzdhr1md4j13r-3}
                         0))))
             8
             (let ([#{t a5dids9skwzdhr1md4j13r-15} (call
                                                     #{dcl a5dids9skwzdhr1md4j13r-9}
                                                     #f
                                                     (if (inline
                                                           #<info>
                                                           log!test
                                                           #{n a5dids9skwzdhr1md4j13r-3}
                                                           7)
                                                         (let ([#{t a5dids9skwzdhr1md4j13r-16} (inline
                                                                                                 #<info>
                                                                                                 \x2D;/ovfl
                                                                                                 #{n a5dids9skwzdhr1md4j13r-3}
                                                                                                 8)])
                                                           (if (inline
                                                                 #<info>
                                                                 condition-code)
                                                               (label
                                                                 #{Lfail a5dids9skwzdhr1md4j13r-17}
                                                                 (begin
                                                                   (pariah)
                                                                   (call
                                                                     #f
                                                                     #<literal #(libspec - 34838)>
                                                                     #{n a5dids9skwzdhr1md4j13r-3}
                                                                     8)))
                                                               #{t a5dids9skwzdhr1md4j13r-16}))
                                                         (goto
                                                           #{Lfail a5dids9skwzdhr1md4j13r-17})))])
               (if (inline
                     #<info>
                     log!test
                     (inline
                       #<info>
                       logor
                       #{n a5dids9skwzdhr1md4j13r-3}
                       #{t a5dids9skwzdhr1md4j13r-15})
                     7)
                   (let ([#{t a5dids9skwzdhr1md4j13r-18} (inline
                                                           #<info>
                                                           */ovfl
                                                           #{n a5dids9skwzdhr1md4j13r-3}
                                                           (inline
                                                             #<info>
                                                             sra
                                                             #{t a5dids9skwzdhr1md4j13r-15}
                                                             3))])
                     (if (inline #<info> condition-code)
                         (label
                           #{Lfail a5dids9skwzdhr1md4j13r-19}
                           (begin
                             (pariah)
                             (call
                               #f
                               #<literal #(libspec * 34840)>
                               #{n a5dids9skwzdhr1md4j13r-3}
                               #{t a5dids9skwzdhr1md4j13r-15})))
                         #{t a5dids9skwzdhr1md4j13r-18}))
                   (goto #{Lfail a5dids9skwzdhr1md4j13r-19}))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         #f
         0
         (let ([#{t a5dids9skwzdhr1md4j13r-5} 0])
           (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (let ([#{t a5dids9skwzdhr1md4j13r-20} (alloc
                                                                                         #<info>
                                                                                         16)])
                                                   (begin
                                                     (set! (mref
                                                             #{t a5dids9skwzdhr1md4j13r-20}
                                                             zero
                                                             7)
                                                       #{t a5dids9skwzdhr1md4j13r-5})
                                                     (set! (mref
                                                             #{t a5dids9skwzdhr1md4j13r-20}
                                                             zero
                                                             15)
                                                       30)
                                                     #{t a5dids9skwzdhr1md4j13r-20}))])
             (let ([#{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> 16)])
               (begin
                 (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
                   (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
                 (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
                   #{g0 a5dids9skwzdhr1md4j13r-0})
                 (call #f #<literal dynamic-wind> 14
                   #{swap a5dids9skwzdhr1md4j13r-1}
                   #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
                   #{swap a5dids9skwzdhr1md4j13r-1})))))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-place-overflow-and-trap:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (overflow-check
          (trap-check
            #f
            (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568)])
              (begin
                (call
                  #f
                  #<literal optimize-level>
                  (mref
                    (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)
                    zero
                    7))
                (let ([#{t a5dids9skwzdhr1md4j13r-14} (inline
                                                        #<info>
                                                        lea1
                                                        (mref
                                                          #{cp a5dids9skwzdhr1md4j13r-7}
                                                          zero
                                                          11))])
                  (begin
                    (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
                      #{g1 a5dids9skwzdhr1md4j13r-4})
                    (if (inline
                          #<info>
                          log!test
                          #{g1 a5dids9skwzdhr1md4j13r-4}
                          7)
                        62
                        (inline
                          #<info>
                          remember
                          #{t a5dids9skwzdhr1md4j13r-14}))))))))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         #f
         0
         (trap-check
           #t
           (call #{dcl a5dids9skwzdhr1md4j13r-9} #f 40))]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         #f
         1
         (if (if (inline #<info> eq? #{n a5dids9skwzdhr1md4j13r-3} 0)
                 14
                 (if (inline
                       #<info>
                       log!test
                       #{n a5dids9skwzdhr1md4j13r-3}
                       7)
                     6
                     (begin
                       (pariah)
                       (trap-check
                         #t
                         (call
                           #f
                           #<literal #(libspec = 34827)>
                           #{n a5dids9skwzdhr1md4j13r-3}
                           0)))))
             8
             (overflow-check
               (trap-check
                 #f
                 (let ([#{t a5dids9skwzdhr1md4j13r-15} (call
                                                         #{dcl a5dids9skwzdhr1md4j13r-9}
                                                         #f
                                                         (if (inline
                                                               #<info>
                                                               log!test
                                                               #{n a5dids9skwzdhr1md4j13r-3}
                                                               7)
                                                             (let ([#{t a5dids9skwzdhr1md4j13r-16} (inline
                                                                                                     #<info>
                                                                                                     \x2D;/ovfl
                                                                                                     #{n a5dids9skwzdhr1md4j13r-3}
                                                                                                     8)])
                                                               (if (inline
                                                                     #<info>
                                                                     condition-code)
                                                                   (label
                                                                     #{Lfail a5dids9skwzdhr1md4j13r-17}
                                                                     (begin
                                                                       (pariah)
                                                                       (call
                                                                         #f
                                                                         #<literal #(libspec - 34838)>
                                                                         #{n a5dids9skwzdhr1md4j13r-3}
                                                                         8)))
                                                                   #{t a5dids9skwzdhr1md4j13r-16}))
                                                             (goto
                                                               #{Lfail a5dids9skwzdhr1md4j13r-17})))])
                   (if (inline
                         #<info>
                         log!test
                         (inline
                           #<info>
                           logor
                           #{n a5dids9skwzdhr1md4j13r-3}
                           #{t a5dids9skwzdhr1md4j13r-15})
                         7)
                       (let ([#{t a5dids9skwzdhr1md4j13r-18} (inline
                                                               #<info>
                                                               */ovfl
                                                               #{n a5dids9skwzdhr1md4j13r-3}
                                                               (inline
                                                                 #<info>
                                                                 sra
                                                                 #{t a5dids9skwzdhr1md4j13r-15}
                                                                 3))])
                         (if (inline #<info> condition-code)
                             (label
                               #{Lfail a5dids9skwzdhr1md4j13r-19}
                               (begin
                                 (pariah)
                                 (call
                                   #f
                                   #<literal #(libspec * 34840)>
                                   #{n a5dids9skwzdhr1md4j13r-3}
                                   #{t a5dids9skwzdhr1md4j13r-15})))
                             #{t a5dids9skwzdhr1md4j13r-18}))
                       (goto #{Lfail a5dids9skwzdhr1md4j13r-19}))))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         #f
         0
         (trap-check
           #t
           (let ([#{t a5dids9skwzdhr1md4j13r-5} 0])
             (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (let ([#{t a5dids9skwzdhr1md4j13r-20} (alloc
                                                                                           #<info>
                                                                                           16)])
                                                     (begin
                                                       (set! (mref
                                                               #{t a5dids9skwzdhr1md4j13r-20}
                                                               zero
                                                               7)
                                                         #{t a5dids9skwzdhr1md4j13r-5})
                                                       (set! (mref
                                                               #{t a5dids9skwzdhr1md4j13r-20}
                                                               zero
                                                               15)
                                                         30)
                                                       #{t a5dids9skwzdhr1md4j13r-20}))])
               (let ([#{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> 16)])
                 (begin
                   (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
                     (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
                   (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
                     #{g0 a5dids9skwzdhr1md4j13r-0})
                   (call #f #<literal dynamic-wind> 14
                     #{swap a5dids9skwzdhr1md4j13r-1}
                     #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
                     #{swap a5dids9skwzdhr1md4j13r-1}))))))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-rebind-on-ruined-path:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (overflow-check
          (trap-check
            #f
            (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568)])
              (begin
                (call
                  #f
                  #<literal optimize-level>
                  (mref
                    (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)
                    zero
                    7))
                (let ([#{t a5dids9skwzdhr1md4j13r-14} (inline
                                                        #<info>
                                                        lea1
                                                        (mref
                                                          #{cp a5dids9skwzdhr1md4j13r-7}
                                                          zero
                                                          11))])
                  (begin
                    (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
                      #{g1 a5dids9skwzdhr1md4j13r-4})
                    (if (inline
                          #<info>
                          log!test
                          #{g1 a5dids9skwzdhr1md4j13r-4}
                          7)
                        62
                        (inline
                          #<info>
                          remember
                          #{t a5dids9skwzdhr1md4j13r-14}))))))))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         #f
         0
         (trap-check
           #t
           (call #{dcl a5dids9skwzdhr1md4j13r-9} #f 40))]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         #f
         1
         (if (if (inline #<info> eq? #{n a5dids9skwzdhr1md4j13r-3} 0)
                 14
                 (if (inline
                       #<info>
                       log!test
                       #{n a5dids9skwzdhr1md4j13r-3}
                       7)
                     6
                     (begin
                       (pariah)
                       (trap-check
                         #t
                         (call
                           #f
                           #<literal #(libspec = 34827)>
                           #{n a5dids9skwzdhr1md4j13r-3}
                           0)))))
             8
             (let ()
               (overflow-check
                 (trap-check
                   #f
                   (let ([#{t a5dids9skwzdhr1md4j13r-15} (call
                                                           #{dcl a5dids9skwzdhr1md4j13r-9}
                                                           #f
                                                           (if (inline
                                                                 #<info>
                                                                 log!test
                                                                 #{n a5dids9skwzdhr1md4j13r-3}
                                                                 7)
                                                               (let ([#{t a5dids9skwzdhr1md4j13r-16} (inline
                                                                                                       #<info>
                                                                                                       \x2D;/ovfl
                                                                                                       #{n a5dids9skwzdhr1md4j13r-3}
                                                                                                       8)])
                                                                 (if (inline
                                                                       #<info>
                                                                       condition-code)
                                                                     (label
                                                                       #{Lfail a5dids9skwzdhr1md4j13r-17}
                                                                       (begin
                                                                         (pariah)
                                                                         (call
                                                                           #f
                                                                           #<literal #(libspec - 34838)>
                                                                           #{n a5dids9skwzdhr1md4j13r-3}
                                                                           8)))
                                                                     #{t a5dids9skwzdhr1md4j13r-16}))
                                                               (goto
                                                                 #{Lfail a5dids9skwzdhr1md4j13r-17})))])
                     (if (inline
                           #<info>
                           log!test
                           (inline
                             #<info>
                             logor
                             #{n a5dids9skwzdhr1md4j13r-3}
                             #{t a5dids9skwzdhr1md4j13r-15})
                           7)
                         (let ([#{t a5dids9skwzdhr1md4j13r-18} (inline
                                                                 #<info>
                                                                 */ovfl
                                                                 #{n a5dids9skwzdhr1md4j13r-3}
                                                                 (inline
                                                                   #<info>
                                                                   sra
                                                                   #{t a5dids9skwzdhr1md4j13r-15}
                                                                   3))])
                           (if (inline #<info> condition-code)
                               (label
                                 #{Lfail a5dids9skwzdhr1md4j13r-19}
                                 (begin
                                   (pariah)
                                   (call
                                     #f
                                     #<literal #(libspec * 34840)>
                                     #{n a5dids9skwzdhr1md4j13r-3}
                                     #{t a5dids9skwzdhr1md4j13r-15})))
                               #{t a5dids9skwzdhr1md4j13r-18}))
                         (goto #{Lfail a5dids9skwzdhr1md4j13r-19})))))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         #f
         0
         (trap-check
           #t
           (let ([#{t a5dids9skwzdhr1md4j13r-5} 0])
             (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (let ([#{t a5dids9skwzdhr1md4j13r-20} (alloc
                                                                                           #<info>
                                                                                           16)])
                                                     (begin
                                                       (set! (mref
                                                               #{t a5dids9skwzdhr1md4j13r-20}
                                                               zero
                                                               7)
                                                         #{t a5dids9skwzdhr1md4j13r-5})
                                                       (set! (mref
                                                               #{t a5dids9skwzdhr1md4j13r-20}
                                                               zero
                                                               15)
                                                         30)
                                                       #{t a5dids9skwzdhr1md4j13r-20}))])
               (let ([#{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> 16)])
                 (begin
                   (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
                     (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
                   (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
                     #{g0 a5dids9skwzdhr1md4j13r-0})
                   (call #f #<literal dynamic-wind> 14
                     #{swap a5dids9skwzdhr1md4j13r-1}
                     #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
                     #{swap a5dids9skwzdhr1md4j13r-1}))))))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-finalize-loops:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (overflow-check
          (trap-check
            #f
            (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568)])
              (begin
                (call
                  #f
                  #<literal optimize-level>
                  (mref
                    (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)
                    zero
                    7))
                (let ([#{t a5dids9skwzdhr1md4j13r-14} (inline
                                                        #<info>
                                                        lea1
                                                        (mref
                                                          #{cp a5dids9skwzdhr1md4j13r-7}
                                                          zero
                                                          11))])
                  (begin
                    (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
                      #{g1 a5dids9skwzdhr1md4j13r-4})
                    (if (inline
                          #<info>
                          log!test
                          #{g1 a5dids9skwzdhr1md4j13r-4}
                          7)
                        62
                        (inline
                          #<info>
                          remember
                          #{t a5dids9skwzdhr1md4j13r-14}))))))))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         #f
         0
         (trap-check
           #t
           (call #{dcl a5dids9skwzdhr1md4j13r-9} #f 40))]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         #f
         1
         (if (if (inline #<info> eq? #{n a5dids9skwzdhr1md4j13r-3} 0)
                 14
                 (if (inline
                       #<info>
                       log!test
                       #{n a5dids9skwzdhr1md4j13r-3}
                       7)
                     6
                     (begin
                       (pariah)
                       (trap-check
                         #t
                         (call
                           #f
                           #<literal #(libspec = 34827)>
                           #{n a5dids9skwzdhr1md4j13r-3}
                           0)))))
             8
             (let ()
               (overflow-check
                 (trap-check
                   #f
                   (let ([#{t a5dids9skwzdhr1md4j13r-15} (call
                                                           #{dcl a5dids9skwzdhr1md4j13r-9}
                                                           #f
                                                           (if (inline
                                                                 #<info>
                                                                 log!test
                                                                 #{n a5dids9skwzdhr1md4j13r-3}
                                                                 7)
                                                               (let ([#{t a5dids9skwzdhr1md4j13r-16} (inline
                                                                                                       #<info>
                                                                                                       \x2D;/ovfl
                                                                                                       #{n a5dids9skwzdhr1md4j13r-3}
                                                                                                       8)])
                                                                 (if (inline
                                                                       #<info>
                                                                       condition-code)
                                                                     (label
                                                                       #{Lfail a5dids9skwzdhr1md4j13r-17}
                                                                       (begin
                                                                         (pariah)
                                                                         (call
                                                                           #f
                                                                           #<literal #(libspec - 34838)>
                                                                           #{n a5dids9skwzdhr1md4j13r-3}
                                                                           8)))
                                                                     #{t a5dids9skwzdhr1md4j13r-16}))
                                                               (goto
                                                                 #{Lfail a5dids9skwzdhr1md4j13r-17})))])
                     (if (inline
                           #<info>
                           log!test
                           (inline
                             #<info>
                             logor
                             #{n a5dids9skwzdhr1md4j13r-3}
                             #{t a5dids9skwzdhr1md4j13r-15})
                           7)
                         (let ([#{t a5dids9skwzdhr1md4j13r-18} (inline
                                                                 #<info>
                                                                 */ovfl
                                                                 #{n a5dids9skwzdhr1md4j13r-3}
                                                                 (inline
                                                                   #<info>
                                                                   sra
                                                                   #{t a5dids9skwzdhr1md4j13r-15}
                                                                   3))])
                           (if (inline #<info> condition-code)
                               (label
                                 #{Lfail a5dids9skwzdhr1md4j13r-19}
                                 (begin
                                   (pariah)
                                   (call
                                     #f
                                     #<literal #(libspec * 34840)>
                                     #{n a5dids9skwzdhr1md4j13r-3}
                                     #{t a5dids9skwzdhr1md4j13r-15})))
                               #{t a5dids9skwzdhr1md4j13r-18}))
                         (goto #{Lfail a5dids9skwzdhr1md4j13r-19})))))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         #f
         0
         (trap-check
           #t
           (let ([#{t a5dids9skwzdhr1md4j13r-5} 0])
             (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (let ([#{t a5dids9skwzdhr1md4j13r-20} (alloc
                                                                                           #<info>
                                                                                           16)])
                                                     (begin
                                                       (set! (mref
                                                               #{t a5dids9skwzdhr1md4j13r-20}
                                                               zero
                                                               7)
                                                         #{t a5dids9skwzdhr1md4j13r-5})
                                                       (set! (mref
                                                               #{t a5dids9skwzdhr1md4j13r-20}
                                                               zero
                                                               15)
                                                         30)
                                                       #{t a5dids9skwzdhr1md4j13r-20}))])
               (let ([#{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> 16)])
                 (begin
                   (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
                     (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
                   (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
                     #{g0 a5dids9skwzdhr1md4j13r-0})
                   (call #f #<literal dynamic-wind> 14
                     #{swap a5dids9skwzdhr1md4j13r-1}
                     #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
                     #{swap a5dids9skwzdhr1md4j13r-1}))))))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-optimize-pred-in-value:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (overflow-check
          (trap-check
            #f
            (let ([#{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568)])
              (begin
                (call
                  #f
                  #<literal optimize-level>
                  (mref
                    (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)
                    zero
                    7))
                (let ([#{t a5dids9skwzdhr1md4j13r-14} (inline
                                                        #<info>
                                                        lea1
                                                        (mref
                                                          #{cp a5dids9skwzdhr1md4j13r-7}
                                                          zero
                                                          11))])
                  (begin
                    (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
                      #{g1 a5dids9skwzdhr1md4j13r-4})
                    (if (inline
                          #<info>
                          log!test
                          #{g1 a5dids9skwzdhr1md4j13r-4}
                          7)
                        62
                        (inline
                          #<info>
                          remember
                          #{t a5dids9skwzdhr1md4j13r-14}))))))))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         #f
         0
         (trap-check
           #t
           (call #{dcl a5dids9skwzdhr1md4j13r-9} #f 40))]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         #f
         1
         (if (if (inline #<info> eq? #{n a5dids9skwzdhr1md4j13r-3} 0)
                 14
                 (if (inline
                       #<info>
                       log!test
                       #{n a5dids9skwzdhr1md4j13r-3}
                       7)
                     6
                     (begin
                       (pariah)
                       (trap-check
                         #t
                         (call
                           #f
                           #<literal #(libspec = 34827)>
                           #{n a5dids9skwzdhr1md4j13r-3}
                           0)))))
             8
             (let ()
               (overflow-check
                 (trap-check
                   #f
                   (let ([#{t a5dids9skwzdhr1md4j13r-15} (call
                                                           #{dcl a5dids9skwzdhr1md4j13r-9}
                                                           #f
                                                           (if (inline
                                                                 #<info>
                                                                 log!test
                                                                 #{n a5dids9skwzdhr1md4j13r-3}
                                                                 7)
                                                               (let ([#{t a5dids9skwzdhr1md4j13r-16} (inline
                                                                                                       #<info>
                                                                                                       \x2D;/ovfl
                                                                                                       #{n a5dids9skwzdhr1md4j13r-3}
                                                                                                       8)])
                                                                 (if (inline
                                                                       #<info>
                                                                       condition-code)
                                                                     (label
                                                                       #{Lfail a5dids9skwzdhr1md4j13r-17}
                                                                       (begin
                                                                         (pariah)
                                                                         (call
                                                                           #f
                                                                           #<literal #(libspec - 34838)>
                                                                           #{n a5dids9skwzdhr1md4j13r-3}
                                                                           8)))
                                                                     #{t a5dids9skwzdhr1md4j13r-16}))
                                                               (goto
                                                                 #{Lfail a5dids9skwzdhr1md4j13r-17})))])
                     (if (inline
                           #<info>
                           log!test
                           (inline
                             #<info>
                             logor
                             #{n a5dids9skwzdhr1md4j13r-3}
                             #{t a5dids9skwzdhr1md4j13r-15})
                           7)
                         (let ([#{t a5dids9skwzdhr1md4j13r-18} (inline
                                                                 #<info>
                                                                 */ovfl
                                                                 #{n a5dids9skwzdhr1md4j13r-3}
                                                                 (inline
                                                                   #<info>
                                                                   sra
                                                                   #{t a5dids9skwzdhr1md4j13r-15}
                                                                   3))])
                           (if (inline #<info> condition-code)
                               (label
                                 #{Lfail a5dids9skwzdhr1md4j13r-19}
                                 (begin
                                   (pariah)
                                   (call
                                     #f
                                     #<literal #(libspec * 34840)>
                                     #{n a5dids9skwzdhr1md4j13r-3}
                                     #{t a5dids9skwzdhr1md4j13r-15})))
                               #{t a5dids9skwzdhr1md4j13r-18}))
                         (goto #{Lfail a5dids9skwzdhr1md4j13r-19})))))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         #f
         0
         (trap-check
           #t
           (let ([#{t a5dids9skwzdhr1md4j13r-5} 0])
             (let ([#{g0 a5dids9skwzdhr1md4j13r-0} (let ([#{t a5dids9skwzdhr1md4j13r-20} (alloc
                                                                                           #<info>
                                                                                           16)])
                                                     (begin
                                                       (set! (mref
                                                               #{t a5dids9skwzdhr1md4j13r-20}
                                                               zero
                                                               7)
                                                         #{t a5dids9skwzdhr1md4j13r-5})
                                                       (set! (mref
                                                               #{t a5dids9skwzdhr1md4j13r-20}
                                                               zero
                                                               15)
                                                         30)
                                                       #{t a5dids9skwzdhr1md4j13r-20}))])
               (let ([#{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> 16)])
                 (begin
                   (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
                     (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
                   (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
                     #{g0 a5dids9skwzdhr1md4j13r-0})
                   (call #f #<literal dynamic-wind> 14
                     #{swap a5dids9skwzdhr1md4j13r-1}
                     #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
                     #{swap a5dids9skwzdhr1md4j13r-1}))))))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-remove-complex-opera*:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        (#{g1 a5dids9skwzdhr1md4j13r-4}
          #{t a5dids9skwzdhr1md4j13r-14}
          #{t a5dids9skwzdhr1md4j13r-21})
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (overflow-check
          (trap-check
            #f
            (begin
              (set! #{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568))
              (set! #{t a5dids9skwzdhr1md4j13r-21}
                (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11))
              (call
                #f
                #<literal optimize-level>
                (mref #{t a5dids9skwzdhr1md4j13r-21} zero 7))
              (set! #{t a5dids9skwzdhr1md4j13r-14}
                (inline
                  #<info>
                  lea1
                  (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)))
              (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
                #{g1 a5dids9skwzdhr1md4j13r-4})
              '62
              (if (inline
                    #<info>
                    log!test
                    #{g1 a5dids9skwzdhr1md4j13r-4}
                    '7)
                  '62
                  (inline
                    #<info>
                    remember
                    #{t a5dids9skwzdhr1md4j13r-14})))))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         ()
         #f
         0
         (trap-check
           #t
           (call #{dcl a5dids9skwzdhr1md4j13r-9} #f '40))]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         (#{t a5dids9skwzdhr1md4j13r-16} #{t a5dids9skwzdhr1md4j13r-22}
           #{t a5dids9skwzdhr1md4j13r-15}
           #{t a5dids9skwzdhr1md4j13r-23}
           #{t a5dids9skwzdhr1md4j13r-18}
           #{t a5dids9skwzdhr1md4j13r-24})
         #f
         1
         (if (if (inline
                   #<info>
                   eq?
                   #{n a5dids9skwzdhr1md4j13r-3}
                   '0)
                 '14
                 (if (inline
                       #<info>
                       log!test
                       #{n a5dids9skwzdhr1md4j13r-3}
                       '7)
                     '6
                     (begin
                       (pariah)
                       (trap-check
                         #t
                         (call
                           #f
                           #<literal #(libspec = 34827)>
                           #{n a5dids9skwzdhr1md4j13r-3}
                           '0)))))
             '8
             (overflow-check
               (trap-check
                 #f
                 (begin
                   (if (inline
                         #<info>
                         log!test
                         #{n a5dids9skwzdhr1md4j13r-3}
                         '7)
                       (begin
                         (set! #{t a5dids9skwzdhr1md4j13r-16}
                           (inline
                             #<info>
                             \x2D;/ovfl
                             #{n a5dids9skwzdhr1md4j13r-3}
                             '8))
                         (if (inline #<info> condition-code)
                             (label
                               #{Lfail a5dids9skwzdhr1md4j13r-17}
                               (begin
                                 (pariah)
                                 (set! #{t a5dids9skwzdhr1md4j13r-22}
                                   (call
                                     #f
                                     #<literal #(libspec - 34838)>
                                     #{n a5dids9skwzdhr1md4j13r-3}
                                     '8))))
                             (set! #{t a5dids9skwzdhr1md4j13r-22}
                               #{t a5dids9skwzdhr1md4j13r-16})))
                       (goto #{Lfail a5dids9skwzdhr1md4j13r-17}))
                   (set! #{t a5dids9skwzdhr1md4j13r-15}
                     (call
                       #{dcl a5dids9skwzdhr1md4j13r-9}
                       #f
                       #{t a5dids9skwzdhr1md4j13r-22}))
                   (if (begin
                         (set! #{t a5dids9skwzdhr1md4j13r-24}
                           (inline
                             #<info>
                             logor
                             #{n a5dids9skwzdhr1md4j13r-3}
                             #{t a5dids9skwzdhr1md4j13r-15}))
                         (inline
                           #<info>
                           log!test
                           #{t a5dids9skwzdhr1md4j13r-24}
                           '7))
                       (begin
                         (set! #{t a5dids9skwzdhr1md4j13r-23}
                           (inline
                             #<info>
                             sra
                             #{t a5dids9skwzdhr1md4j13r-15}
                             '3))
                         (set! #{t a5dids9skwzdhr1md4j13r-18}
                           (inline
                             #<info>
                             */ovfl
                             #{n a5dids9skwzdhr1md4j13r-3}
                             #{t a5dids9skwzdhr1md4j13r-23}))
                         (if (inline #<info> condition-code)
                             (label
                               #{Lfail a5dids9skwzdhr1md4j13r-19}
                               (begin
                                 (pariah)
                                 (call
                                   #f
                                   #<literal #(libspec * 34840)>
                                   #{n a5dids9skwzdhr1md4j13r-3}
                                   #{t a5dids9skwzdhr1md4j13r-15})))
                             #{t a5dids9skwzdhr1md4j13r-18}))
                       (goto #{Lfail a5dids9skwzdhr1md4j13r-19}))))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         (#{t a5dids9skwzdhr1md4j13r-5}
           #{t a5dids9skwzdhr1md4j13r-20}
           #{g0 a5dids9skwzdhr1md4j13r-0}
           #{swap a5dids9skwzdhr1md4j13r-1})
         #f
         0
         (trap-check
           #t
           (begin
             (set! #{t a5dids9skwzdhr1md4j13r-5} '0)
             (set! #{t a5dids9skwzdhr1md4j13r-20} (alloc #<info> '16))
             (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 7)
               #{t a5dids9skwzdhr1md4j13r-5})
             '62
             (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 15) '30)
             '62
             (set! #{g0 a5dids9skwzdhr1md4j13r-0}
               #{t a5dids9skwzdhr1md4j13r-20})
             (set! #{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> '16))
             (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
               (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
             '62
             (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
               #{g0 a5dids9skwzdhr1md4j13r-0})
             '62
             (call #f #<literal dynamic-wind> '14
               #{swap a5dids9skwzdhr1md4j13r-1}
               #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
               #{swap a5dids9skwzdhr1md4j13r-1})))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-push-mrvs:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        (#{g1 a5dids9skwzdhr1md4j13r-4}
          #{t a5dids9skwzdhr1md4j13r-14}
          #{t a5dids9skwzdhr1md4j13r-21})
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (overflow-check
          (trap-check
            #f
            (begin
              (set! #{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568))
              (set! #{t a5dids9skwzdhr1md4j13r-21}
                (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11))
              (mvcall
                #f
                #<literal optimize-level>
                (mref #{t a5dids9skwzdhr1md4j13r-21} zero 7)
                ())
              (set! #{t a5dids9skwzdhr1md4j13r-14}
                (inline
                  #<info>
                  lea1
                  (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)))
              (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
                #{g1 a5dids9skwzdhr1md4j13r-4})
              '62
              (if (inline
                    #<info>
                    log!test
                    #{g1 a5dids9skwzdhr1md4j13r-4}
                    '7)
                  '62
                  (inline
                    #<info>
                    remember
                    #{t a5dids9skwzdhr1md4j13r-14})))))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         ()
         #f
         0
         (trap-check
           #t
           (mvcall #{dcl a5dids9skwzdhr1md4j13r-9} #f '40 ()))]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         (#{t a5dids9skwzdhr1md4j13r-16} #{t a5dids9skwzdhr1md4j13r-22}
           #{t a5dids9skwzdhr1md4j13r-15}
           #{t a5dids9skwzdhr1md4j13r-23}
           #{t a5dids9skwzdhr1md4j13r-18}
           #{t a5dids9skwzdhr1md4j13r-24})
         #f
         1
         (if (if (inline
                   #<info>
                   eq?
                   #{n a5dids9skwzdhr1md4j13r-3}
                   '0)
                 '14
                 (if (inline
                       #<info>
                       log!test
                       #{n a5dids9skwzdhr1md4j13r-3}
                       '7)
                     '6
                     (begin
                       (pariah)
                       (trap-check
                         #t
                         (mvcall #f #<literal #(libspec = 34827)>
                           #{n a5dids9skwzdhr1md4j13r-3} '0 ())))))
             '8
             (overflow-check
               (trap-check
                 #f
                 (begin
                   (if (inline
                         #<info>
                         log!test
                         #{n a5dids9skwzdhr1md4j13r-3}
                         '7)
                       (begin
                         (set! #{t a5dids9skwzdhr1md4j13r-16}
                           (inline
                             #<info>
                             \x2D;/ovfl
                             #{n a5dids9skwzdhr1md4j13r-3}
                             '8))
                         (if (inline #<info> condition-code)
                             (label
                               #{Lfail a5dids9skwzdhr1md4j13r-17}
                               (begin
                                 (pariah)
                                 (set! #{t a5dids9skwzdhr1md4j13r-22}
                                   (mvcall #f #<literal #(libspec - 34838)>
                                     #{n a5dids9skwzdhr1md4j13r-3} '8
                                     ()))))
                             (set! #{t a5dids9skwzdhr1md4j13r-22}
                               #{t a5dids9skwzdhr1md4j13r-16})))
                       (goto #{Lfail a5dids9skwzdhr1md4j13r-17}))
                   (set! #{t a5dids9skwzdhr1md4j13r-15}
                     (mvcall
                       #{dcl a5dids9skwzdhr1md4j13r-9}
                       #f
                       #{t a5dids9skwzdhr1md4j13r-22}
                       ()))
                   (if (begin
                         (set! #{t a5dids9skwzdhr1md4j13r-24}
                           (inline
                             #<info>
                             logor
                             #{n a5dids9skwzdhr1md4j13r-3}
                             #{t a5dids9skwzdhr1md4j13r-15}))
                         (inline
                           #<info>
                           log!test
                           #{t a5dids9skwzdhr1md4j13r-24}
                           '7))
                       (begin
                         (set! #{t a5dids9skwzdhr1md4j13r-23}
                           (inline
                             #<info>
                             sra
                             #{t a5dids9skwzdhr1md4j13r-15}
                             '3))
                         (set! #{t a5dids9skwzdhr1md4j13r-18}
                           (inline
                             #<info>
                             */ovfl
                             #{n a5dids9skwzdhr1md4j13r-3}
                             #{t a5dids9skwzdhr1md4j13r-23}))
                         (if (inline #<info> condition-code)
                             (label
                               #{Lfail a5dids9skwzdhr1md4j13r-19}
                               (begin
                                 (pariah)
                                 (mvcall #f #<literal #(libspec * 34840)>
                                   #{n a5dids9skwzdhr1md4j13r-3}
                                   #{t a5dids9skwzdhr1md4j13r-15} ())))
                             #{t a5dids9skwzdhr1md4j13r-18}))
                       (goto #{Lfail a5dids9skwzdhr1md4j13r-19}))))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         (#{t a5dids9skwzdhr1md4j13r-5}
           #{t a5dids9skwzdhr1md4j13r-20}
           #{g0 a5dids9skwzdhr1md4j13r-0}
           #{swap a5dids9skwzdhr1md4j13r-1})
         #f
         0
         (trap-check
           #t
           (begin
             (set! #{t a5dids9skwzdhr1md4j13r-5} '0)
             (set! #{t a5dids9skwzdhr1md4j13r-20} (alloc #<info> '16))
             (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 7)
               #{t a5dids9skwzdhr1md4j13r-5})
             '62
             (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 15) '30)
             '62
             (set! #{g0 a5dids9skwzdhr1md4j13r-0}
               #{t a5dids9skwzdhr1md4j13r-20})
             (set! #{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> '16))
             (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
               (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
             '62
             (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
               #{g0 a5dids9skwzdhr1md4j13r-0})
             '62
             (mvcall #f #<literal dynamic-wind> '14
               #{swap a5dids9skwzdhr1md4j13r-1}
               #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
               #{swap a5dids9skwzdhr1md4j13r-1} ())))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-normalize-context:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        (#{g1 a5dids9skwzdhr1md4j13r-4}
          #{t a5dids9skwzdhr1md4j13r-14}
          #{t a5dids9skwzdhr1md4j13r-21})
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (begin
          (overflow-check)
          (trap-check #f)
          (set! #{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568))
          (set! #{t a5dids9skwzdhr1md4j13r-21}
            (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11))
          (mvcall
            #f
            #<literal optimize-level>
            (mref #{t a5dids9skwzdhr1md4j13r-21} zero 7)
            ())
          (set! #{t a5dids9skwzdhr1md4j13r-14}
            (inline
              #<info>
              lea1
              (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)))
          (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
            #{g1 a5dids9skwzdhr1md4j13r-4})
          (nop)
          (if (inline
                #<info>
                log!test
                #{g1 a5dids9skwzdhr1md4j13r-4}
                '7)
              '62
              (begin
                (inline #<info> remember #{t a5dids9skwzdhr1md4j13r-14})
                '62)))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         ()
         #f
         0
         (begin
           (trap-check #t)
           (mvcall #{dcl a5dids9skwzdhr1md4j13r-9} #f '40 ()))]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         (#{t a5dids9skwzdhr1md4j13r-25} #{t a5dids9skwzdhr1md4j13r-16}
           #{t a5dids9skwzdhr1md4j13r-22}
           #{t a5dids9skwzdhr1md4j13r-15}
           #{t a5dids9skwzdhr1md4j13r-23}
           #{t a5dids9skwzdhr1md4j13r-18}
           #{t a5dids9skwzdhr1md4j13r-24})
         #f
         1
         (if (if (inline
                   #<info>
                   eq?
                   #{n a5dids9skwzdhr1md4j13r-3}
                   '0)
                 #t
                 (if (inline
                       #<info>
                       log!test
                       #{n a5dids9skwzdhr1md4j13r-3}
                       '7)
                     #f
                     (begin
                       (pariah)
                       (trap-check #t)
                       (set! #{t a5dids9skwzdhr1md4j13r-25}
                         (mvcall #f #<literal #(libspec = 34827)>
                           #{n a5dids9skwzdhr1md4j13r-3} '0 ()))
                       (if (inline
                             #<info>
                             eq?
                             #{t a5dids9skwzdhr1md4j13r-25}
                             '6)
                           #f
                           #t))))
             '8
             (begin
               (overflow-check)
               (trap-check #f)
               (if (inline
                     #<info>
                     log!test
                     #{n a5dids9skwzdhr1md4j13r-3}
                     '7)
                   (begin
                     (set! #{t a5dids9skwzdhr1md4j13r-16}
                       (inline
                         #<info>
                         \x2D;/ovfl
                         #{n a5dids9skwzdhr1md4j13r-3}
                         '8))
                     (if (inline #<info> condition-code)
                         (begin
                           (label #{Lfail a5dids9skwzdhr1md4j13r-17})
                           (pariah)
                           (set! #{t a5dids9skwzdhr1md4j13r-22}
                             (mvcall #f #<literal #(libspec - 34838)>
                               #{n a5dids9skwzdhr1md4j13r-3} '8 ())))
                         (set! #{t a5dids9skwzdhr1md4j13r-22}
                           #{t a5dids9skwzdhr1md4j13r-16})))
                   (goto #{Lfail a5dids9skwzdhr1md4j13r-17}))
               (set! #{t a5dids9skwzdhr1md4j13r-15}
                 (mvcall
                   #{dcl a5dids9skwzdhr1md4j13r-9}
                   #f
                   #{t a5dids9skwzdhr1md4j13r-22}
                   ()))
               (if (begin
                     (set! #{t a5dids9skwzdhr1md4j13r-24}
                       (inline
                         #<info>
                         logor
                         #{n a5dids9skwzdhr1md4j13r-3}
                         #{t a5dids9skwzdhr1md4j13r-15}))
                     (inline
                       #<info>
                       log!test
                       #{t a5dids9skwzdhr1md4j13r-24}
                       '7))
                   (begin
                     (set! #{t a5dids9skwzdhr1md4j13r-23}
                       (inline
                         #<info>
                         sra
                         #{t a5dids9skwzdhr1md4j13r-15}
                         '3))
                     (set! #{t a5dids9skwzdhr1md4j13r-18}
                       (inline
                         #<info>
                         */ovfl
                         #{n a5dids9skwzdhr1md4j13r-3}
                         #{t a5dids9skwzdhr1md4j13r-23}))
                     (if (inline #<info> condition-code)
                         (begin
                           (label #{Lfail a5dids9skwzdhr1md4j13r-19})
                           (pariah)
                           (mvcall #f #<literal #(libspec * 34840)>
                             #{n a5dids9skwzdhr1md4j13r-3}
                             #{t a5dids9skwzdhr1md4j13r-15} ()))
                         #{t a5dids9skwzdhr1md4j13r-18}))
                   (goto #{Lfail a5dids9skwzdhr1md4j13r-19}))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         (#{t a5dids9skwzdhr1md4j13r-5}
           #{t a5dids9skwzdhr1md4j13r-20}
           #{g0 a5dids9skwzdhr1md4j13r-0}
           #{swap a5dids9skwzdhr1md4j13r-1})
         #f
         0
         (begin
           (trap-check #t)
           (set! #{t a5dids9skwzdhr1md4j13r-5} '0)
           (set! #{t a5dids9skwzdhr1md4j13r-20} (alloc #<info> '16))
           (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 7)
             #{t a5dids9skwzdhr1md4j13r-5})
           (nop)
           (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 15) '30)
           (nop)
           (set! #{g0 a5dids9skwzdhr1md4j13r-0}
             #{t a5dids9skwzdhr1md4j13r-20})
           (set! #{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> '16))
           (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
             (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
           (nop)
           (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
             #{g0 a5dids9skwzdhr1md4j13r-0})
           (nop)
           (mvcall #f #<literal dynamic-wind> '14
             #{swap a5dids9skwzdhr1md4j13r-1}
             #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
             #{swap a5dids9skwzdhr1md4j13r-1} ()))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-insert-trap-check:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (case-lambda
       [clause
        ()
        (#{g1 a5dids9skwzdhr1md4j13r-4}
          #{t a5dids9skwzdhr1md4j13r-14}
          #{t a5dids9skwzdhr1md4j13r-21})
        #{cp a5dids9skwzdhr1md4j13r-7}
        0
        (begin
          (overflow-check)
          (set! (mref %tc zero 104)
            (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
          (if (inline #<info> condition-code)
              (begin
                (pariah)
                (mvcall #f #<literal #(libspec event 32814)> ()))
              (nop))
          (set! #{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568))
          (set! #{t a5dids9skwzdhr1md4j13r-21}
            (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11))
          (mvcall
            #f
            #<literal optimize-level>
            (mref #{t a5dids9skwzdhr1md4j13r-21} zero 7)
            ())
          (set! #{t a5dids9skwzdhr1md4j13r-14}
            (inline
              #<info>
              lea1
              (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)))
          (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
            #{g1 a5dids9skwzdhr1md4j13r-4})
          (nop)
          (if (inline
                #<info>
                log!test
                #{g1 a5dids9skwzdhr1md4j13r-4}
                '7)
              '62
              (begin
                (inline #<info> remember #{t a5dids9skwzdhr1md4j13r-14})
                '62)))]))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (case-lambda
        [clause
         ()
         ()
         #f
         0
         (begin
           (set! (mref %tc zero 104)
             (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
           (if (inline #<info> condition-code)
               (begin
                 (pariah)
                 (mvcall #f #<literal #(libspec event 32815)> ()))
               (nop))
           (mvcall #{dcl a5dids9skwzdhr1md4j13r-9} #f '40 ()))]))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (case-lambda
        [clause
         (#{n a5dids9skwzdhr1md4j13r-3})
         (#{t a5dids9skwzdhr1md4j13r-25} #{t a5dids9skwzdhr1md4j13r-16}
           #{t a5dids9skwzdhr1md4j13r-22}
           #{t a5dids9skwzdhr1md4j13r-15}
           #{t a5dids9skwzdhr1md4j13r-23}
           #{t a5dids9skwzdhr1md4j13r-18}
           #{t a5dids9skwzdhr1md4j13r-24})
         #f
         1
         (if (if (inline
                   #<info>
                   eq?
                   #{n a5dids9skwzdhr1md4j13r-3}
                   '0)
                 #t
                 (if (inline
                       #<info>
                       log!test
                       #{n a5dids9skwzdhr1md4j13r-3}
                       '7)
                     #f
                     (begin
                       (pariah)
                       (set! (mref %tc zero 104)
                         (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
                       (if (inline #<info> condition-code)
                           (begin
                             (pariah)
                             (mvcall
                               #f
                               #<literal #(libspec event 32815)>
                               ()))
                           (nop))
                       (set! #{t a5dids9skwzdhr1md4j13r-25}
                         (mvcall #f #<literal #(libspec = 34827)>
                           #{n a5dids9skwzdhr1md4j13r-3} '0 ()))
                       (if (inline
                             #<info>
                             eq?
                             #{t a5dids9skwzdhr1md4j13r-25}
                             '6)
                           #f
                           #t))))
             '8
             (begin
               (overflow-check)
               (set! (mref %tc zero 104)
                 (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
               (if (inline #<info> condition-code)
                   (begin
                     (pariah)
                     (mvcall #f #<literal #(libspec event 32814)> ()))
                   (nop))
               (if (inline
                     #<info>
                     log!test
                     #{n a5dids9skwzdhr1md4j13r-3}
                     '7)
                   (begin
                     (set! #{t a5dids9skwzdhr1md4j13r-16}
                       (inline
                         #<info>
                         \x2D;/ovfl
                         #{n a5dids9skwzdhr1md4j13r-3}
                         '8))
                     (if (inline #<info> condition-code)
                         (begin
                           (label #{Lfail a5dids9skwzdhr1md4j13r-17})
                           (pariah)
                           (set! #{t a5dids9skwzdhr1md4j13r-22}
                             (mvcall #f #<literal #(libspec - 34838)>
                               #{n a5dids9skwzdhr1md4j13r-3} '8 ())))
                         (set! #{t a5dids9skwzdhr1md4j13r-22}
                           #{t a5dids9skwzdhr1md4j13r-16})))
                   (goto #{Lfail a5dids9skwzdhr1md4j13r-17}))
               (set! #{t a5dids9skwzdhr1md4j13r-15}
                 (mvcall
                   #{dcl a5dids9skwzdhr1md4j13r-9}
                   #f
                   #{t a5dids9skwzdhr1md4j13r-22}
                   ()))
               (if (begin
                     (set! #{t a5dids9skwzdhr1md4j13r-24}
                       (inline
                         #<info>
                         logor
                         #{n a5dids9skwzdhr1md4j13r-3}
                         #{t a5dids9skwzdhr1md4j13r-15}))
                     (inline
                       #<info>
                       log!test
                       #{t a5dids9skwzdhr1md4j13r-24}
                       '7))
                   (begin
                     (set! #{t a5dids9skwzdhr1md4j13r-23}
                       (inline
                         #<info>
                         sra
                         #{t a5dids9skwzdhr1md4j13r-15}
                         '3))
                     (set! #{t a5dids9skwzdhr1md4j13r-18}
                       (inline
                         #<info>
                         */ovfl
                         #{n a5dids9skwzdhr1md4j13r-3}
                         #{t a5dids9skwzdhr1md4j13r-23}))
                     (if (inline #<info> condition-code)
                         (begin
                           (label #{Lfail a5dids9skwzdhr1md4j13r-19})
                           (pariah)
                           (mvcall #f #<literal #(libspec * 34840)>
                             #{n a5dids9skwzdhr1md4j13r-3}
                             #{t a5dids9skwzdhr1md4j13r-15} ()))
                         #{t a5dids9skwzdhr1md4j13r-18}))
                   (goto #{Lfail a5dids9skwzdhr1md4j13r-19}))))]))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (case-lambda
        [clause
         ()
         (#{t a5dids9skwzdhr1md4j13r-5}
           #{t a5dids9skwzdhr1md4j13r-20}
           #{g0 a5dids9skwzdhr1md4j13r-0}
           #{swap a5dids9skwzdhr1md4j13r-1})
         #f
         0
         (begin
           (set! (mref %tc zero 104)
             (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
           (if (inline #<info> condition-code)
               (begin
                 (pariah)
                 (mvcall #f #<literal #(libspec event 32815)> ()))
               (nop))
           (set! #{t a5dids9skwzdhr1md4j13r-5} '0)
           (set! #{t a5dids9skwzdhr1md4j13r-20} (alloc #<info> '16))
           (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 7)
             #{t a5dids9skwzdhr1md4j13r-5})
           (nop)
           (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 15) '30)
           (nop)
           (set! #{g0 a5dids9skwzdhr1md4j13r-0}
             #{t a5dids9skwzdhr1md4j13r-20})
           (set! #{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> '16))
           (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
             (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
           (nop)
           (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
             #{g0 a5dids9skwzdhr1md4j13r-0})
           (nop)
           (mvcall #f #<literal dynamic-wind> '14
             #{swap a5dids9skwzdhr1md4j13r-1}
             #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
             #{swap a5dids9skwzdhr1md4j13r-1} ()))])))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-flatten-case-lambda:
(labels
  ((#{swap a5dids9skwzdhr1md4j13r-10}
     (lambda (#{cp a5dids9skwzdhr1md4j13r-7}
              #{g1 a5dids9skwzdhr1md4j13r-4}
              #{t a5dids9skwzdhr1md4j13r-14}
              #{t a5dids9skwzdhr1md4j13r-21})
       (if (inline #<info> eq? %ac0 '0)
           (entry-point
             ()
             #{dcl a5dids9skwzdhr1md4j13r-26}
             #{cp a5dids9skwzdhr1md4j13r-7}
             (begin
               (overflow-check)
               (set! (mref %tc zero 104)
                 (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
               (if (inline #<info> condition-code)
                   (begin
                     (pariah)
                     (mvcall #f #<literal #(libspec event 32814)> ()))
                   (nop))
               (set! #{g1 a5dids9skwzdhr1md4j13r-4} (mref %tc zero 568))
               (set! #{t a5dids9skwzdhr1md4j13r-21}
                 (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11))
               (mvcall
                 #f
                 #<literal optimize-level>
                 (mref #{t a5dids9skwzdhr1md4j13r-21} zero 7)
                 ())
               (set! #{t a5dids9skwzdhr1md4j13r-14}
                 (inline
                   #<info>
                   lea1
                   (mref #{cp a5dids9skwzdhr1md4j13r-7} zero 11)))
               (set! (mref #{t a5dids9skwzdhr1md4j13r-14} zero 0)
                 #{g1 a5dids9skwzdhr1md4j13r-4})
               (nop)
               (if (inline
                     #<info>
                     log!test
                     #{g1 a5dids9skwzdhr1md4j13r-4}
                     '7)
                   '62
                   (begin
                     (inline
                       #<info>
                       remember
                       #{t a5dids9skwzdhr1md4j13r-14})
                     '62))))
           (begin (pariah) (goto doargerr)))))
    (#{anon a5dids9skwzdhr1md4j13r-11}
      (lambda ()
        (if (inline #<info> eq? %ac0 '0)
            (entry-point
              ()
              #{dcl a5dids9skwzdhr1md4j13r-27}
              #f
              (begin
                (set! (mref %tc zero 104)
                  (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
                (if (inline #<info> condition-code)
                    (begin
                      (pariah)
                      (mvcall #f #<literal #(libspec event 32815)> ()))
                    (nop))
                (mvcall #{dcl a5dids9skwzdhr1md4j13r-9} #f '40 ())))
            (begin (pariah) (goto doargerr)))))
    (#{fact a5dids9skwzdhr1md4j13r-12}
      (lambda (#{n a5dids9skwzdhr1md4j13r-3} #{t a5dids9skwzdhr1md4j13r-25}
               #{t a5dids9skwzdhr1md4j13r-16}
               #{t a5dids9skwzdhr1md4j13r-22}
               #{t a5dids9skwzdhr1md4j13r-15}
               #{t a5dids9skwzdhr1md4j13r-23}
               #{t a5dids9skwzdhr1md4j13r-18}
               #{t a5dids9skwzdhr1md4j13r-24})
        (entry-point
          (#{n a5dids9skwzdhr1md4j13r-3})
          #{dcl a5dids9skwzdhr1md4j13r-9}
          #f
          (if (if (inline
                    #<info>
                    eq?
                    #{n a5dids9skwzdhr1md4j13r-3}
                    '0)
                  #t
                  (if (inline
                        #<info>
                        log!test
                        #{n a5dids9skwzdhr1md4j13r-3}
                        '7)
                      #f
                      (begin
                        (pariah)
                        (set! (mref %tc zero 104)
                          (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
                        (if (inline #<info> condition-code)
                            (begin
                              (pariah)
                              (mvcall
                                #f
                                #<literal #(libspec event 32815)>
                                ()))
                            (nop))
                        (set! #{t a5dids9skwzdhr1md4j13r-25}
                          (mvcall #f #<literal #(libspec = 34827)>
                            #{n a5dids9skwzdhr1md4j13r-3} '0 ()))
                        (if (inline
                              #<info>
                              eq?
                              #{t a5dids9skwzdhr1md4j13r-25}
                              '6)
                            #f
                            #t))))
              '8
              (begin
                (overflow-check)
                (set! (mref %tc zero 104)
                  (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
                (if (inline #<info> condition-code)
                    (begin
                      (pariah)
                      (mvcall #f #<literal #(libspec event 32814)> ()))
                    (nop))
                (if (inline
                      #<info>
                      log!test
                      #{n a5dids9skwzdhr1md4j13r-3}
                      '7)
                    (begin
                      (set! #{t a5dids9skwzdhr1md4j13r-16}
                        (inline
                          #<info>
                          \x2D;/ovfl
                          #{n a5dids9skwzdhr1md4j13r-3}
                          '8))
                      (if (inline #<info> condition-code)
                          (begin
                            (label #{Lfail a5dids9skwzdhr1md4j13r-17})
                            (pariah)
                            (set! #{t a5dids9skwzdhr1md4j13r-22}
                              (mvcall #f #<literal #(libspec - 34838)>
                                #{n a5dids9skwzdhr1md4j13r-3} '8 ())))
                          (set! #{t a5dids9skwzdhr1md4j13r-22}
                            #{t a5dids9skwzdhr1md4j13r-16})))
                    (goto #{Lfail a5dids9skwzdhr1md4j13r-17}))
                (set! #{t a5dids9skwzdhr1md4j13r-15}
                  (mvcall
                    #{dcl a5dids9skwzdhr1md4j13r-9}
                    #f
                    #{t a5dids9skwzdhr1md4j13r-22}
                    ()))
                (if (begin
                      (set! #{t a5dids9skwzdhr1md4j13r-24}
                        (inline
                          #<info>
                          logor
                          #{n a5dids9skwzdhr1md4j13r-3}
                          #{t a5dids9skwzdhr1md4j13r-15}))
                      (inline
                        #<info>
                        log!test
                        #{t a5dids9skwzdhr1md4j13r-24}
                        '7))
                    (begin
                      (set! #{t a5dids9skwzdhr1md4j13r-23}
                        (inline
                          #<info>
                          sra
                          #{t a5dids9skwzdhr1md4j13r-15}
                          '3))
                      (set! #{t a5dids9skwzdhr1md4j13r-18}
                        (inline
                          #<info>
                          */ovfl
                          #{n a5dids9skwzdhr1md4j13r-3}
                          #{t a5dids9skwzdhr1md4j13r-23}))
                      (if (inline #<info> condition-code)
                          (begin
                            (label #{Lfail a5dids9skwzdhr1md4j13r-19})
                            (pariah)
                            (mvcall #f #<literal #(libspec * 34840)>
                              #{n a5dids9skwzdhr1md4j13r-3}
                              #{t a5dids9skwzdhr1md4j13r-15} ()))
                          #{t a5dids9skwzdhr1md4j13r-18}))
                    (goto #{Lfail a5dids9skwzdhr1md4j13r-19})))))))
    (#{main a5dids9skwzdhr1md4j13r-13}
      (lambda (#{t a5dids9skwzdhr1md4j13r-5} #{t a5dids9skwzdhr1md4j13r-20}
               #{g0 a5dids9skwzdhr1md4j13r-0}
               #{swap a5dids9skwzdhr1md4j13r-1})
        (entry-point
          ()
          #{dcl a5dids9skwzdhr1md4j13r-28}
          #f
          (begin
            (set! (mref %tc zero 104)
              (inline #<info> \x2D;/eq (mref %tc zero 104) '1))
            (if (inline #<info> condition-code)
                (begin
                  (pariah)
                  (mvcall #f #<literal #(libspec event 32815)> ()))
                (nop))
            (set! #{t a5dids9skwzdhr1md4j13r-5} '0)
            (set! #{t a5dids9skwzdhr1md4j13r-20} (alloc #<info> '16))
            (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 7)
              #{t a5dids9skwzdhr1md4j13r-5})
            (nop)
            (set! (mref #{t a5dids9skwzdhr1md4j13r-20} zero 15) '30)
            (nop)
            (set! #{g0 a5dids9skwzdhr1md4j13r-0}
              #{t a5dids9skwzdhr1md4j13r-20})
            (set! #{swap a5dids9skwzdhr1md4j13r-1} (alloc #<info> '16))
            (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 3)
              (label-ref #{swap a5dids9skwzdhr1md4j13r-10} 65))
            (nop)
            (set! (mref #{swap a5dids9skwzdhr1md4j13r-1} zero 11)
              #{g0 a5dids9skwzdhr1md4j13r-0})
            (nop)
            (mvcall #f #<literal dynamic-wind> '14
              #{swap a5dids9skwzdhr1md4j13r-1}
              #<literal #{anon a5dids9skwzdhr1md4j13r-11}>
              #{swap a5dids9skwzdhr1md4j13r-1} ()))))))
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-impose-calling-conventions:
(letrec ([#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#{cp a5dids9skwzdhr1md4j13r-7}
                                                     #{g1 a5dids9skwzdhr1md4j13r-4}
                                                     #{t a5dids9skwzdhr1md4j13r-14}
                                                     #{t a5dids9skwzdhr1md4j13r-21})
                                              (if (inline
                                                    #<info>
                                                    eq?
                                                    %ac0
                                                    0)
                                                  (begin
                                                    (label
                                                      #{dcl a5dids9skwzdhr1md4j13r-26})
                                                    (nop)
                                                    (overflood-check)
                                                    (set! #{cp a5dids9skwzdhr1md4j13r-7}
                                                      %cp)
                                                    (overflow-check)
                                                    (set! (mref
                                                            %tc
                                                            zero
                                                            104)
                                                      (inline
                                                        #<info>
                                                        \x2D;/eq
                                                        (mref %tc zero 104)
                                                        1))
                                                    (if (inline
                                                          #<info>
                                                          condition-code)
                                                        (begin
                                                          (pariah)
                                                          (pariah)
                                                          (new-frame
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-29})
                                                          (tail
                                                            (begin
                                                              (set! (mref
                                                                      %sfp
                                                                      zero
                                                                      0)
                                                                (label-ref
                                                                  #{rpl a5dids9skwzdhr1md4j13r-29}
                                                                  32))
                                                              (jump
                                                                #<literal #(libspec event 32814)>
                                                                (fv0))))
                                                          (label
                                                            #{rpl a5dids9skwzdhr1md4j13r-29})
                                                          (return-point
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-29}
                                                            #{mrvl a5dids9skwzdhr1md4j13r-30}
                                                            ())
                                                          (label
                                                            #{mrvl a5dids9skwzdhr1md4j13r-30})
                                                          (remove-frame
                                                            #<info>))
                                                        (nop))
                                                    (set! #{g1 a5dids9skwzdhr1md4j13r-4}
                                                      (mref %tc zero 568))
                                                    (set! #{t a5dids9skwzdhr1md4j13r-21}
                                                      (mref
                                                        #{cp a5dids9skwzdhr1md4j13r-7}
                                                        zero
                                                        11))
                                                    (set! %r8
                                                      (mref
                                                        #{t a5dids9skwzdhr1md4j13r-21}
                                                        zero
                                                        7))
                                                    (new-frame
                                                      #<info>
                                                      #{rpl a5dids9skwzdhr1md4j13r-31})
                                                    (tail
                                                      (begin
                                                        (set! %xp
                                                          #<literal optimize-level>)
                                                        (set! %cp
                                                          (mref
                                                            %xp
                                                            zero
                                                            5))
                                                        (set! (mref
                                                                %sfp
                                                                zero
                                                                0)
                                                          (label-ref
                                                            #{rpl a5dids9skwzdhr1md4j13r-31}
                                                            32))
                                                        (set! %ac0 1)
                                                        (jump
                                                          (mref
                                                            %xp
                                                            zero
                                                            13)
                                                          (%ac0
                                                            %cp
                                                            %r8
                                                            fv0))))
                                                    (label
                                                      #{rpl a5dids9skwzdhr1md4j13r-31})
                                                    (return-point
                                                      #<info>
                                                      #{rpl a5dids9skwzdhr1md4j13r-31}
                                                      #{mrvl a5dids9skwzdhr1md4j13r-32}
                                                      ())
                                                    (label
                                                      #{mrvl a5dids9skwzdhr1md4j13r-32})
                                                    (remove-frame #<info>)
                                                    (set! #{t a5dids9skwzdhr1md4j13r-14}
                                                      (inline
                                                        #<info>
                                                        lea1
                                                        (mref
                                                          #{cp a5dids9skwzdhr1md4j13r-7}
                                                          zero
                                                          11)))
                                                    (set! (mref
                                                            #{t a5dids9skwzdhr1md4j13r-14}
                                                            zero
                                                            0)
                                                      #{g1 a5dids9skwzdhr1md4j13r-4})
                                                    (nop)
                                                    (if (inline
                                                          #<info>
                                                          log!test
                                                          #{g1 a5dids9skwzdhr1md4j13r-4}
                                                          7)
                                                        (begin
                                                          (set! %ac0 62)
                                                          (jump
                                                            fv0
                                                            (%ac0)))
                                                        (begin
                                                          (inline
                                                            #<info>
                                                            remember
                                                            #{t a5dids9skwzdhr1md4j13r-14})
                                                          (set! %ac0 62)
                                                          (jump
                                                            fv0
                                                            (%ac0)))))
                                                  (begin
                                                    (pariah)
                                                    (goto doargerr))))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda ()
                                              (if (inline
                                                    #<info>
                                                    eq?
                                                    %ac0
                                                    0)
                                                  (begin
                                                    (label
                                                      #{dcl a5dids9skwzdhr1md4j13r-27})
                                                    (nop)
                                                    (overflood-check)
                                                    (set! (mref
                                                            %tc
                                                            zero
                                                            104)
                                                      (inline
                                                        #<info>
                                                        \x2D;/eq
                                                        (mref %tc zero 104)
                                                        1))
                                                    (if (inline
                                                          #<info>
                                                          condition-code)
                                                        (begin
                                                          (pariah)
                                                          (pariah)
                                                          (new-frame
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-33})
                                                          (tail
                                                            (begin
                                                              (set! (mref
                                                                      %sfp
                                                                      zero
                                                                      0)
                                                                (label-ref
                                                                  #{rpl a5dids9skwzdhr1md4j13r-33}
                                                                  32))
                                                              (jump
                                                                #<literal #(libspec event 32815)>
                                                                (fv0))))
                                                          (label
                                                            #{rpl a5dids9skwzdhr1md4j13r-33})
                                                          (return-point
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-33}
                                                            #{mrvl a5dids9skwzdhr1md4j13r-34}
                                                            ())
                                                          (label
                                                            #{mrvl a5dids9skwzdhr1md4j13r-34})
                                                          (remove-frame
                                                            #<info>))
                                                        (nop))
                                                    (set! %r8 40)
                                                    (jump
                                                      (label-ref
                                                        #{dcl a5dids9skwzdhr1md4j13r-9}
                                                        0)
                                                      (%r8 fv0)))
                                                  (begin
                                                    (pariah)
                                                    (goto doargerr))))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#{n a5dids9skwzdhr1md4j13r-3}
                                                     #{t a5dids9skwzdhr1md4j13r-25}
                                                     #{t a5dids9skwzdhr1md4j13r-16}
                                                     #{t a5dids9skwzdhr1md4j13r-22}
                                                     #{t a5dids9skwzdhr1md4j13r-15}
                                                     #{t a5dids9skwzdhr1md4j13r-23}
                                                     #{t a5dids9skwzdhr1md4j13r-18}
                                                     #{t a5dids9skwzdhr1md4j13r-24})
                                              (begin
                                                (label
                                                  #{dcl a5dids9skwzdhr1md4j13r-9})
                                                (nop)
                                                (overflood-check)
                                                (set! #{n a5dids9skwzdhr1md4j13r-3}
                                                  %r8)
                                                (if (if (inline
                                                          #<info>
                                                          eq?
                                                          #{n a5dids9skwzdhr1md4j13r-3}
                                                          0)
                                                        (true)
                                                        (if (inline
                                                              #<info>
                                                              log!test
                                                              #{n a5dids9skwzdhr1md4j13r-3}
                                                              7)
                                                            (false)
                                                            (begin
                                                              (pariah)
                                                              (set! (mref
                                                                      %tc
                                                                      zero
                                                                      104)
                                                                (inline
                                                                  #<info>
                                                                  \x2D;/eq
                                                                  (mref
                                                                    %tc
                                                                    zero
                                                                    104)
                                                                  1))
                                                              (if (inline
                                                                    #<info>
                                                                    condition-code)
                                                                  (begin
                                                                    (pariah)
                                                                    (pariah)
                                                                    (new-frame
                                                                      #<info>
                                                                      #{rpl a5dids9skwzdhr1md4j13r-35})
                                                                    (tail
                                                                      (begin
                                                                        (set! (mref
                                                                                %sfp
                                                                                zero
                                                                                0)
                                                                          (label-ref
                                                                            #{rpl a5dids9skwzdhr1md4j13r-35}
                                                                            32))
                                                                        (jump
                                                                          #<literal #(libspec event 32815)>
                                                                          (fv0))))
                                                                    (label
                                                                      #{rpl a5dids9skwzdhr1md4j13r-35})
                                                                    (return-point
                                                                      #<info>
                                                                      #{rpl a5dids9skwzdhr1md4j13r-35}
                                                                      #{mrvl a5dids9skwzdhr1md4j13r-36}
                                                                      ())
                                                                    (label
                                                                      #{mrvl a5dids9skwzdhr1md4j13r-36})
                                                                    (remove-frame
                                                                      #<info>))
                                                                  (nop))
                                                              (pariah)
                                                              (set! %r8
                                                                #{n a5dids9skwzdhr1md4j13r-3})
                                                              (set! %rdi 0)
                                                              (new-frame
                                                                #<info>
                                                                #{rpl a5dids9skwzdhr1md4j13r-37})
                                                              (tail
                                                                (begin
                                                                  (set! (mref
                                                                          %sfp
                                                                          zero
                                                                          0)
                                                                    (label-ref
                                                                      #{rpl a5dids9skwzdhr1md4j13r-37}
                                                                      32))
                                                                  (jump
                                                                    #<literal #(libspec = 34827)>
                                                                    (%r8 %rdi
                                                                         fv0))))
                                                              (label
                                                                #{rpl a5dids9skwzdhr1md4j13r-37})
                                                              (return-point
                                                                #<info>
                                                                #{rpl a5dids9skwzdhr1md4j13r-37}
                                                                #f
                                                                ())
                                                              (set! #{t a5dids9skwzdhr1md4j13r-25}
                                                                %ac0)
                                                              (remove-frame
                                                                #<info>)
                                                              (if (inline
                                                                    #<info>
                                                                    eq?
                                                                    #{t a5dids9skwzdhr1md4j13r-25}
                                                                    6)
                                                                  (false)
                                                                  (true)))))
                                                    (begin
                                                      (set! %ac0 8)
                                                      (jump fv0 (%ac0)))
                                                    (begin
                                                      (overflow-check)
                                                      (set! (mref
                                                              %tc
                                                              zero
                                                              104)
                                                        (inline
                                                          #<info>
                                                          \x2D;/eq
                                                          (mref
                                                            %tc
                                                            zero
                                                            104)
                                                          1))
                                                      (if (inline
                                                            #<info>
                                                            condition-code)
                                                          (begin
                                                            (pariah)
                                                            (pariah)
                                                            (new-frame
                                                              #<info>
                                                              #{rpl a5dids9skwzdhr1md4j13r-38})
                                                            (tail
                                                              (begin
                                                                (set! (mref
                                                                        %sfp
                                                                        zero
                                                                        0)
                                                                  (label-ref
                                                                    #{rpl a5dids9skwzdhr1md4j13r-38}
                                                                    32))
                                                                (jump
                                                                  #<literal #(libspec event 32814)>
                                                                  (fv0))))
                                                            (label
                                                              #{rpl a5dids9skwzdhr1md4j13r-38})
                                                            (return-point
                                                              #<info>
                                                              #{rpl a5dids9skwzdhr1md4j13r-38}
                                                              #{mrvl a5dids9skwzdhr1md4j13r-39}
                                                              ())
                                                            (label
                                                              #{mrvl a5dids9skwzdhr1md4j13r-39})
                                                            (remove-frame
                                                              #<info>))
                                                          (nop))
                                                      (if (inline
                                                            #<info>
                                                            log!test
                                                            #{n a5dids9skwzdhr1md4j13r-3}
                                                            7)
                                                          (begin
                                                            (set! #{t a5dids9skwzdhr1md4j13r-16}
                                                              (inline
                                                                #<info>
                                                                \x2D;/ovfl
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                8))
                                                            (if (inline
                                                                  #<info>
                                                                  condition-code)
                                                                (begin
                                                                  (label
                                                                    #{Lfail a5dids9skwzdhr1md4j13r-17})
                                                                  (pariah)
                                                                  (pariah)
                                                                  (set! %r8
                                                                    #{n a5dids9skwzdhr1md4j13r-3})
                                                                  (set! %rdi
                                                                    8)
                                                                  (new-frame
                                                                    #<info>
                                                                    #{rpl a5dids9skwzdhr1md4j13r-40})
                                                                  (tail
                                                                    (begin
                                                                      (set! (mref
                                                                              %sfp
                                                                              zero
                                                                              0)
                                                                        (label-ref
                                                                          #{rpl a5dids9skwzdhr1md4j13r-40}
                                                                          32))
                                                                      (jump
                                                                        #<literal #(libspec - 34838)>
                                                                        (%r8 %rdi
                                                                             fv0))))
                                                                  (label
                                                                    #{rpl a5dids9skwzdhr1md4j13r-40})
                                                                  (return-point
                                                                    #<info>
                                                                    #{rpl a5dids9skwzdhr1md4j13r-40}
                                                                    #f
                                                                    ())
                                                                  (set! #{t a5dids9skwzdhr1md4j13r-22}
                                                                    %ac0)
                                                                  (remove-frame
                                                                    #<info>))
                                                                (set! #{t a5dids9skwzdhr1md4j13r-22}
                                                                  #{t a5dids9skwzdhr1md4j13r-16})))
                                                          (goto
                                                            #{Lfail a5dids9skwzdhr1md4j13r-17}))
                                                      (set! %r8
                                                        #{t a5dids9skwzdhr1md4j13r-22})
                                                      (new-frame
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-41})
                                                      (tail
                                                        (begin
                                                          (set! (mref
                                                                  %sfp
                                                                  zero
                                                                  0)
                                                            (label-ref
                                                              #{rpl a5dids9skwzdhr1md4j13r-41}
                                                              32))
                                                          (joto
                                                            #{dcl a5dids9skwzdhr1md4j13r-9}
                                                            ())))
                                                      (label
                                                        #{rpl a5dids9skwzdhr1md4j13r-41})
                                                      (return-point
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-41}
                                                        #f
                                                        ())
                                                      (set! #{t a5dids9skwzdhr1md4j13r-15}
                                                        %ac0)
                                                      (remove-frame
                                                        #<info>)
                                                      (if (begin
                                                            (set! #{t a5dids9skwzdhr1md4j13r-24}
                                                              (inline
                                                                #<info>
                                                                logor
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                #{t a5dids9skwzdhr1md4j13r-15}))
                                                            (inline
                                                              #<info>
                                                              log!test
                                                              #{t a5dids9skwzdhr1md4j13r-24}
                                                              7))
                                                          (begin
                                                            (set! #{t a5dids9skwzdhr1md4j13r-23}
                                                              (inline
                                                                #<info>
                                                                sra
                                                                #{t a5dids9skwzdhr1md4j13r-15}
                                                                3))
                                                            (set! #{t a5dids9skwzdhr1md4j13r-18}
                                                              (inline
                                                                #<info>
                                                                */ovfl
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                #{t a5dids9skwzdhr1md4j13r-23}))
                                                            (if (inline
                                                                  #<info>
                                                                  condition-code)
                                                                (begin
                                                                  (label
                                                                    #{Lfail a5dids9skwzdhr1md4j13r-19})
                                                                  (pariah)
                                                                  (set! %r8
                                                                    #{n a5dids9skwzdhr1md4j13r-3})
                                                                  (set! %rdi
                                                                    #{t a5dids9skwzdhr1md4j13r-15})
                                                                  (jump
                                                                    #<literal #(libspec * 34840)>
                                                                    (%r8 %rdi
                                                                         fv0)))
                                                                (begin
                                                                  (set! %ac0
                                                                    #{t a5dids9skwzdhr1md4j13r-18})
                                                                  (jump
                                                                    fv0
                                                                    (%ac0)))))
                                                          (goto
                                                            #{Lfail a5dids9skwzdhr1md4j13r-19}))))))]
         [#{main a5dids9skwzdhr1md4j13r-13} (lambda (#{t a5dids9skwzdhr1md4j13r-5}
                                                     #{t a5dids9skwzdhr1md4j13r-20}
                                                     #{g0 a5dids9skwzdhr1md4j13r-0}
                                                     #{swap a5dids9skwzdhr1md4j13r-1})
                                              (begin
                                                (label
                                                  #{dcl a5dids9skwzdhr1md4j13r-28})
                                                (nop)
                                                (overflood-check)
                                                (set! (mref %tc zero 104)
                                                  (inline
                                                    #<info>
                                                    \x2D;/eq
                                                    (mref %tc zero 104)
                                                    1))
                                                (if (inline
                                                      #<info>
                                                      condition-code)
                                                    (begin
                                                      (pariah)
                                                      (pariah)
                                                      (new-frame
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-42})
                                                      (tail
                                                        (begin
                                                          (set! (mref
                                                                  %sfp
                                                                  zero
                                                                  0)
                                                            (label-ref
                                                              #{rpl a5dids9skwzdhr1md4j13r-42}
                                                              32))
                                                          (jump
                                                            #<literal #(libspec event 32815)>
                                                            (fv0))))
                                                      (label
                                                        #{rpl a5dids9skwzdhr1md4j13r-42})
                                                      (return-point
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-42}
                                                        #{mrvl a5dids9skwzdhr1md4j13r-43}
                                                        ())
                                                      (label
                                                        #{mrvl a5dids9skwzdhr1md4j13r-43})
                                                      (remove-frame
                                                        #<info>))
                                                    (nop))
                                                (set! #{t a5dids9skwzdhr1md4j13r-5}
                                                  0)
                                                (set! #{t a5dids9skwzdhr1md4j13r-20}
                                                  (alloc #<info> 16))
                                                (set! (mref
                                                        #{t a5dids9skwzdhr1md4j13r-20}
                                                        zero
                                                        7)
                                                  #{t a5dids9skwzdhr1md4j13r-5})
                                                (nop)
                                                (set! (mref
                                                        #{t a5dids9skwzdhr1md4j13r-20}
                                                        zero
                                                        15)
                                                  30)
                                                (nop)
                                                (set! #{g0 a5dids9skwzdhr1md4j13r-0}
                                                  #{t a5dids9skwzdhr1md4j13r-20})
                                                (set! #{swap a5dids9skwzdhr1md4j13r-1}
                                                  (alloc #<info> 16))
                                                (set! (mref
                                                        #{swap a5dids9skwzdhr1md4j13r-1}
                                                        zero
                                                        3)
                                                  (label-ref
                                                    #{swap a5dids9skwzdhr1md4j13r-10}
                                                    65))
                                                (nop)
                                                (set! (mref
                                                        #{swap a5dids9skwzdhr1md4j13r-1}
                                                        zero
                                                        11)
                                                  #{g0 a5dids9skwzdhr1md4j13r-0})
                                                (nop)
                                                (set! fv1
                                                  #{swap a5dids9skwzdhr1md4j13r-1})
                                                (set! %r8 14)
                                                (set! %rdi
                                                  #{swap a5dids9skwzdhr1md4j13r-1})
                                                (set! %rsi
                                                  #<literal #{anon a5dids9skwzdhr1md4j13r-11}>)
                                                (set! %xp
                                                  #<literal dynamic-wind>)
                                                (set! %cp
                                                  (mref %xp zero 5))
                                                (set! %ac0 4)
                                                (jump
                                                  (mref %xp zero 13)
                                                  (%ac0 %cp %r8 %rdi %rsi
                                                    fv0 fv1))))])
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-expand-hand-coded:
(letrec ([#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#{cp a5dids9skwzdhr1md4j13r-7}
                                                     #{g1 a5dids9skwzdhr1md4j13r-4}
                                                     #{t a5dids9skwzdhr1md4j13r-14}
                                                     #{t a5dids9skwzdhr1md4j13r-21})
                                              (if (inline
                                                    #<info>
                                                    eq?
                                                    %ac0
                                                    0)
                                                  (begin
                                                    (label
                                                      #{dcl a5dids9skwzdhr1md4j13r-26})
                                                    (nop)
                                                    (overflood-check)
                                                    (set! #{cp a5dids9skwzdhr1md4j13r-7}
                                                      %cp)
                                                    (overflow-check)
                                                    (set! (mref
                                                            %tc
                                                            zero
                                                            104)
                                                      (inline
                                                        #<info>
                                                        \x2D;/eq
                                                        (mref %tc zero 104)
                                                        1))
                                                    (if (inline
                                                          #<info>
                                                          condition-code)
                                                        (begin
                                                          (pariah)
                                                          (pariah)
                                                          (new-frame
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-29})
                                                          (tail
                                                            (begin
                                                              (set! (mref
                                                                      %sfp
                                                                      zero
                                                                      0)
                                                                (label-ref
                                                                  #{rpl a5dids9skwzdhr1md4j13r-29}
                                                                  32))
                                                              (jump
                                                                #<literal #(libspec event 32814)>
                                                                (fv0))))
                                                          (label
                                                            #{rpl a5dids9skwzdhr1md4j13r-29})
                                                          (return-point
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-29}
                                                            #{mrvl a5dids9skwzdhr1md4j13r-30}
                                                            ())
                                                          (label
                                                            #{mrvl a5dids9skwzdhr1md4j13r-30})
                                                          (remove-frame
                                                            #<info>))
                                                        (nop))
                                                    (set! #{g1 a5dids9skwzdhr1md4j13r-4}
                                                      (mref %tc zero 568))
                                                    (set! #{t a5dids9skwzdhr1md4j13r-21}
                                                      (mref
                                                        #{cp a5dids9skwzdhr1md4j13r-7}
                                                        zero
                                                        11))
                                                    (set! %r8
                                                      (mref
                                                        #{t a5dids9skwzdhr1md4j13r-21}
                                                        zero
                                                        7))
                                                    (new-frame
                                                      #<info>
                                                      #{rpl a5dids9skwzdhr1md4j13r-31})
                                                    (tail
                                                      (begin
                                                        (set! %xp
                                                          #<literal optimize-level>)
                                                        (set! %cp
                                                          (mref
                                                            %xp
                                                            zero
                                                            5))
                                                        (set! (mref
                                                                %sfp
                                                                zero
                                                                0)
                                                          (label-ref
                                                            #{rpl a5dids9skwzdhr1md4j13r-31}
                                                            32))
                                                        (set! %ac0 1)
                                                        (jump
                                                          (mref
                                                            %xp
                                                            zero
                                                            13)
                                                          (%ac0
                                                            %cp
                                                            %r8
                                                            fv0))))
                                                    (label
                                                      #{rpl a5dids9skwzdhr1md4j13r-31})
                                                    (return-point
                                                      #<info>
                                                      #{rpl a5dids9skwzdhr1md4j13r-31}
                                                      #{mrvl a5dids9skwzdhr1md4j13r-32}
                                                      ())
                                                    (label
                                                      #{mrvl a5dids9skwzdhr1md4j13r-32})
                                                    (remove-frame #<info>)
                                                    (set! #{t a5dids9skwzdhr1md4j13r-14}
                                                      (inline
                                                        #<info>
                                                        lea1
                                                        (mref
                                                          #{cp a5dids9skwzdhr1md4j13r-7}
                                                          zero
                                                          11)))
                                                    (set! (mref
                                                            #{t a5dids9skwzdhr1md4j13r-14}
                                                            zero
                                                            0)
                                                      #{g1 a5dids9skwzdhr1md4j13r-4})
                                                    (nop)
                                                    (if (inline
                                                          #<info>
                                                          log!test
                                                          #{g1 a5dids9skwzdhr1md4j13r-4}
                                                          7)
                                                        (begin
                                                          (set! %ac0 62)
                                                          (jump
                                                            fv0
                                                            (%ac0)))
                                                        (begin
                                                          (inline
                                                            #<info>
                                                            remember
                                                            #{t a5dids9skwzdhr1md4j13r-14})
                                                          (set! %ac0 62)
                                                          (jump
                                                            fv0
                                                            (%ac0)))))
                                                  (begin
                                                    (pariah)
                                                    (goto doargerr))))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda ()
                                              (if (inline
                                                    #<info>
                                                    eq?
                                                    %ac0
                                                    0)
                                                  (begin
                                                    (label
                                                      #{dcl a5dids9skwzdhr1md4j13r-27})
                                                    (nop)
                                                    (overflood-check)
                                                    (set! (mref
                                                            %tc
                                                            zero
                                                            104)
                                                      (inline
                                                        #<info>
                                                        \x2D;/eq
                                                        (mref %tc zero 104)
                                                        1))
                                                    (if (inline
                                                          #<info>
                                                          condition-code)
                                                        (begin
                                                          (pariah)
                                                          (pariah)
                                                          (new-frame
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-33})
                                                          (tail
                                                            (begin
                                                              (set! (mref
                                                                      %sfp
                                                                      zero
                                                                      0)
                                                                (label-ref
                                                                  #{rpl a5dids9skwzdhr1md4j13r-33}
                                                                  32))
                                                              (jump
                                                                #<literal #(libspec event 32815)>
                                                                (fv0))))
                                                          (label
                                                            #{rpl a5dids9skwzdhr1md4j13r-33})
                                                          (return-point
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-33}
                                                            #{mrvl a5dids9skwzdhr1md4j13r-34}
                                                            ())
                                                          (label
                                                            #{mrvl a5dids9skwzdhr1md4j13r-34})
                                                          (remove-frame
                                                            #<info>))
                                                        (nop))
                                                    (set! %r8 40)
                                                    (jump
                                                      (label-ref
                                                        #{dcl a5dids9skwzdhr1md4j13r-9}
                                                        0)
                                                      (%r8 fv0)))
                                                  (begin
                                                    (pariah)
                                                    (goto doargerr))))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#{n a5dids9skwzdhr1md4j13r-3}
                                                     #{t a5dids9skwzdhr1md4j13r-25}
                                                     #{t a5dids9skwzdhr1md4j13r-16}
                                                     #{t a5dids9skwzdhr1md4j13r-22}
                                                     #{t a5dids9skwzdhr1md4j13r-15}
                                                     #{t a5dids9skwzdhr1md4j13r-23}
                                                     #{t a5dids9skwzdhr1md4j13r-18}
                                                     #{t a5dids9skwzdhr1md4j13r-24})
                                              (begin
                                                (label
                                                  #{dcl a5dids9skwzdhr1md4j13r-9})
                                                (nop)
                                                (overflood-check)
                                                (set! #{n a5dids9skwzdhr1md4j13r-3}
                                                  %r8)
                                                (if (if (inline
                                                          #<info>
                                                          eq?
                                                          #{n a5dids9skwzdhr1md4j13r-3}
                                                          0)
                                                        (true)
                                                        (if (inline
                                                              #<info>
                                                              log!test
                                                              #{n a5dids9skwzdhr1md4j13r-3}
                                                              7)
                                                            (false)
                                                            (begin
                                                              (pariah)
                                                              (set! (mref
                                                                      %tc
                                                                      zero
                                                                      104)
                                                                (inline
                                                                  #<info>
                                                                  \x2D;/eq
                                                                  (mref
                                                                    %tc
                                                                    zero
                                                                    104)
                                                                  1))
                                                              (if (inline
                                                                    #<info>
                                                                    condition-code)
                                                                  (begin
                                                                    (pariah)
                                                                    (pariah)
                                                                    (new-frame
                                                                      #<info>
                                                                      #{rpl a5dids9skwzdhr1md4j13r-35})
                                                                    (tail
                                                                      (begin
                                                                        (set! (mref
                                                                                %sfp
                                                                                zero
                                                                                0)
                                                                          (label-ref
                                                                            #{rpl a5dids9skwzdhr1md4j13r-35}
                                                                            32))
                                                                        (jump
                                                                          #<literal #(libspec event 32815)>
                                                                          (fv0))))
                                                                    (label
                                                                      #{rpl a5dids9skwzdhr1md4j13r-35})
                                                                    (return-point
                                                                      #<info>
                                                                      #{rpl a5dids9skwzdhr1md4j13r-35}
                                                                      #{mrvl a5dids9skwzdhr1md4j13r-36}
                                                                      ())
                                                                    (label
                                                                      #{mrvl a5dids9skwzdhr1md4j13r-36})
                                                                    (remove-frame
                                                                      #<info>))
                                                                  (nop))
                                                              (pariah)
                                                              (set! %r8
                                                                #{n a5dids9skwzdhr1md4j13r-3})
                                                              (set! %rdi 0)
                                                              (new-frame
                                                                #<info>
                                                                #{rpl a5dids9skwzdhr1md4j13r-37})
                                                              (tail
                                                                (begin
                                                                  (set! (mref
                                                                          %sfp
                                                                          zero
                                                                          0)
                                                                    (label-ref
                                                                      #{rpl a5dids9skwzdhr1md4j13r-37}
                                                                      32))
                                                                  (jump
                                                                    #<literal #(libspec = 34827)>
                                                                    (%r8 %rdi
                                                                         fv0))))
                                                              (label
                                                                #{rpl a5dids9skwzdhr1md4j13r-37})
                                                              (return-point
                                                                #<info>
                                                                #{rpl a5dids9skwzdhr1md4j13r-37}
                                                                #f
                                                                ())
                                                              (set! #{t a5dids9skwzdhr1md4j13r-25}
                                                                %ac0)
                                                              (remove-frame
                                                                #<info>)
                                                              (if (inline
                                                                    #<info>
                                                                    eq?
                                                                    #{t a5dids9skwzdhr1md4j13r-25}
                                                                    6)
                                                                  (false)
                                                                  (true)))))
                                                    (begin
                                                      (set! %ac0 8)
                                                      (jump fv0 (%ac0)))
                                                    (begin
                                                      (overflow-check)
                                                      (set! (mref
                                                              %tc
                                                              zero
                                                              104)
                                                        (inline
                                                          #<info>
                                                          \x2D;/eq
                                                          (mref
                                                            %tc
                                                            zero
                                                            104)
                                                          1))
                                                      (if (inline
                                                            #<info>
                                                            condition-code)
                                                          (begin
                                                            (pariah)
                                                            (pariah)
                                                            (new-frame
                                                              #<info>
                                                              #{rpl a5dids9skwzdhr1md4j13r-38})
                                                            (tail
                                                              (begin
                                                                (set! (mref
                                                                        %sfp
                                                                        zero
                                                                        0)
                                                                  (label-ref
                                                                    #{rpl a5dids9skwzdhr1md4j13r-38}
                                                                    32))
                                                                (jump
                                                                  #<literal #(libspec event 32814)>
                                                                  (fv0))))
                                                            (label
                                                              #{rpl a5dids9skwzdhr1md4j13r-38})
                                                            (return-point
                                                              #<info>
                                                              #{rpl a5dids9skwzdhr1md4j13r-38}
                                                              #{mrvl a5dids9skwzdhr1md4j13r-39}
                                                              ())
                                                            (label
                                                              #{mrvl a5dids9skwzdhr1md4j13r-39})
                                                            (remove-frame
                                                              #<info>))
                                                          (nop))
                                                      (if (inline
                                                            #<info>
                                                            log!test
                                                            #{n a5dids9skwzdhr1md4j13r-3}
                                                            7)
                                                          (begin
                                                            (set! #{t a5dids9skwzdhr1md4j13r-16}
                                                              (inline
                                                                #<info>
                                                                \x2D;/ovfl
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                8))
                                                            (if (inline
                                                                  #<info>
                                                                  condition-code)
                                                                (begin
                                                                  (label
                                                                    #{Lfail a5dids9skwzdhr1md4j13r-17})
                                                                  (pariah)
                                                                  (pariah)
                                                                  (set! %r8
                                                                    #{n a5dids9skwzdhr1md4j13r-3})
                                                                  (set! %rdi
                                                                    8)
                                                                  (new-frame
                                                                    #<info>
                                                                    #{rpl a5dids9skwzdhr1md4j13r-40})
                                                                  (tail
                                                                    (begin
                                                                      (set! (mref
                                                                              %sfp
                                                                              zero
                                                                              0)
                                                                        (label-ref
                                                                          #{rpl a5dids9skwzdhr1md4j13r-40}
                                                                          32))
                                                                      (jump
                                                                        #<literal #(libspec - 34838)>
                                                                        (%r8 %rdi
                                                                             fv0))))
                                                                  (label
                                                                    #{rpl a5dids9skwzdhr1md4j13r-40})
                                                                  (return-point
                                                                    #<info>
                                                                    #{rpl a5dids9skwzdhr1md4j13r-40}
                                                                    #f
                                                                    ())
                                                                  (set! #{t a5dids9skwzdhr1md4j13r-22}
                                                                    %ac0)
                                                                  (remove-frame
                                                                    #<info>))
                                                                (set! #{t a5dids9skwzdhr1md4j13r-22}
                                                                  #{t a5dids9skwzdhr1md4j13r-16})))
                                                          (goto
                                                            #{Lfail a5dids9skwzdhr1md4j13r-17}))
                                                      (set! %r8
                                                        #{t a5dids9skwzdhr1md4j13r-22})
                                                      (new-frame
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-41})
                                                      (tail
                                                        (begin
                                                          (set! (mref
                                                                  %sfp
                                                                  zero
                                                                  0)
                                                            (label-ref
                                                              #{rpl a5dids9skwzdhr1md4j13r-41}
                                                              32))
                                                          (joto
                                                            #{dcl a5dids9skwzdhr1md4j13r-9}
                                                            ())))
                                                      (label
                                                        #{rpl a5dids9skwzdhr1md4j13r-41})
                                                      (return-point
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-41}
                                                        #f
                                                        ())
                                                      (set! #{t a5dids9skwzdhr1md4j13r-15}
                                                        %ac0)
                                                      (remove-frame
                                                        #<info>)
                                                      (if (begin
                                                            (set! #{t a5dids9skwzdhr1md4j13r-24}
                                                              (inline
                                                                #<info>
                                                                logor
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                #{t a5dids9skwzdhr1md4j13r-15}))
                                                            (inline
                                                              #<info>
                                                              log!test
                                                              #{t a5dids9skwzdhr1md4j13r-24}
                                                              7))
                                                          (begin
                                                            (set! #{t a5dids9skwzdhr1md4j13r-23}
                                                              (inline
                                                                #<info>
                                                                sra
                                                                #{t a5dids9skwzdhr1md4j13r-15}
                                                                3))
                                                            (set! #{t a5dids9skwzdhr1md4j13r-18}
                                                              (inline
                                                                #<info>
                                                                */ovfl
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                #{t a5dids9skwzdhr1md4j13r-23}))
                                                            (if (inline
                                                                  #<info>
                                                                  condition-code)
                                                                (begin
                                                                  (label
                                                                    #{Lfail a5dids9skwzdhr1md4j13r-19})
                                                                  (pariah)
                                                                  (set! %r8
                                                                    #{n a5dids9skwzdhr1md4j13r-3})
                                                                  (set! %rdi
                                                                    #{t a5dids9skwzdhr1md4j13r-15})
                                                                  (jump
                                                                    #<literal #(libspec * 34840)>
                                                                    (%r8 %rdi
                                                                         fv0)))
                                                                (begin
                                                                  (set! %ac0
                                                                    #{t a5dids9skwzdhr1md4j13r-18})
                                                                  (jump
                                                                    fv0
                                                                    (%ac0)))))
                                                          (goto
                                                            #{Lfail a5dids9skwzdhr1md4j13r-19}))))))]
         [#{main a5dids9skwzdhr1md4j13r-13} (lambda (#{t a5dids9skwzdhr1md4j13r-5}
                                                     #{t a5dids9skwzdhr1md4j13r-20}
                                                     #{g0 a5dids9skwzdhr1md4j13r-0}
                                                     #{swap a5dids9skwzdhr1md4j13r-1})
                                              (begin
                                                (label
                                                  #{dcl a5dids9skwzdhr1md4j13r-28})
                                                (nop)
                                                (overflood-check)
                                                (set! (mref %tc zero 104)
                                                  (inline
                                                    #<info>
                                                    \x2D;/eq
                                                    (mref %tc zero 104)
                                                    1))
                                                (if (inline
                                                      #<info>
                                                      condition-code)
                                                    (begin
                                                      (pariah)
                                                      (pariah)
                                                      (new-frame
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-42})
                                                      (tail
                                                        (begin
                                                          (set! (mref
                                                                  %sfp
                                                                  zero
                                                                  0)
                                                            (label-ref
                                                              #{rpl a5dids9skwzdhr1md4j13r-42}
                                                              32))
                                                          (jump
                                                            #<literal #(libspec event 32815)>
                                                            (fv0))))
                                                      (label
                                                        #{rpl a5dids9skwzdhr1md4j13r-42})
                                                      (return-point
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-42}
                                                        #{mrvl a5dids9skwzdhr1md4j13r-43}
                                                        ())
                                                      (label
                                                        #{mrvl a5dids9skwzdhr1md4j13r-43})
                                                      (remove-frame
                                                        #<info>))
                                                    (nop))
                                                (set! #{t a5dids9skwzdhr1md4j13r-5}
                                                  0)
                                                (set! #{t a5dids9skwzdhr1md4j13r-20}
                                                  (alloc #<info> 16))
                                                (set! (mref
                                                        #{t a5dids9skwzdhr1md4j13r-20}
                                                        zero
                                                        7)
                                                  #{t a5dids9skwzdhr1md4j13r-5})
                                                (nop)
                                                (set! (mref
                                                        #{t a5dids9skwzdhr1md4j13r-20}
                                                        zero
                                                        15)
                                                  30)
                                                (nop)
                                                (set! #{g0 a5dids9skwzdhr1md4j13r-0}
                                                  #{t a5dids9skwzdhr1md4j13r-20})
                                                (set! #{swap a5dids9skwzdhr1md4j13r-1}
                                                  (alloc #<info> 16))
                                                (set! (mref
                                                        #{swap a5dids9skwzdhr1md4j13r-1}
                                                        zero
                                                        3)
                                                  (label-ref
                                                    #{swap a5dids9skwzdhr1md4j13r-10}
                                                    65))
                                                (nop)
                                                (set! (mref
                                                        #{swap a5dids9skwzdhr1md4j13r-1}
                                                        zero
                                                        11)
                                                  #{g0 a5dids9skwzdhr1md4j13r-0})
                                                (nop)
                                                (set! fv1
                                                  #{swap a5dids9skwzdhr1md4j13r-1})
                                                (set! %r8 14)
                                                (set! %rdi
                                                  #{swap a5dids9skwzdhr1md4j13r-1})
                                                (set! %rsi
                                                  #<literal #{anon a5dids9skwzdhr1md4j13r-11}>)
                                                (set! %xp
                                                  #<literal dynamic-wind>)
                                                (set! %cp
                                                  (mref %xp zero 5))
                                                (set! %ac0 4)
                                                (jump
                                                  (mref %xp zero 13)
                                                  (%ac0 %cp %r8 %rdi %rsi
                                                    fv0 fv1))))])
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-expose-allocation-pointer:
(letrec ([#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#{cp a5dids9skwzdhr1md4j13r-7}
                                                     #{g1 a5dids9skwzdhr1md4j13r-4}
                                                     #{t a5dids9skwzdhr1md4j13r-14}
                                                     #{t a5dids9skwzdhr1md4j13r-21})
                                              (if (inline
                                                    #<info>
                                                    eq?
                                                    %ac0
                                                    0)
                                                  (begin
                                                    (label
                                                      #{dcl a5dids9skwzdhr1md4j13r-26})
                                                    (nop)
                                                    (overflood-check)
                                                    (set! #{cp a5dids9skwzdhr1md4j13r-7}
                                                      %cp)
                                                    (overflow-check)
                                                    (set! (mref
                                                            %tc
                                                            zero
                                                            104)
                                                      (inline
                                                        #<info>
                                                        \x2D;/eq
                                                        (mref %tc zero 104)
                                                        1))
                                                    (if (inline
                                                          #<info>
                                                          condition-code)
                                                        (begin
                                                          (pariah)
                                                          (pariah)
                                                          (new-frame
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-29})
                                                          (tail
                                                            (begin
                                                              (set! (mref
                                                                      %sfp
                                                                      zero
                                                                      0)
                                                                (label-ref
                                                                  #{rpl a5dids9skwzdhr1md4j13r-29}
                                                                  32))
                                                              (jump
                                                                #<literal #(libspec event 32814)>
                                                                (fv0))))
                                                          (label
                                                            #{rpl a5dids9skwzdhr1md4j13r-29})
                                                          (return-point
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-29}
                                                            #{mrvl a5dids9skwzdhr1md4j13r-30}
                                                            ())
                                                          (label
                                                            #{mrvl a5dids9skwzdhr1md4j13r-30})
                                                          (remove-frame
                                                            #<info>))
                                                        (nop))
                                                    (set! #{g1 a5dids9skwzdhr1md4j13r-4}
                                                      (mref %tc zero 568))
                                                    (set! #{t a5dids9skwzdhr1md4j13r-21}
                                                      (mref
                                                        #{cp a5dids9skwzdhr1md4j13r-7}
                                                        zero
                                                        11))
                                                    (set! %r8
                                                      (mref
                                                        #{t a5dids9skwzdhr1md4j13r-21}
                                                        zero
                                                        7))
                                                    (new-frame
                                                      #<info>
                                                      #{rpl a5dids9skwzdhr1md4j13r-31})
                                                    (tail
                                                      (begin
                                                        (set! %xp
                                                          #<literal optimize-level>)
                                                        (set! %cp
                                                          (mref
                                                            %xp
                                                            zero
                                                            5))
                                                        (set! (mref
                                                                %sfp
                                                                zero
                                                                0)
                                                          (label-ref
                                                            #{rpl a5dids9skwzdhr1md4j13r-31}
                                                            32))
                                                        (set! %ac0 1)
                                                        (jump
                                                          (mref
                                                            %xp
                                                            zero
                                                            13)
                                                          (%ac0
                                                            %cp
                                                            %r8
                                                            fv0))))
                                                    (label
                                                      #{rpl a5dids9skwzdhr1md4j13r-31})
                                                    (return-point
                                                      #<info>
                                                      #{rpl a5dids9skwzdhr1md4j13r-31}
                                                      #{mrvl a5dids9skwzdhr1md4j13r-32}
                                                      ())
                                                    (label
                                                      #{mrvl a5dids9skwzdhr1md4j13r-32})
                                                    (remove-frame #<info>)
                                                    (set! #{t a5dids9skwzdhr1md4j13r-14}
                                                      (inline
                                                        #<info>
                                                        lea1
                                                        (mref
                                                          #{cp a5dids9skwzdhr1md4j13r-7}
                                                          zero
                                                          11)))
                                                    (set! (mref
                                                            #{t a5dids9skwzdhr1md4j13r-14}
                                                            zero
                                                            0)
                                                      #{g1 a5dids9skwzdhr1md4j13r-4})
                                                    (nop)
                                                    (if (inline
                                                          #<info>
                                                          log!test
                                                          #{g1 a5dids9skwzdhr1md4j13r-4}
                                                          7)
                                                        (begin
                                                          (set! %ac0 62)
                                                          (jump
                                                            fv0
                                                            (%ac0)))
                                                        (begin
                                                          (set! %td
                                                            (mref
                                                              %tc
                                                              zero
                                                              88))
                                                          (if (inline
                                                                #<info>
                                                                u<
                                                                %ap
                                                                %td)
                                                              (nop)
                                                              (begin
                                                                (pariah)
                                                                (inline
                                                                  #<info>
                                                                  asmlibcall!)
                                                                (set! %td
                                                                  (mref
                                                                    %tc
                                                                    zero
                                                                    88))))
                                                          (set! %td
                                                            (inline
                                                              #<info>
                                                              -
                                                              %td
                                                              8))
                                                          (set! (mref
                                                                  %tc
                                                                  zero
                                                                  88)
                                                            %td)
                                                          (set! (mref
                                                                  %td
                                                                  zero
                                                                  0)
                                                            #{t a5dids9skwzdhr1md4j13r-14})
                                                          (set! %ac0 62)
                                                          (jump
                                                            fv0
                                                            (%ac0)))))
                                                  (begin
                                                    (pariah)
                                                    (goto doargerr))))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda ()
                                              (if (inline
                                                    #<info>
                                                    eq?
                                                    %ac0
                                                    0)
                                                  (begin
                                                    (label
                                                      #{dcl a5dids9skwzdhr1md4j13r-27})
                                                    (nop)
                                                    (overflood-check)
                                                    (set! (mref
                                                            %tc
                                                            zero
                                                            104)
                                                      (inline
                                                        #<info>
                                                        \x2D;/eq
                                                        (mref %tc zero 104)
                                                        1))
                                                    (if (inline
                                                          #<info>
                                                          condition-code)
                                                        (begin
                                                          (pariah)
                                                          (pariah)
                                                          (new-frame
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-33})
                                                          (tail
                                                            (begin
                                                              (set! (mref
                                                                      %sfp
                                                                      zero
                                                                      0)
                                                                (label-ref
                                                                  #{rpl a5dids9skwzdhr1md4j13r-33}
                                                                  32))
                                                              (jump
                                                                #<literal #(libspec event 32815)>
                                                                (fv0))))
                                                          (label
                                                            #{rpl a5dids9skwzdhr1md4j13r-33})
                                                          (return-point
                                                            #<info>
                                                            #{rpl a5dids9skwzdhr1md4j13r-33}
                                                            #{mrvl a5dids9skwzdhr1md4j13r-34}
                                                            ())
                                                          (label
                                                            #{mrvl a5dids9skwzdhr1md4j13r-34})
                                                          (remove-frame
                                                            #<info>))
                                                        (nop))
                                                    (set! %r8 40)
                                                    (jump
                                                      (label-ref
                                                        #{dcl a5dids9skwzdhr1md4j13r-9}
                                                        0)
                                                      (%r8 fv0)))
                                                  (begin
                                                    (pariah)
                                                    (goto doargerr))))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#{n a5dids9skwzdhr1md4j13r-3}
                                                     #{t a5dids9skwzdhr1md4j13r-25}
                                                     #{t a5dids9skwzdhr1md4j13r-16}
                                                     #{t a5dids9skwzdhr1md4j13r-22}
                                                     #{t a5dids9skwzdhr1md4j13r-15}
                                                     #{t a5dids9skwzdhr1md4j13r-23}
                                                     #{t a5dids9skwzdhr1md4j13r-18}
                                                     #{t a5dids9skwzdhr1md4j13r-24})
                                              (begin
                                                (label
                                                  #{dcl a5dids9skwzdhr1md4j13r-9})
                                                (nop)
                                                (overflood-check)
                                                (set! #{n a5dids9skwzdhr1md4j13r-3}
                                                  %r8)
                                                (if (if (inline
                                                          #<info>
                                                          eq?
                                                          #{n a5dids9skwzdhr1md4j13r-3}
                                                          0)
                                                        (true)
                                                        (if (inline
                                                              #<info>
                                                              log!test
                                                              #{n a5dids9skwzdhr1md4j13r-3}
                                                              7)
                                                            (false)
                                                            (begin
                                                              (pariah)
                                                              (set! (mref
                                                                      %tc
                                                                      zero
                                                                      104)
                                                                (inline
                                                                  #<info>
                                                                  \x2D;/eq
                                                                  (mref
                                                                    %tc
                                                                    zero
                                                                    104)
                                                                  1))
                                                              (if (inline
                                                                    #<info>
                                                                    condition-code)
                                                                  (begin
                                                                    (pariah)
                                                                    (pariah)
                                                                    (new-frame
                                                                      #<info>
                                                                      #{rpl a5dids9skwzdhr1md4j13r-35})
                                                                    (tail
                                                                      (begin
                                                                        (set! (mref
                                                                                %sfp
                                                                                zero
                                                                                0)
                                                                          (label-ref
                                                                            #{rpl a5dids9skwzdhr1md4j13r-35}
                                                                            32))
                                                                        (jump
                                                                          #<literal #(libspec event 32815)>
                                                                          (fv0))))
                                                                    (label
                                                                      #{rpl a5dids9skwzdhr1md4j13r-35})
                                                                    (return-point
                                                                      #<info>
                                                                      #{rpl a5dids9skwzdhr1md4j13r-35}
                                                                      #{mrvl a5dids9skwzdhr1md4j13r-36}
                                                                      ())
                                                                    (label
                                                                      #{mrvl a5dids9skwzdhr1md4j13r-36})
                                                                    (remove-frame
                                                                      #<info>))
                                                                  (nop))
                                                              (pariah)
                                                              (set! %r8
                                                                #{n a5dids9skwzdhr1md4j13r-3})
                                                              (set! %rdi 0)
                                                              (new-frame
                                                                #<info>
                                                                #{rpl a5dids9skwzdhr1md4j13r-37})
                                                              (tail
                                                                (begin
                                                                  (set! (mref
                                                                          %sfp
                                                                          zero
                                                                          0)
                                                                    (label-ref
                                                                      #{rpl a5dids9skwzdhr1md4j13r-37}
                                                                      32))
                                                                  (jump
                                                                    #<literal #(libspec = 34827)>
                                                                    (%r8 %rdi
                                                                         fv0))))
                                                              (label
                                                                #{rpl a5dids9skwzdhr1md4j13r-37})
                                                              (return-point
                                                                #<info>
                                                                #{rpl a5dids9skwzdhr1md4j13r-37}
                                                                #f
                                                                ())
                                                              (set! #{t a5dids9skwzdhr1md4j13r-25}
                                                                %ac0)
                                                              (remove-frame
                                                                #<info>)
                                                              (if (inline
                                                                    #<info>
                                                                    eq?
                                                                    #{t a5dids9skwzdhr1md4j13r-25}
                                                                    6)
                                                                  (false)
                                                                  (true)))))
                                                    (begin
                                                      (set! %ac0 8)
                                                      (jump fv0 (%ac0)))
                                                    (begin
                                                      (overflow-check)
                                                      (set! (mref
                                                              %tc
                                                              zero
                                                              104)
                                                        (inline
                                                          #<info>
                                                          \x2D;/eq
                                                          (mref
                                                            %tc
                                                            zero
                                                            104)
                                                          1))
                                                      (if (inline
                                                            #<info>
                                                            condition-code)
                                                          (begin
                                                            (pariah)
                                                            (pariah)
                                                            (new-frame
                                                              #<info>
                                                              #{rpl a5dids9skwzdhr1md4j13r-38})
                                                            (tail
                                                              (begin
                                                                (set! (mref
                                                                        %sfp
                                                                        zero
                                                                        0)
                                                                  (label-ref
                                                                    #{rpl a5dids9skwzdhr1md4j13r-38}
                                                                    32))
                                                                (jump
                                                                  #<literal #(libspec event 32814)>
                                                                  (fv0))))
                                                            (label
                                                              #{rpl a5dids9skwzdhr1md4j13r-38})
                                                            (return-point
                                                              #<info>
                                                              #{rpl a5dids9skwzdhr1md4j13r-38}
                                                              #{mrvl a5dids9skwzdhr1md4j13r-39}
                                                              ())
                                                            (label
                                                              #{mrvl a5dids9skwzdhr1md4j13r-39})
                                                            (remove-frame
                                                              #<info>))
                                                          (nop))
                                                      (if (inline
                                                            #<info>
                                                            log!test
                                                            #{n a5dids9skwzdhr1md4j13r-3}
                                                            7)
                                                          (begin
                                                            (set! #{t a5dids9skwzdhr1md4j13r-16}
                                                              (inline
                                                                #<info>
                                                                \x2D;/ovfl
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                8))
                                                            (if (inline
                                                                  #<info>
                                                                  condition-code)
                                                                (begin
                                                                  (label
                                                                    #{Lfail a5dids9skwzdhr1md4j13r-17})
                                                                  (pariah)
                                                                  (pariah)
                                                                  (set! %r8
                                                                    #{n a5dids9skwzdhr1md4j13r-3})
                                                                  (set! %rdi
                                                                    8)
                                                                  (new-frame
                                                                    #<info>
                                                                    #{rpl a5dids9skwzdhr1md4j13r-40})
                                                                  (tail
                                                                    (begin
                                                                      (set! (mref
                                                                              %sfp
                                                                              zero
                                                                              0)
                                                                        (label-ref
                                                                          #{rpl a5dids9skwzdhr1md4j13r-40}
                                                                          32))
                                                                      (jump
                                                                        #<literal #(libspec - 34838)>
                                                                        (%r8 %rdi
                                                                             fv0))))
                                                                  (label
                                                                    #{rpl a5dids9skwzdhr1md4j13r-40})
                                                                  (return-point
                                                                    #<info>
                                                                    #{rpl a5dids9skwzdhr1md4j13r-40}
                                                                    #f
                                                                    ())
                                                                  (set! #{t a5dids9skwzdhr1md4j13r-22}
                                                                    %ac0)
                                                                  (remove-frame
                                                                    #<info>))
                                                                (set! #{t a5dids9skwzdhr1md4j13r-22}
                                                                  #{t a5dids9skwzdhr1md4j13r-16})))
                                                          (goto
                                                            #{Lfail a5dids9skwzdhr1md4j13r-17}))
                                                      (set! %r8
                                                        #{t a5dids9skwzdhr1md4j13r-22})
                                                      (new-frame
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-41})
                                                      (tail
                                                        (begin
                                                          (set! (mref
                                                                  %sfp
                                                                  zero
                                                                  0)
                                                            (label-ref
                                                              #{rpl a5dids9skwzdhr1md4j13r-41}
                                                              32))
                                                          (joto
                                                            #{dcl a5dids9skwzdhr1md4j13r-9}
                                                            ())))
                                                      (label
                                                        #{rpl a5dids9skwzdhr1md4j13r-41})
                                                      (return-point
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-41}
                                                        #f
                                                        ())
                                                      (set! #{t a5dids9skwzdhr1md4j13r-15}
                                                        %ac0)
                                                      (remove-frame
                                                        #<info>)
                                                      (if (begin
                                                            (set! #{t a5dids9skwzdhr1md4j13r-24}
                                                              (inline
                                                                #<info>
                                                                logor
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                #{t a5dids9skwzdhr1md4j13r-15}))
                                                            (inline
                                                              #<info>
                                                              log!test
                                                              #{t a5dids9skwzdhr1md4j13r-24}
                                                              7))
                                                          (begin
                                                            (set! #{t a5dids9skwzdhr1md4j13r-23}
                                                              (inline
                                                                #<info>
                                                                sra
                                                                #{t a5dids9skwzdhr1md4j13r-15}
                                                                3))
                                                            (set! #{t a5dids9skwzdhr1md4j13r-18}
                                                              (inline
                                                                #<info>
                                                                */ovfl
                                                                #{n a5dids9skwzdhr1md4j13r-3}
                                                                #{t a5dids9skwzdhr1md4j13r-23}))
                                                            (if (inline
                                                                  #<info>
                                                                  condition-code)
                                                                (begin
                                                                  (label
                                                                    #{Lfail a5dids9skwzdhr1md4j13r-19})
                                                                  (pariah)
                                                                  (set! %r8
                                                                    #{n a5dids9skwzdhr1md4j13r-3})
                                                                  (set! %rdi
                                                                    #{t a5dids9skwzdhr1md4j13r-15})
                                                                  (jump
                                                                    #<literal #(libspec * 34840)>
                                                                    (%r8 %rdi
                                                                         fv0)))
                                                                (begin
                                                                  (set! %ac0
                                                                    #{t a5dids9skwzdhr1md4j13r-18})
                                                                  (jump
                                                                    fv0
                                                                    (%ac0)))))
                                                          (goto
                                                            #{Lfail a5dids9skwzdhr1md4j13r-19}))))))]
         [#{main a5dids9skwzdhr1md4j13r-13} (lambda (#{t a5dids9skwzdhr1md4j13r-5}
                                                     #{t a5dids9skwzdhr1md4j13r-20}
                                                     #{g0 a5dids9skwzdhr1md4j13r-0}
                                                     #{swap a5dids9skwzdhr1md4j13r-1})
                                              (begin
                                                (label
                                                  #{dcl a5dids9skwzdhr1md4j13r-28})
                                                (nop)
                                                (overflood-check)
                                                (set! (mref %tc zero 104)
                                                  (inline
                                                    #<info>
                                                    \x2D;/eq
                                                    (mref %tc zero 104)
                                                    1))
                                                (if (inline
                                                      #<info>
                                                      condition-code)
                                                    (begin
                                                      (pariah)
                                                      (pariah)
                                                      (new-frame
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-42})
                                                      (tail
                                                        (begin
                                                          (set! (mref
                                                                  %sfp
                                                                  zero
                                                                  0)
                                                            (label-ref
                                                              #{rpl a5dids9skwzdhr1md4j13r-42}
                                                              32))
                                                          (jump
                                                            #<literal #(libspec event 32815)>
                                                            (fv0))))
                                                      (label
                                                        #{rpl a5dids9skwzdhr1md4j13r-42})
                                                      (return-point
                                                        #<info>
                                                        #{rpl a5dids9skwzdhr1md4j13r-42}
                                                        #{mrvl a5dids9skwzdhr1md4j13r-43}
                                                        ())
                                                      (label
                                                        #{mrvl a5dids9skwzdhr1md4j13r-43})
                                                      (remove-frame
                                                        #<info>))
                                                    (nop))
                                                (set! #{t a5dids9skwzdhr1md4j13r-5}
                                                  0)
                                                (set! %xp
                                                  (inline
                                                    #<info>
                                                    +
                                                    %ap
                                                    -7))
                                                (set! %ap
                                                  (inline
                                                    #<info>
                                                    +
                                                    %ap
                                                    16))
                                                (if (inline
                                                      #<info>
                                                      u<
                                                      (mref %tc zero 88)
                                                      %ap)
                                                    (begin
                                                      (label
                                                        #{Lget-room a5dids9skwzdhr1md4j13r-44})
                                                      (pariah)
                                                      (set! %xp
                                                        (inline
                                                          #<info>
                                                          asmlibcall)))
                                                    (nop))
                                                (set! #{t a5dids9skwzdhr1md4j13r-20}
                                                  %xp)
                                                (set! (mref
                                                        #{t a5dids9skwzdhr1md4j13r-20}
                                                        zero
                                                        7)
                                                  #{t a5dids9skwzdhr1md4j13r-5})
                                                (nop)
                                                (set! (mref
                                                        #{t a5dids9skwzdhr1md4j13r-20}
                                                        zero
                                                        15)
                                                  30)
                                                (nop)
                                                (set! #{g0 a5dids9skwzdhr1md4j13r-0}
                                                  #{t a5dids9skwzdhr1md4j13r-20})
                                                (set! %xp
                                                  (inline
                                                    #<info>
                                                    +
                                                    %ap
                                                    -3))
                                                (set! %ap
                                                  (inline
                                                    #<info>
                                                    +
                                                    %ap
                                                    16))
                                                (if (inline
                                                      #<info>
                                                      u<
                                                      (mref %tc zero 88)
                                                      %ap)
                                                    (begin
                                                      (label
                                                        #{Lget-room a5dids9skwzdhr1md4j13r-45})
                                                      (pariah)
                                                      (set! %xp
                                                        (inline
                                                          #<info>
                                                          asmlibcall)))
                                                    (nop))
                                                (set! #{swap a5dids9skwzdhr1md4j13r-1}
                                                  %xp)
                                                (set! (mref
                                                        #{swap a5dids9skwzdhr1md4j13r-1}
                                                        zero
                                                        3)
                                                  (label-ref
                                                    #{swap a5dids9skwzdhr1md4j13r-10}
                                                    65))
                                                (nop)
                                                (set! (mref
                                                        #{swap a5dids9skwzdhr1md4j13r-1}
                                                        zero
                                                        11)
                                                  #{g0 a5dids9skwzdhr1md4j13r-0})
                                                (nop)
                                                (set! fv1
                                                  #{swap a5dids9skwzdhr1md4j13r-1})
                                                (set! %r8 14)
                                                (set! %rdi
                                                  #{swap a5dids9skwzdhr1md4j13r-1})
                                                (set! %rsi
                                                  #<literal #{anon a5dids9skwzdhr1md4j13r-11}>)
                                                (set! %xp
                                                  #<literal dynamic-wind>)
                                                (set! %cp
                                                  (mref %xp zero 5))
                                                (set! %ac0 4)
                                                (jump
                                                  (mref %xp zero 13)
                                                  (%ac0 %cp %r8 %rdi %rsi
                                                    fv0 fv1))))])
  (#{main a5dids9skwzdhr1md4j13r-13}))
output of np-expose-basic-blocks:
Warning in pretty-print: cycle detected; proceeding with (print-graph #t)
(letrec ([#0=#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#1=#{cp a5dids9skwzdhr1md4j13r-7}
                                                        #2=#{g1 a5dids9skwzdhr1md4j13r-4}
                                                        #3=#{t a5dids9skwzdhr1md4j13r-14}
                                                        #4=#{t a5dids9skwzdhr1md4j13r-21})
                                                 (#5=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-46} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6=#<info> #7=eq? (#8=%ac0 #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #9=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-47} () () #f () 0 #f uninitialized 0 #f #f #f #10=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-26} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #1# #11=%cp] #[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12=%tc #13=zero 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #14=\x2D;/eq (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #15=#<info> #16=condition-code ()] #17=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-48} () () #f () 1 #f uninitialized 0 #f #f #f #18=#<info> #19=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-49} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #20=%sfp #13# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #21=#{rpl a5dids9skwzdhr1md4j13r-29} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#22=fv0)] #f] () #23=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #21# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #18# #21# #24=#{mrvl a5dids9skwzdhr1md4j13r-30} ()]) () #f () 8 #f uninitialized 0 #f #f #f #25=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #24# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #18#]) () #f () 0 #f uninitialized 0 #f #f #f #26=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-50} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #2# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 568]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #4# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #13# 11]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #27=%r8 #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #4# #13# 7]]) () #f () 0 #f uninitialized 0 #f #f #f #28=#<info> #29=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-51} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #30=%xp #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal optimize-level>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #11# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #30# #13# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #20# #13# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #31=#{rpl a5dids9skwzdhr1md4j13r-31} 32]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #30# #13# 13] (#8# #11# #27# #22#)] #f] () #32=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #31# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #28# #31# #33=#{mrvl a5dids9skwzdhr1md4j13r-32} ()]) () #f () 8 #f uninitialized 0 #f #f #f #34=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #33# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #28#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #3# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> lea1 (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #13# 11])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #3# #13# 0] #2#]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #35=log!test (#2# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #36=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-52} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #22# (#8#)] #f] #37=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-53} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #38=%td #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 88]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #39=u< (#40=%ap #38#)] #41=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-54} () () #f () 0 #f uninitialized 0 #f #f #f #42=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-55} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #38# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# - (#38# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 88] #38#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #38# #13# 0] #3#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #22# (#8#)] #f]] #43=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-56} (#[#{L15a:inline:Effect.1126 pfwewp4o1ot9y43qsci5xntr9-6129} 151 #<live-info> #<info> asmlibcall! ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #38# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 88]]) () #f () 1 #f uninitialized 0 #f #f #f #42#] uninitialized] uninitialized]] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized] #44=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-57} () () #f () 0 #f uninitialized 0 #f #f #f #26#] uninitialized]] #45=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-58} () () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #46=doargerr] #f] uninitialized])
                                                 (#5# #9# #10# #17# #19# #23#
                                                      #25# #44# #26# #29#
                                                      #32# #34# #36# #37#
                                                      #41# #43# #42#
                                                      #45#))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda ()
                                              (#47=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-59} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #48=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-60} () () #f () 0 #f uninitialized 0 #f #f #f #49=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-27} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #14# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #15# #16# ()] #50=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-61} () () #f () 1 #f uninitialized 0 #f #f #f #51=#<info> #52=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-62} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #20# #13# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #53=#{rpl a5dids9skwzdhr1md4j13r-33} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#22#)] #f] () #54=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #53# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #51# #53# #55=#{mrvl a5dids9skwzdhr1md4j13r-34} ()]) () #f () 8 #f uninitialized 0 #f #f #f #56=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #55# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #51#]) () #f () 0 #f uninitialized 0 #f #f #f #57=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-63} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #27# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 40]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #58=#{dcl a5dids9skwzdhr1md4j13r-9} 0] (#27# #22#)] #f]]] uninitialized uninitialized uninitialized] #59=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-64} () () #f () 0 #f uninitialized 0 #f #f #f #57#] uninitialized]] #60=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-65} () () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #46#] #f] uninitialized])
                                              (#47# #48# #49# #50# #52#
                                                #54# #56# #59# #57# #60#))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#61=#{n a5dids9skwzdhr1md4j13r-3}
                                                     #62=#{t a5dids9skwzdhr1md4j13r-25}
                                                     #63=#{t a5dids9skwzdhr1md4j13r-16}
                                                     #64=#{t a5dids9skwzdhr1md4j13r-22}
                                                     #65=#{t a5dids9skwzdhr1md4j13r-15}
                                                     #66=#{t a5dids9skwzdhr1md4j13r-23}
                                                     #67=#{t a5dids9skwzdhr1md4j13r-18}
                                                     #68=#{t a5dids9skwzdhr1md4j13r-24})
                                              (#69=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{entry a5dids9skwzdhr1md4j13r-66} () () #f () 0 #f uninitialized 0 #f #f #f #70=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #58# (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #61# #27#]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#61# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #71=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-67} () () #f () 0 #f uninitialized 0 #f #f #f #72=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-68} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #22# (#8#)] #f]] #73=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-69} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #35# (#61# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #74=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-70} () () #f () 0 #f uninitialized 0 #f #f #f #75=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-71} (#[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #14# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #15# #16# ()] #76=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-72} () () #f () 1 #f uninitialized 0 #f #f #f #77=#<info> #78=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-73} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #20# #13# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #79=#{rpl a5dids9skwzdhr1md4j13r-38} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#22#)] #f] () #80=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #79# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #77# #79# #81=#{mrvl a5dids9skwzdhr1md4j13r-39} ()]) () #f () 8 #f uninitialized 0 #f #f #f #82=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #81# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #77#]) () #f () 0 #f uninitialized 0 #f #f #f #83=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-74} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #35# (#61# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #84=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-75} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #63# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# \x2D;/ovfl (#61# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #16# ()] #85=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-76} () () #f () 0 #f uninitialized 0 #f #f #f #86=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{Lfail a5dids9skwzdhr1md4j13r-17} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #27# #61#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #87=%rdi #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f () 1 #f uninitialized 0 #f #f #f #88=#<info> #89=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-77} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #20# #13# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #90=#{rpl a5dids9skwzdhr1md4j13r-40} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec - 34838)>] (#27# #87# #22#)] #f] () #91=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #90# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #88# #90# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #64# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #88#]) () #f () 8 #f uninitialized 0 #f #f #f #92=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{ej a5dids9skwzdhr1md4j13r-78} () () #f () 0 #f uninitialized 0 #f #f #f #93=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-79} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #27# #64#]) () #f () 0 #f uninitialized 0 #f #f #f #94=#<info> #95=#[#{joto-block pfwewp4o1ot9y43qsci5xntr9-6120} #{docall a5dids9skwzdhr1md4j13r-80} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #20# #13# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #96=#{rpl a5dids9skwzdhr1md4j13r-41} 32]]) () #f () 0 #f uninitialized 0 #f #f #f () #70#] () #97=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #96# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #94# #96# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #65# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #94#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #68# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# logor (#61# #65#)]]) () #f () 8 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #35# (#68# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #98=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-81} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #66# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# sra (#65# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #67# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# */ovfl (#61# #66#)]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #16# ()] #99=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-82} () () #f () 0 #f uninitialized 0 #f #f #f #100=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{Lfail a5dids9skwzdhr1md4j13r-19} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #27# #61#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #87# #65#]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec * 34840)>] (#27# #87# #22#)] #f]] #101=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-83} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #67#]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #22# (#8#)] #f] uninitialized] #102=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-84} () () #f () 0 #f uninitialized 0 #f #f #f #100#] uninitialized] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized]] #103=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-85} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #64# #63#]) () #f () 0 #f uninitialized 0 #f #f #f #92#] uninitialized] #104=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-86} () () #f () 0 #f uninitialized 0 #f #f #f #86#] uninitialized]]] uninitialized uninitialized uninitialized] #105=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-87} () () #f () 0 #f uninitialized 0 #f #f #f #83#] uninitialized]] #106=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-88} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #14# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #15# #16# ()] #107=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-89} () () #f () 1 #f uninitialized 0 #f #f #f #108=#<info> #109=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-90} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #20# #13# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #110=#{rpl a5dids9skwzdhr1md4j13r-35} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#22#)] #f] () #111=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #110# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #108# #110# #112=#{mrvl a5dids9skwzdhr1md4j13r-36} ()]) () #f () 8 #f uninitialized 0 #f #f #f #113=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #112# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #108#]) () #f () 0 #f uninitialized 0 #f #f #f #114=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-91} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #27# #61#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #87# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]]) () #f () 1 #f uninitialized 0 #f #f #f #115=#<info> #116=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-92} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #20# #13# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #117=#{rpl a5dids9skwzdhr1md4j13r-37} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec = 34827)>] (#27# #87# #22#)] #f] () #118=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #117# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #115# #117# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #62# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #115#]) () #f () 8 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#62# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 6])] #119=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-93} () () #f () 0 #f uninitialized 0 #f #f #f #75#] #120=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-94} () () #f () 0 #f uninitialized 0 #f #f #f #72#] uninitialized] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized] #121=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-95} () () #f () 0 #f uninitialized 0 #f #f #f #114#] uninitialized] uninitialized] uninitialized]]
                                                #70#)
                                              (#69# #70# #71# #73# #74#
                                               #106# #107# #109# #111#
                                               #113# #121# #114# #116#
                                               #118# #119# #120# #72# #75#
                                               #76# #78# #80# #82# #105#
                                               #83# #84# #85# #86# #89#
                                               #91# #103# #104# #92# #93#
                                               #95# #97# #98# #99# #100#
                                               #101# #102#))]
         [#122=#{main a5dids9skwzdhr1md4j13r-13} (lambda (#123=#{t a5dids9skwzdhr1md4j13r-5}
                                                          #124=#{t a5dids9skwzdhr1md4j13r-20}
                                                          #125=#{g0 a5dids9skwzdhr1md4j13r-0}
                                                          #126=#{swap a5dids9skwzdhr1md4j13r-1})
                                                   (#127=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{entry a5dids9skwzdhr1md4j13r-96} () () #f () 0 #f uninitialized 0 #f #f #f #128=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-28} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #14# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #15# #16# ()] #129=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-97} () () #f () 1 #f uninitialized 0 #f #f #f #130=#<info> #131=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-98} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #20# #13# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #132=#{rpl a5dids9skwzdhr1md4j13r-42} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#22#)] #f] () #133=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #132# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #130# #132# #134=#{mrvl a5dids9skwzdhr1md4j13r-43} ()]) () #f () 8 #f uninitialized 0 #f #f #f #135=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #134# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #130#]) () #f () 0 #f uninitialized 0 #f #f #f #136=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-99} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #123# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #30# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #137=+ (#40# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -7])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #40# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #137# (#40# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #39# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 88] #40#)] #138=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-100} () () #f () 0 #f uninitialized 0 #f #f #f #139=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-44} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #30# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #140=asmlibcall ()]]) () #f () 1 #f uninitialized 0 #f #f #f #141=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-101} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #124# #30#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #124# #13# 7] #123#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #124# #13# 15] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 30]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #125# #124#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #30# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #137# (#40# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #40# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #137# (#40# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #39# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #12# #13# 88] #40#)] #142=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lt a5dids9skwzdhr1md4j13r-102} () () #f () 0 #f uninitialized 0 #f #f #f #143=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-45} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #30# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #140# ()]]) () #f () 1 #f uninitialized 0 #f #f #f #144=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-103} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #126# #30#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #126# #13# 3] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #0# 65]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #126# #13# 11] #125#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #145=fv1 #126#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #27# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 14]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #87# #126#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #146=%rsi #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #{anon a5dids9skwzdhr1md4j13r-11}>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #30# #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal dynamic-wind>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #11# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #30# #13# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 4]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #30# #13# 13] (#8# #11# #27# #87# #146# #22# #145#)] #f]]] #147=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-104} () () #f () 0 #f uninitialized 0 #f #f #f #144#] uninitialized]]] #148=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-105} () () #f () 0 #f uninitialized 0 #f #f #f #141#] uninitialized]]] uninitialized uninitialized uninitialized] #149=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-106} () () #f () 0 #f uninitialized 0 #f #f #f #136#] uninitialized]])
                                                   (#127# #128# #129# #131#
                                                     #133# #135# #149#
                                                     #136# #138# #139#
                                                     #148# #141# #142#
                                                     #143# #147# #144#))])
  (#122#))
output of np-remove-repeater-blocks!:
Warning in pretty-print: cycle detected; proceeding with (print-graph #t)
(letrec ([#0=#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#1=#{cp a5dids9skwzdhr1md4j13r-7}
                                                        #2=#{g1 a5dids9skwzdhr1md4j13r-4}
                                                        #3=#{t a5dids9skwzdhr1md4j13r-14}
                                                        #4=#{t a5dids9skwzdhr1md4j13r-21})
                                                 (#5=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-46} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6=#<info> #7=eq? (#8=%ac0 #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #9=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-26} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #1# #10=%cp] #[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11=%tc #12=zero 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13=\x2D;/eq (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14=#<info> #15=condition-code ()] #16=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-48} () () #f () 1 #f uninitialized 0 #f #f #f #17=#<info> #18=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-49} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19=%sfp #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #20=#{rpl a5dids9skwzdhr1md4j13r-29} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21=fv0)] #f] () #22=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #20# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #17# #20# #23=#{mrvl a5dids9skwzdhr1md4j13r-30} ()]) () #f () 8 #f uninitialized 0 #f #f #f #24=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #23# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #17#]) () #f () 0 #f uninitialized 0 #f #f #f #25=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-50} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #2# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 568]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #4# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26=%r8 #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #4# #12# 7]]) () #f () 0 #f uninitialized 0 #f #f #f #27=#<info> #28=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-51} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29=%xp #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal optimize-level>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #30=#{rpl a5dids9skwzdhr1md4j13r-31} 32]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #21#)] #f] () #31=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #30# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #27# #30# #32=#{mrvl a5dids9skwzdhr1md4j13r-32} ()]) () #f () 8 #f uninitialized 0 #f #f #f #33=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #32# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #27#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #3# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> lea1 (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #3# #12# 0] #2#]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34=log!test (#2# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #35=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-52} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #36=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-53} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37=%td #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38=u< (#39=%ap #37#)] #40=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-55} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# - (#37# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #37#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #37# #12# 0] #3#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #41=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-56} (#[#{L15a:inline:Effect.1126 pfwewp4o1ot9y43qsci5xntr9-6129} 151 #<live-info> #<info> asmlibcall! ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f () 1 #f uninitialized 0 #f #f #f #40#] uninitialized] uninitialized]] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized] #25# uninitialized] #42=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-58} () () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43=doargerr] #f] uninitialized])
                                                 (#5# #9# #16# #18# #22# #24#
                                                      #25# #28# #31# #33#
                                                      #35# #36# #41# #40#
                                                      #42#))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda ()
                                              (#44=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-59} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #45=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-27} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #46=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-61} () () #f () 1 #f uninitialized 0 #f #f #f #47=#<info> #48=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-62} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #49=#{rpl a5dids9skwzdhr1md4j13r-33} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #50=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #49# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #47# #49# #51=#{mrvl a5dids9skwzdhr1md4j13r-34} ()]) () #f () 8 #f uninitialized 0 #f #f #f #52=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #51# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #47#]) () #f () 0 #f uninitialized 0 #f #f #f #53=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-63} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 40]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #54=#{dcl a5dids9skwzdhr1md4j13r-9} 0] (#26# #21#)] #f]]] uninitialized uninitialized uninitialized] #53# uninitialized] #55=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-65} () () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43#] #f] uninitialized])
                                              (#44# #45# #46# #48# #50#
                                                #52# #53# #55#))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#56=#{n a5dids9skwzdhr1md4j13r-3}
                                                     #57=#{t a5dids9skwzdhr1md4j13r-25}
                                                     #58=#{t a5dids9skwzdhr1md4j13r-16}
                                                     #59=#{t a5dids9skwzdhr1md4j13r-22}
                                                     #60=#{t a5dids9skwzdhr1md4j13r-15}
                                                     #61=#{t a5dids9skwzdhr1md4j13r-23}
                                                     #62=#{t a5dids9skwzdhr1md4j13r-18}
                                                     #63=#{t a5dids9skwzdhr1md4j13r-24})
                                              (#64=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #54# (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #56# #26#]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #65=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-68} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #66=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-69} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #67=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-71} (#[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #68=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-72} () () #f () 1 #f uninitialized 0 #f #f #f #69=#<info> #70=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-73} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #71=#{rpl a5dids9skwzdhr1md4j13r-38} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21#)] #f] () #72=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #71# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #69# #71# #73=#{mrvl a5dids9skwzdhr1md4j13r-39} ()]) () #f () 8 #f uninitialized 0 #f #f #f #74=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #73# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #69#]) () #f () 0 #f uninitialized 0 #f #f #f #75=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-74} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #76=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-75} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #58# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# \x2D;/ovfl (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #77=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{Lfail a5dids9skwzdhr1md4j13r-17} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #78=%rdi #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f () 1 #f uninitialized 0 #f #f #f #79=#<info> #80=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-77} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #81=#{rpl a5dids9skwzdhr1md4j13r-40} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec - 34838)>] (#26# #78# #21#)] #f] () #82=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #81# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #79# #81# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #79#]) () #f () 8 #f uninitialized 0 #f #f #f #83=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-79} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #59#]) () #f () 0 #f uninitialized 0 #f #f #f #84=#<info> #85=#[#{joto-block pfwewp4o1ot9y43qsci5xntr9-6120} #{docall a5dids9skwzdhr1md4j13r-80} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #86=#{rpl a5dids9skwzdhr1md4j13r-41} 32]]) () #f () 0 #f uninitialized 0 #f #f #f () #64#] () #87=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #86# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #84# #86# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #60# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #84#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #63# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# logor (#56# #60#)]]) () #f () 8 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#63# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #88=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-81} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #61# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# sra (#60# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #62# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# */ovfl (#56# #61#)]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #89=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{Lfail a5dids9skwzdhr1md4j13r-19} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #78# #60#]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec * 34840)>] (#26# #78# #21#)] #f] #90=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-83} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #62#]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] uninitialized] #89# uninitialized] uninitialized uninitialized uninitialized]] uninitialized uninitialized uninitialized] #91=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-85} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #58#]) () #f () 0 #f uninitialized 0 #f #f #f #83#] uninitialized] #77# uninitialized]]] uninitialized uninitialized uninitialized] #75# uninitialized] #92=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-88} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #93=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-89} () () #f () 1 #f uninitialized 0 #f #f #f #94=#<info> #95=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-90} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #96=#{rpl a5dids9skwzdhr1md4j13r-35} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #97=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #96# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #94# #96# #98=#{mrvl a5dids9skwzdhr1md4j13r-36} ()]) () #f () 8 #f uninitialized 0 #f #f #f #99=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #98# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #94#]) () #f () 0 #f uninitialized 0 #f #f #f #100=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-91} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #78# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]]) () #f () 1 #f uninitialized 0 #f #f #f #101=#<info> #102=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-92} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #103=#{rpl a5dids9skwzdhr1md4j13r-37} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec = 34827)>] (#26# #78# #21#)] #f] () #104=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #103# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #101# #103# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #57# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #101#]) () #f () 8 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#57# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 6])] #67# #65# uninitialized] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized] #100# uninitialized] uninitialized] uninitialized]
                                                #64#)
                                              (#64# #66# #92# #93# #95#
                                               #97# #99# #100# #102# #104#
                                               #65# #67# #68# #70# #72#
                                               #74# #75# #76# #77# #80#
                                               #82# #91# #83# #85# #87#
                                               #88# #89# #90#))]
         [#105=#{main a5dids9skwzdhr1md4j13r-13} (lambda (#106=#{t a5dids9skwzdhr1md4j13r-5}
                                                          #107=#{t a5dids9skwzdhr1md4j13r-20}
                                                          #108=#{g0 a5dids9skwzdhr1md4j13r-0}
                                                          #109=#{swap a5dids9skwzdhr1md4j13r-1})
                                                   (#110=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-28} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #111=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-97} () () #f () 1 #f uninitialized 0 #f #f #f #112=#<info> #113=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-98} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #114=#{rpl a5dids9skwzdhr1md4j13r-42} 32]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #115=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #114# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #112# #114# #116=#{mrvl a5dids9skwzdhr1md4j13r-43} ()]) () #f () 8 #f uninitialized 0 #f #f #f #117=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #116# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #112#]) () #f () 0 #f uninitialized 0 #f #f #f #118=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-99} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #106# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119=+ (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -7])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #120=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-44} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121=asmlibcall ()]]) () #f () 1 #f uninitialized 0 #f #f #f #122=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-101} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #107# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 7] #106#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 15] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 30]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #108# #107#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #123=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-45} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121# ()]]) () #f () 1 #f uninitialized 0 #f #f #f #124=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-103} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #109# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 3] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #0# 65]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 11] #108#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #125=fv1 #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 14]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #78# #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #126=%rsi #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #{anon a5dids9skwzdhr1md4j13r-11}>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal dynamic-wind>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 4]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #78# #126# #21# #125#)] #f]] #124# uninitialized]] #122# uninitialized]]] uninitialized uninitialized uninitialized] #118# uninitialized])
                                                   (#110# #111# #113# #115#
                                                     #117# #118# #120#
                                                     #122# #123# #124#))])
  (#105#))
output of np-propagate-pariahty!:
Warning in pretty-print: cycle detected; proceeding with (print-graph #t)
(letrec ([#0=#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#1=#{cp a5dids9skwzdhr1md4j13r-7}
                                                        #2=#{g1 a5dids9skwzdhr1md4j13r-4}
                                                        #3=#{t a5dids9skwzdhr1md4j13r-14}
                                                        #4=#{t a5dids9skwzdhr1md4j13r-21})
                                                 (#5=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-46} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6=#<info> #7=eq? (#8=%ac0 #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #9=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-26} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #1# #10=%cp] #[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11=%tc #12=zero 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13=\x2D;/eq (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14=#<info> #15=condition-code ()] #16=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-48} () () #f () 1 #f uninitialized 0 #f #f #f #17=#<info> #18=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-49} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19=%sfp #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #20=#{rpl a5dids9skwzdhr1md4j13r-29} 32]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21=fv0)] #f] () #22=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #20# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #17# #20# #23=#{mrvl a5dids9skwzdhr1md4j13r-30} ()]) () #f () 9 #f uninitialized 0 #f #f #f #24=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #23# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #17#]) () #f () 1 #f uninitialized 0 #f #f #f #25=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-50} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #2# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 568]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #4# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26=%r8 #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #4# #12# 7]]) () #f () 0 #f uninitialized 0 #f #f #f #27=#<info> #28=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-51} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29=%xp #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal optimize-level>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #30=#{rpl a5dids9skwzdhr1md4j13r-31} 32]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #21#)] #f] () #31=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #30# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #27# #30# #32=#{mrvl a5dids9skwzdhr1md4j13r-32} ()]) () #f () 8 #f uninitialized 0 #f #f #f #33=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #32# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #27#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #3# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> lea1 (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #3# #12# 0] #2#]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34=log!test (#2# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #35=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-52} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #36=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-53} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37=%td #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38=u< (#39=%ap #37#)] #40=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-55} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# - (#37# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #37#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #37# #12# 0] #3#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #41=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-56} (#[#{L15a:inline:Effect.1126 pfwewp4o1ot9y43qsci5xntr9-6129} 151 #<live-info> #<info> asmlibcall! ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f () 1 #f uninitialized 0 #f #f #f #40#] uninitialized] uninitialized]] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized] #25# uninitialized] #42=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-58} () () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43=doargerr] #f] uninitialized])
                                                 (#5# #9# #16# #18# #22# #24#
                                                      #25# #28# #31# #33#
                                                      #35# #36# #41# #40#
                                                      #42#))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda ()
                                              (#44=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-59} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #45=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-27} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #46=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-61} () () #f () 1 #f uninitialized 0 #f #f #f #47=#<info> #48=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-62} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #49=#{rpl a5dids9skwzdhr1md4j13r-33} 32]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #50=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #49# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #47# #49# #51=#{mrvl a5dids9skwzdhr1md4j13r-34} ()]) () #f () 9 #f uninitialized 0 #f #f #f #52=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #51# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #47#]) () #f () 1 #f uninitialized 0 #f #f #f #53=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-63} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 40]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #54=#{dcl a5dids9skwzdhr1md4j13r-9} 0] (#26# #21#)] #f]]] uninitialized uninitialized uninitialized] #53# uninitialized] #55=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-65} () () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43#] #f] uninitialized])
                                              (#44# #45# #46# #48# #50#
                                                #52# #53# #55#))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#56=#{n a5dids9skwzdhr1md4j13r-3}
                                                     #57=#{t a5dids9skwzdhr1md4j13r-25}
                                                     #58=#{t a5dids9skwzdhr1md4j13r-16}
                                                     #59=#{t a5dids9skwzdhr1md4j13r-22}
                                                     #60=#{t a5dids9skwzdhr1md4j13r-15}
                                                     #61=#{t a5dids9skwzdhr1md4j13r-23}
                                                     #62=#{t a5dids9skwzdhr1md4j13r-18}
                                                     #63=#{t a5dids9skwzdhr1md4j13r-24})
                                              (#64=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #54# (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #56# #26#]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #65=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-68} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #66=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-69} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #67=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-71} (#[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #68=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-72} () () #f () 1 #f uninitialized 0 #f #f #f #69=#<info> #70=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-73} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #71=#{rpl a5dids9skwzdhr1md4j13r-38} 32]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21#)] #f] () #72=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #71# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #69# #71# #73=#{mrvl a5dids9skwzdhr1md4j13r-39} ()]) () #f () 9 #f uninitialized 0 #f #f #f #74=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #73# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #69#]) () #f () 1 #f uninitialized 0 #f #f #f #75=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-74} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #76=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-75} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #58# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# \x2D;/ovfl (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #77=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{Lfail a5dids9skwzdhr1md4j13r-17} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #78=%rdi #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f () 1 #f uninitialized 0 #f #f #f #79=#<info> #80=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-77} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #81=#{rpl a5dids9skwzdhr1md4j13r-40} 32]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec - 34838)>] (#26# #78# #21#)] #f] () #82=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #81# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #79# #81# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #79#]) () #f () 9 #f uninitialized 0 #f #f #f #83=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-79} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #59#]) () #f () 0 #f uninitialized 0 #f #f #f #84=#<info> #85=#[#{joto-block pfwewp4o1ot9y43qsci5xntr9-6120} #{docall a5dids9skwzdhr1md4j13r-80} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #86=#{rpl a5dids9skwzdhr1md4j13r-41} 32]]) () #f () 0 #f uninitialized 0 #f #f #f () #64#] () #87=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #86# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #84# #86# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #60# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #84#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #63# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# logor (#56# #60#)]]) () #f () 8 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#63# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #88=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-81} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #61# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# sra (#60# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #62# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# */ovfl (#56# #61#)]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #89=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{Lfail a5dids9skwzdhr1md4j13r-19} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #78# #60#]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec * 34840)>] (#26# #78# #21#)] #f] #90=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-83} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #62#]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] uninitialized] #89# uninitialized] uninitialized uninitialized uninitialized]] uninitialized uninitialized uninitialized] #91=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-85} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #58#]) () #f () 0 #f uninitialized 0 #f #f #f #83#] uninitialized] #77# uninitialized]]] uninitialized uninitialized uninitialized] #75# uninitialized] #92=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-88} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #93=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-89} () () #f () 1 #f uninitialized 0 #f #f #f #94=#<info> #95=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-90} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #96=#{rpl a5dids9skwzdhr1md4j13r-35} 32]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #97=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #96# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #94# #96# #98=#{mrvl a5dids9skwzdhr1md4j13r-36} ()]) () #f () 9 #f uninitialized 0 #f #f #f #99=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #98# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #94#]) () #f () 1 #f uninitialized 0 #f #f #f #100=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-91} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #78# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]]) () #f () 1 #f uninitialized 0 #f #f #f #101=#<info> #102=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-92} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #103=#{rpl a5dids9skwzdhr1md4j13r-37} 32]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec = 34827)>] (#26# #78# #21#)] #f] () #104=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #103# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #101# #103# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #57# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #101#]) () #f () 9 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#57# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 6])] #67# #65# uninitialized] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized] #100# uninitialized] uninitialized] uninitialized]
                                                #64#)
                                              (#64# #66# #92# #93# #95#
                                               #97# #99# #100# #102# #104#
                                               #65# #67# #68# #70# #72#
                                               #74# #75# #76# #77# #80#
                                               #82# #91# #83# #85# #87#
                                               #88# #89# #90#))]
         [#105=#{main a5dids9skwzdhr1md4j13r-13} (lambda (#106=#{t a5dids9skwzdhr1md4j13r-5}
                                                          #107=#{t a5dids9skwzdhr1md4j13r-20}
                                                          #108=#{g0 a5dids9skwzdhr1md4j13r-0}
                                                          #109=#{swap a5dids9skwzdhr1md4j13r-1})
                                                   (#110=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-28} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #111=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-97} () () #f () 1 #f uninitialized 0 #f #f #f #112=#<info> #113=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-98} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #114=#{rpl a5dids9skwzdhr1md4j13r-42} 32]]) () #f () 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #115=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #114# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #112# #114# #116=#{mrvl a5dids9skwzdhr1md4j13r-43} ()]) () #f () 9 #f uninitialized 0 #f #f #f #117=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #116# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #112#]) () #f () 1 #f uninitialized 0 #f #f #f #118=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-99} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #106# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119=+ (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -7])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #120=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-44} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121=asmlibcall ()]]) () #f () 1 #f uninitialized 0 #f #f #f #122=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-101} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #107# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 7] #106#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 15] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 30]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #108# #107#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #123=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-45} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121# ()]]) () #f () 1 #f uninitialized 0 #f #f #f #124=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-103} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #109# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 3] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #0# 65]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 11] #108#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #125=fv1 #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 14]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #78# #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #126=%rsi #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #{anon a5dids9skwzdhr1md4j13r-11}>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal dynamic-wind>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 4]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #78# #126# #21# #125#)] #f]] #124# uninitialized]] #122# uninitialized]]] uninitialized uninitialized uninitialized] #118# uninitialized])
                                                   (#110# #111# #113# #115#
                                                     #117# #118# #120#
                                                     #122# #123# #124#))])
  (#105#))
output of np-add-in-links!:
Warning in pretty-print: cycle detected; proceeding with (print-graph #t)
(letrec ([#0=#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#1=#{cp a5dids9skwzdhr1md4j13r-7}
                                                        #2=#{g1 a5dids9skwzdhr1md4j13r-4}
                                                        #3=#{t a5dids9skwzdhr1md4j13r-14}
                                                        #4=#{t a5dids9skwzdhr1md4j13r-21})
                                                 (#5=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-46} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6=#<info> #7=eq? (#8=%ac0 #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #9=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-26} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #1# #10=%cp] #[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11=%tc #12=zero 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13=\x2D;/eq (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#5#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14=#<info> #15=condition-code ()] #16=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-48} () () #f (#9#) 1 #f uninitialized 0 #f #f #f #17=#<info> #18=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-49} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19=%sfp #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #20=#{rpl a5dids9skwzdhr1md4j13r-29} 32]]) () #f (#16#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21=fv0)] #f] () #22=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #20# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #17# #20# #23=#{mrvl a5dids9skwzdhr1md4j13r-30} ()]) () #f (#16#) 9 #f uninitialized 0 #f #f #f #24=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #23# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #17#]) () #f (#22#) 1 #f uninitialized 0 #f #f #f #25=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-50} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #2# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 568]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #4# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26=%r8 #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #4# #12# 7]]) () #f (#24# #9#) 0 #f uninitialized 0 #f #f #f #27=#<info> #28=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-51} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29=%xp #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal optimize-level>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #30=#{rpl a5dids9skwzdhr1md4j13r-31} 32]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1]]) () #f (#25#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #21#)] #f] () #31=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #30# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #27# #30# #32=#{mrvl a5dids9skwzdhr1md4j13r-32} ()]) () #f (#25#) 8 #f uninitialized 0 #f #f #f #33=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #32# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #27#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #3# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> lea1 (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #3# #12# 0] #2#]) () #f (#31#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34=log!test (#2# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #35=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-52} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f (#33#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #36=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-53} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37=%td #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f (#33#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38=u< (#39=%ap #37#)] #40=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-55} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# - (#37# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #37#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #37# #12# 0] #3#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f (#41=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-56} (#[#{L15a:inline:Effect.1126 pfwewp4o1ot9y43qsci5xntr9-6129} 151 #<live-info> #<info> asmlibcall! ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f (#36#) 1 #f uninitialized 0 #f #f #f #40#] #36#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #41# uninitialized] uninitialized]] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized] #25# uninitialized] #42=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-58} () () #f (#5#) 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43=doargerr] #f] uninitialized])
                                                 (#5# #9# #16# #18# #22# #24#
                                                      #25# #28# #31# #33#
                                                      #35# #36# #41# #40#
                                                      #42#))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda ()
                                              (#44=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-59} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #45=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-27} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#44#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #46=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-61} () () #f (#45#) 1 #f uninitialized 0 #f #f #f #47=#<info> #48=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-62} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #49=#{rpl a5dids9skwzdhr1md4j13r-33} 32]]) () #f (#46#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #50=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #49# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #47# #49# #51=#{mrvl a5dids9skwzdhr1md4j13r-34} ()]) () #f (#46#) 9 #f uninitialized 0 #f #f #f #52=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #51# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #47#]) () #f (#50#) 1 #f uninitialized 0 #f #f #f #53=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-63} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 40]]) () #f (#52# #45#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #54=#{dcl a5dids9skwzdhr1md4j13r-9} 0] (#26# #21#)] #f]]] uninitialized uninitialized uninitialized] #53# uninitialized] #55=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-65} () () #f (#44#) 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43#] #f] uninitialized])
                                              (#44# #45# #46# #48# #50#
                                                #52# #53# #55#))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#56=#{n a5dids9skwzdhr1md4j13r-3}
                                                     #57=#{t a5dids9skwzdhr1md4j13r-25}
                                                     #58=#{t a5dids9skwzdhr1md4j13r-16}
                                                     #59=#{t a5dids9skwzdhr1md4j13r-22}
                                                     #60=#{t a5dids9skwzdhr1md4j13r-15}
                                                     #61=#{t a5dids9skwzdhr1md4j13r-23}
                                                     #62=#{t a5dids9skwzdhr1md4j13r-18}
                                                     #63=#{t a5dids9skwzdhr1md4j13r-24})
                                              (#64=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #54# (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #56# #26#]) () #f (#65=#[#{joto-block pfwewp4o1ot9y43qsci5xntr9-6120} #{docall a5dids9skwzdhr1md4j13r-80} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #66=#{rpl a5dids9skwzdhr1md4j13r-41} 32]]) () #f (#67=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-79} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #59#]) () #f (#68=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-85} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #58#]) () #f (#69=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-75} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #58# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# \x2D;/ovfl (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]]) () #f (#70=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-74} () () #f (#71=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #72=#{mrvl a5dids9skwzdhr1md4j13r-39} (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #73=#<info>]) () #f (#74=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #75=#{rpl a5dids9skwzdhr1md4j13r-38} (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #73# #75# #72# ()]) () #f (#76=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-72} () () #f (#77=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-71} (#[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#78=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #79=#{rpl a5dids9skwzdhr1md4j13r-37} (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #80=#<info> #79# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #57# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #80#]) () #f (#81=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-91} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82=%rdi #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]]) () #f (#83=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #84=#{mrvl a5dids9skwzdhr1md4j13r-36} (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #85=#<info>]) () #f (#86=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #87=#{rpl a5dids9skwzdhr1md4j13r-35} (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #85# #87# #84# ()]) () #f (#88=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-89} () () #f (#89=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-88} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#90=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-69} () () #f (#64#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #77# #89# uninitialized]) 1 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #88# #81# uninitialized]) 1 #f uninitialized 0 #f #f #f #85# #91=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-90} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #87# 32]]) () #f (#88#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #86# uninitialized uninitialized uninitialized]) 9 #f uninitialized 0 #f #f #f #83#]) 1 #f uninitialized 0 #f #f #f #81#] #89#) 1 #f uninitialized 0 #f #f #f #80# #92=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-92} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #79# 32]]) () #f (#81#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec = 34827)>] (#26# #82# #21#)] #f] () #78# uninitialized uninitialized uninitialized]) 9 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#57# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 6])] #77# #93=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-68} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f (#78# #64#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] uninitialized] #90#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #76# #70# uninitialized]) 1 #f uninitialized 0 #f #f #f #73# #94=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-73} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #75# 32]]) () #f (#76#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21#)] #f] () #74# uninitialized uninitialized uninitialized]) 9 #f uninitialized 0 #f #f #f #71#]) 1 #f uninitialized 0 #f #f #f #70#] #77#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #69# #95=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{Lfail a5dids9skwzdhr1md4j13r-17} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f (#69# #70#) 1 #f uninitialized 0 #f #f #f #96=#<info> #97=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-77} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #98=#{rpl a5dids9skwzdhr1md4j13r-40} 32]]) () #f (#95#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec - 34838)>] (#26# #82# #21#)] #f] () #99=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #98# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #96# #98# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #96#]) () #f (#95#) 9 #f uninitialized 0 #f #f #f #67#] uninitialized uninitialized uninitialized] uninitialized]) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #95# #68# uninitialized]) 0 #f uninitialized 0 #f #f #f #67#] #99#) 0 #f uninitialized 0 #f #f #f #100=#<info> #65# () #101=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #66# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #100# #66# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #60# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #100#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #63# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# logor (#56# #60#)]]) () #f (#67#) 8 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#63# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #102=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-81} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #61# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# sra (#60# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #62# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# */ovfl (#56# #61#)]]) () #f (#101#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #103=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{Lfail a5dids9skwzdhr1md4j13r-19} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82# #60#]) () #f (#102# #101#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec * 34840)>] (#26# #82# #21#)] #f] #104=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-83} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #62#]) () #f (#102#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] uninitialized] #103# uninitialized] uninitialized uninitialized uninitialized]) 0 #f uninitialized 0 #f #f #f () #64#]) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #93# #90# uninitialized]
                                                #64#)
                                              (#64# #90# #89# #88# #91#
                                               #86# #83# #81# #92# #78#
                                               #93# #77# #76# #94# #74#
                                               #71# #70# #69# #95# #97#
                                               #99# #68# #67# #65# #101#
                                               #102# #103# #104#))]
         [#105=#{main a5dids9skwzdhr1md4j13r-13} (lambda (#106=#{t a5dids9skwzdhr1md4j13r-5}
                                                          #107=#{t a5dids9skwzdhr1md4j13r-20}
                                                          #108=#{g0 a5dids9skwzdhr1md4j13r-0}
                                                          #109=#{swap a5dids9skwzdhr1md4j13r-1})
                                                   (#110=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-28} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #111=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-97} () () #f (#110#) 1 #f uninitialized 0 #f #f #f #112=#<info> #113=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-98} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #114=#{rpl a5dids9skwzdhr1md4j13r-42} 32]]) () #f (#111#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #115=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #114# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #112# #114# #116=#{mrvl a5dids9skwzdhr1md4j13r-43} ()]) () #f (#111#) 9 #f uninitialized 0 #f #f #f #117=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #116# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #112#]) () #f (#115#) 1 #f uninitialized 0 #f #f #f #118=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-99} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #106# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119=+ (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -7])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f (#117# #110#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #120=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-44} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121=asmlibcall ()]]) () #f (#118#) 1 #f uninitialized 0 #f #f #f #122=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-101} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #107# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 7] #106#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 15] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 30]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #108# #107#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f (#120# #118#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #123=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-45} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121# ()]]) () #f (#122#) 1 #f uninitialized 0 #f #f #f #124=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-103} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #109# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 3] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #0# 65]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 11] #108#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #125=fv1 #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 14]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82# #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #126=%rsi #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #{anon a5dids9skwzdhr1md4j13r-11}>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal dynamic-wind>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 4]]) () #f (#123# #122#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #82# #126# #21# #125#)] #f]] #124# uninitialized]] #122# uninitialized]]] uninitialized uninitialized uninitialized] #118# uninitialized])
                                                   (#110# #111# #113# #115#
                                                     #117# #118# #120#
                                                     #122# #123# #124#))])
  (#105#))
output of np-compute-loop-depth!:
Warning in pretty-print: cycle detected; proceeding with (print-graph #t)
(letrec ([#0=#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#1=#{cp a5dids9skwzdhr1md4j13r-7}
                                                        #2=#{g1 a5dids9skwzdhr1md4j13r-4}
                                                        #3=#{t a5dids9skwzdhr1md4j13r-14}
                                                        #4=#{t a5dids9skwzdhr1md4j13r-21})
                                                 (#5=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-46} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6=#<info> #7=eq? (#8=%ac0 #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #9=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-26} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #1# #10=%cp] #[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11=%tc #12=zero 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13=\x2D;/eq (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#5#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14=#<info> #15=condition-code ()] #16=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-48} () () #f (#9#) 1 #f uninitialized 0 #f #f #f #17=#<info> #18=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-49} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19=%sfp #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #20=#{rpl a5dids9skwzdhr1md4j13r-29} 32]]) () #f (#16#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21=fv0)] #f] () #22=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #20# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #17# #20# #23=#{mrvl a5dids9skwzdhr1md4j13r-30} ()]) () #f (#16#) 9 #f uninitialized 0 #f #f #f #24=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #23# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #17#]) () #f (#22#) 1 #f uninitialized 0 #f #f #f #25=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-50} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #2# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 568]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #4# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26=%r8 #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #4# #12# 7]]) () #f (#24# #9#) 0 #f uninitialized 0 #f #f #f #27=#<info> #28=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-51} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29=%xp #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal optimize-level>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #30=#{rpl a5dids9skwzdhr1md4j13r-31} 32]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1]]) () #f (#25#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #21#)] #f] () #31=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #30# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #27# #30# #32=#{mrvl a5dids9skwzdhr1md4j13r-32} ()]) () #f (#25#) 8 #f uninitialized 0 #f #f #f #33=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #32# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #27#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #3# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> lea1 (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #3# #12# 0] #2#]) () #f (#31#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34=log!test (#2# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #35=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-52} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f (#33#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #36=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-53} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37=%td #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f (#33#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38=u< (#39=%ap #37#)] #40=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-55} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# - (#37# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #37#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #37# #12# 0] #3#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f (#41=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-56} (#[#{L15a:inline:Effect.1126 pfwewp4o1ot9y43qsci5xntr9-6129} 151 #<live-info> #<info> asmlibcall! ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f (#36#) 1 #f uninitialized 0 #f #f #f #40#] #36#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #41# uninitialized] uninitialized]] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized] #25# uninitialized] #42=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-58} () () #f (#5#) 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43=doargerr] #f] uninitialized])
                                                 (#5# #9# #16# #18# #22# #24#
                                                      #25# #28# #31# #33#
                                                      #35# #36# #41# #40#
                                                      #42#))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda ()
                                              (#44=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-59} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #45=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-27} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#44#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #46=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-61} () () #f (#45#) 1 #f uninitialized 0 #f #f #f #47=#<info> #48=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-62} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #49=#{rpl a5dids9skwzdhr1md4j13r-33} 32]]) () #f (#46#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #50=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #49# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #47# #49# #51=#{mrvl a5dids9skwzdhr1md4j13r-34} ()]) () #f (#46#) 9 #f uninitialized 0 #f #f #f #52=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #51# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #47#]) () #f (#50#) 1 #f uninitialized 0 #f #f #f #53=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-63} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 40]]) () #f (#52# #45#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #54=#{dcl a5dids9skwzdhr1md4j13r-9} 0] (#26# #21#)] #f]]] uninitialized uninitialized uninitialized] #53# uninitialized] #55=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-65} () () #f (#44#) 1 #f uninitialized 0 #f #f #f #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43#] #f] uninitialized])
                                              (#44# #45# #46# #48# #50#
                                                #52# #53# #55#))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#56=#{n a5dids9skwzdhr1md4j13r-3}
                                                     #57=#{t a5dids9skwzdhr1md4j13r-25}
                                                     #58=#{t a5dids9skwzdhr1md4j13r-16}
                                                     #59=#{t a5dids9skwzdhr1md4j13r-22}
                                                     #60=#{t a5dids9skwzdhr1md4j13r-15}
                                                     #61=#{t a5dids9skwzdhr1md4j13r-23}
                                                     #62=#{t a5dids9skwzdhr1md4j13r-18}
                                                     #63=#{t a5dids9skwzdhr1md4j13r-24})
                                              (#64=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #54# (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #56# #26#]) () #f (#65=#[#{joto-block pfwewp4o1ot9y43qsci5xntr9-6120} #{docall a5dids9skwzdhr1md4j13r-80} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #66=#{rpl a5dids9skwzdhr1md4j13r-41} 32]]) () #f (#67=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-79} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #59#]) () #f (#68=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-85} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #58#]) () #f (#69=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-75} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #58# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# \x2D;/ovfl (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]]) () #f (#70=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-74} () () #f (#71=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #72=#{mrvl a5dids9skwzdhr1md4j13r-39} (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #73=#<info>]) () #f (#74=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #75=#{rpl a5dids9skwzdhr1md4j13r-38} (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #73# #75# #72# ()]) () #f (#76=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-72} () () #f (#77=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-71} (#[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#78=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #79=#{rpl a5dids9skwzdhr1md4j13r-37} (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #80=#<info> #79# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #57# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #80#]) () #f (#81=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-91} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82=%rdi #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]]) () #f (#83=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #84=#{mrvl a5dids9skwzdhr1md4j13r-36} (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #85=#<info>]) () #f (#86=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #87=#{rpl a5dids9skwzdhr1md4j13r-35} (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #85# #87# #84# ()]) () #f (#88=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-89} () () #f (#89=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-88} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#90=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-69} () () #f (#64#) 0 #f uninitialized 1 1 #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #77# #89# uninitialized]) 1 #f uninitialized 1 1 #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #88# #81# uninitialized]) 1 #f uninitialized 1 1 #f #f #85# #91=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-90} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #87# 32]]) () #f (#88#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #86# uninitialized uninitialized uninitialized]) 9 #f uninitialized 1 1 #f #f #83#]) 1 #f uninitialized 1 1 #f #f #81#] #89#) 1 #f uninitialized 1 1 #f #f #80# #92=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-92} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #79# 32]]) () #f (#81#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec = 34827)>] (#26# #82# #21#)] #f] () #78# uninitialized uninitialized uninitialized]) 9 #f uninitialized 1 1 #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#57# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 6])] #77# #93=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-68} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f (#78# #64#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] uninitialized] #90#) 0 #f uninitialized 1 1 #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #76# #70# uninitialized]) 1 #f uninitialized 1 1 #f #f #73# #94=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-73} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #75# 32]]) () #f (#76#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21#)] #f] () #74# uninitialized uninitialized uninitialized]) 9 #f uninitialized 1 1 #f #f #71#]) 1 #f uninitialized 1 1 #f #f #70#] #77#) 0 #f uninitialized 1 1 #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #69# #95=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{Lfail a5dids9skwzdhr1md4j13r-17} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f (#69# #70#) 1 #f uninitialized 1 1 #f #f #96=#<info> #97=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-77} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #98=#{rpl a5dids9skwzdhr1md4j13r-40} 32]]) () #f (#95#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec - 34838)>] (#26# #82# #21#)] #f] () #99=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #98# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #96# #98# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #96#]) () #f (#95#) 9 #f uninitialized 1 1 #f #f #67#] uninitialized uninitialized uninitialized] uninitialized]) 0 #f uninitialized 1 1 #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #95# #68# uninitialized]) 0 #f uninitialized 1 1 #f #f #67#] #99#) 0 #f uninitialized 1 1 #f #f #100=#<info> #65# () #101=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #66# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #100# #66# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #60# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #100#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #63# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# logor (#56# #60#)]]) () #f (#67#) 8 #f uninitialized 0 0 #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#63# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #102=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-81} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #61# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# sra (#60# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #62# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# */ovfl (#56# #61#)]]) () #f (#101#) 0 #f uninitialized 0 0 #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #103=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{Lfail a5dids9skwzdhr1md4j13r-19} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82# #60#]) () #f (#102# #101#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec * 34840)>] (#26# #82# #21#)] #f] #104=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-83} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #62#]) () #f (#102#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] uninitialized] #103# uninitialized] uninitialized uninitialized uninitialized]) 0 #f uninitialized 1 1 #f #f () #64#]) 32 #f uninitialized 1 0 0 #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #93# #90# uninitialized]
                                                #64#)
                                              (#64# #90# #89# #88# #91#
                                               #86# #83# #81# #92# #78#
                                               #93# #77# #76# #94# #74#
                                               #71# #70# #69# #95# #97#
                                               #99# #68# #67# #65# #101#
                                               #102# #103# #104#))]
         [#105=#{main a5dids9skwzdhr1md4j13r-13} (lambda (#106=#{t a5dids9skwzdhr1md4j13r-5}
                                                          #107=#{t a5dids9skwzdhr1md4j13r-20}
                                                          #108=#{g0 a5dids9skwzdhr1md4j13r-0}
                                                          #109=#{swap a5dids9skwzdhr1md4j13r-1})
                                                   (#110=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-28} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #111=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-97} () () #f (#110#) 1 #f uninitialized 0 #f #f #f #112=#<info> #113=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-98} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #114=#{rpl a5dids9skwzdhr1md4j13r-42} 32]]) () #f (#111#) 1 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #115=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #114# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #112# #114# #116=#{mrvl a5dids9skwzdhr1md4j13r-43} ()]) () #f (#111#) 9 #f uninitialized 0 #f #f #f #117=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #116# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #112#]) () #f (#115#) 1 #f uninitialized 0 #f #f #f #118=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-99} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #106# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119=+ (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -7])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f (#117# #110#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #120=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-44} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121=asmlibcall ()]]) () #f (#118#) 1 #f uninitialized 0 #f #f #f #122=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-101} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #107# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 7] #106#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 15] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 30]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #108# #107#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f (#120# #118#) 0 #f uninitialized 0 #f #f #f #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #123=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-45} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121# ()]]) () #f (#122#) 1 #f uninitialized 0 #f #f #f #124=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-103} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #109# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 3] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #0# 65]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 11] #108#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #125=fv1 #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 14]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82# #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #126=%rsi #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #{anon a5dids9skwzdhr1md4j13r-11}>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal dynamic-wind>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 4]]) () #f (#123# #122#) 0 #f uninitialized 0 #f #f #f #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #82# #126# #21# #125#)] #f]] #124# uninitialized]] #122# uninitialized]]] uninitialized uninitialized uninitialized] #118# uninitialized])
                                                   (#110# #111# #113# #115#
                                                     #117# #118# #120#
                                                     #122# #123# #124#))])
  (#105#))
output of np-weight-references!:
Warning in pretty-print: cycle detected; proceeding with (print-graph #t)
(letrec ([#0=#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#1=#{cp a5dids9skwzdhr1md4j13r-7}
                                                        #2=#{g1 a5dids9skwzdhr1md4j13r-4}
                                                        #3=#{t a5dids9skwzdhr1md4j13r-14}
                                                        #4=#{t a5dids9skwzdhr1md4j13r-21})
                                                 (#5=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-46} () () #f () 0 #f uninitialized 0 #f #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6=#<info> #7=eq? (#8=%ac0 #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #9=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-26} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #1# #10=%cp] #[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11=%tc #12=zero 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13=\x2D;/eq (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#5#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14=#<info> #15=condition-code ()] #16=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-48} () () #f (#9#) 1 #f uninitialized 0 #f #f 0 #17=#<info> #18=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-49} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19=%sfp #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #20=#{rpl a5dids9skwzdhr1md4j13r-29} 32]]) () #f (#16#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21=fv0)] #f] () #22=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #20# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #17# #20# #23=#{mrvl a5dids9skwzdhr1md4j13r-30} ()]) () #f (#16#) 9 #f uninitialized 0 #f #f 0 #24=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #23# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #17#]) () #f (#22#) 1 #f uninitialized 0 #f #f 0 #25=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-50} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #2# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 568]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #4# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26=%r8 #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #4# #12# 7]]) () #f (#24# #9#) 0 #f uninitialized 0 #f #f 1 #27=#<info> #28=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-51} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29=%xp #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal optimize-level>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #30=#{rpl a5dids9skwzdhr1md4j13r-31} 32]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1]]) () #f (#25#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #21#)] #f] () #31=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #30# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #27# #30# #32=#{mrvl a5dids9skwzdhr1md4j13r-32} ()]) () #f (#25#) 8 #f uninitialized 0 #f #f 1 #33=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #32# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #27#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #3# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> lea1 (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #1# #12# 11])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #3# #12# 0] #2#]) () #f (#31#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34=log!test (#2# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #35=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-52} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f (#33#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #36=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-53} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37=%td #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f (#33#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38=u< (#39=%ap #37#)] #40=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-55} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# - (#37# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #37#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #37# #12# 0] #3#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 62]]) () #f (#41=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-56} (#[#{L15a:inline:Effect.1126 pfwewp4o1ot9y43qsci5xntr9-6129} 151 #<live-info> #<info> asmlibcall! ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #37# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88]]) () #f (#36#) 1 #f uninitialized 0 #f #f 0 #40#] #36#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] #41# uninitialized] uninitialized]] uninitialized uninitialized uninitialized]]] uninitialized uninitialized uninitialized] #25# uninitialized] #42=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-58} () () #f (#5#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43=doargerr] #f] uninitialized])
                                                 (#5# #9# #16# #18# #22# #24#
                                                      #25# #28# #31# #33#
                                                      #35# #36# #41# #40#
                                                      #42#))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda ()
                                              (#44=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-59} () () #f () 0 #f uninitialized 0 #f #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #45=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-27} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#44#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #46=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-61} () () #f (#45#) 1 #f uninitialized 0 #f #f 0 #47=#<info> #48=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-62} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #49=#{rpl a5dids9skwzdhr1md4j13r-33} 32]]) () #f (#46#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #50=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #49# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #47# #49# #51=#{mrvl a5dids9skwzdhr1md4j13r-34} ()]) () #f (#46#) 9 #f uninitialized 0 #f #f 0 #52=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #51# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #47#]) () #f (#50#) 1 #f uninitialized 0 #f #f 0 #53=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-63} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 40]]) () #f (#52# #45#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #54=#{dcl a5dids9skwzdhr1md4j13r-9} 0] (#26# #21#)] #f]]] uninitialized uninitialized uninitialized] #53# uninitialized] #55=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-65} () () #f (#44#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:goto:Tail.1128 pfwewp4o1ot9y43qsci5xntr9-6137} 24 #43#] #f] uninitialized])
                                              (#44# #45# #46# #48# #50#
                                                #52# #53# #55#))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#56=#{n a5dids9skwzdhr1md4j13r-3}
                                                     #57=#{t a5dids9skwzdhr1md4j13r-25}
                                                     #58=#{t a5dids9skwzdhr1md4j13r-16}
                                                     #59=#{t a5dids9skwzdhr1md4j13r-22}
                                                     #60=#{t a5dids9skwzdhr1md4j13r-15}
                                                     #61=#{t a5dids9skwzdhr1md4j13r-23}
                                                     #62=#{t a5dids9skwzdhr1md4j13r-18}
                                                     #63=#{t a5dids9skwzdhr1md4j13r-24})
                                              (#64=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #54# (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #56# #26#]) () #f (#65=#[#{joto-block pfwewp4o1ot9y43qsci5xntr9-6120} #{docall a5dids9skwzdhr1md4j13r-80} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #66=#{rpl a5dids9skwzdhr1md4j13r-41} 32]]) () #f (#67=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-79} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #59#]) () #f (#68=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-85} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #58#]) () #f (#69=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-75} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #58# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# \x2D;/ovfl (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8])]]) () #f (#70=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-74} () () #f (#71=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #72=#{mrvl a5dids9skwzdhr1md4j13r-39} (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #73=#<info>]) () #f (#74=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #75=#{rpl a5dids9skwzdhr1md4j13r-38} (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #73# #75# #72# ()]) () #f (#76=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-72} () () #f (#77=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-71} (#[#{L15a:overflow-check:Effect.1118 pfwewp4o1ot9y43qsci5xntr9-6140} 23 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#78=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #79=#{rpl a5dids9skwzdhr1md4j13r-37} (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #80=#<info> #79# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #57# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #80#]) () #f (#81=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-91} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82=%rdi #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]]) () #f (#83=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #84=#{mrvl a5dids9skwzdhr1md4j13r-36} (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #85=#<info>]) () #f (#86=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #87=#{rpl a5dids9skwzdhr1md4j13r-35} (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #85# #87# #84# ()]) () #f (#88=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-89} () () #f (#89=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-88} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f (#90=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-69} () () #f (#64#) 0 #f uninitialized 1 1 #f 4 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #77# #89# uninitialized]) 1 #f uninitialized 1 1 #f 0 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #88# #81# uninitialized]) 1 #f uninitialized 1 1 #f 0 #85# #91=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-90} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #87# 32]]) () #f (#88#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #86# uninitialized uninitialized uninitialized]) 9 #f uninitialized 1 1 #f 0 #83#]) 1 #f uninitialized 1 1 #f 0 #81#] #89#) 1 #f uninitialized 1 1 #f 0 #80# #92=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-92} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #79# 32]]) () #f (#81#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec = 34827)>] (#26# #82# #21#)] #f] () #78# uninitialized uninitialized uninitialized]) 9 #f uninitialized 1 1 #f 0 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#57# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 6])] #77# #93=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-68} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f (#78# #64#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] uninitialized] #90#) 0 #f uninitialized 1 1 #f 4 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #76# #70# uninitialized]) 1 #f uninitialized 1 1 #f 0 #73# #94=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-73} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #75# 32]]) () #f (#76#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32814)>] (#21#)] #f] () #74# uninitialized uninitialized uninitialized]) 9 #f uninitialized 1 1 #f 0 #71#]) 1 #f uninitialized 1 1 #f 0 #70#] #77#) 0 #f uninitialized 1 1 #f 4 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #69# #95=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{Lfail a5dids9skwzdhr1md4j13r-17} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 8]]) () #f (#69# #70#) 1 #f uninitialized 1 1 #f 0 #96=#<info> #97=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-77} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #98=#{rpl a5dids9skwzdhr1md4j13r-40} 32]]) () #f (#95#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec - 34838)>] (#26# #82# #21#)] #f] () #99=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #98# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #96# #98# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #59# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #96#]) () #f (#95#) 9 #f uninitialized 1 1 #f 0 #67#] uninitialized uninitialized uninitialized] uninitialized]) 0 #f uninitialized 1 1 #f 4 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #95# #68# uninitialized]) 0 #f uninitialized 1 1 #f 4 #67#] #99#) 0 #f uninitialized 1 1 #f 4 #100=#<info> #65# () #101=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #66# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #100# #66# #f ()] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #60# #8#] #[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #100#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #63# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# logor (#56# #60#)]]) () #f (#67#) 8 #f uninitialized 0 0 #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #34# (#63# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 7])] #102=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-81} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #61# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# sra (#60# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #62# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# */ovfl (#56# #61#)]]) () #f (#101#) 0 #f uninitialized 0 0 #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #<info> #15# ()] #103=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{Lfail a5dids9skwzdhr1md4j13r-19} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #56#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82# #60#]) () #f (#102# #101#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec * 34840)>] (#26# #82# #21#)] #f] #104=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-83} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #62#]) () #f (#102#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #21# (#8#)] #f] uninitialized] #103# uninitialized] uninitialized uninitialized uninitialized]) 0 #f uninitialized 1 1 #f 4 () #64#]) 32 #f uninitialized 1 0 0 4 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #7# (#56# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0])] #93# #90# uninitialized]
                                                #64#)
                                              (#64# #90# #89# #88# #91#
                                               #86# #83# #81# #92# #78#
                                               #93# #77# #76# #94# #74#
                                               #71# #70# #69# #95# #97#
                                               #99# #68# #67# #65# #101#
                                               #102# #103# #104#))]
         [#105=#{main a5dids9skwzdhr1md4j13r-13} (lambda (#106=#{t a5dids9skwzdhr1md4j13r-5}
                                                          #107=#{t a5dids9skwzdhr1md4j13r-20}
                                                          #108=#{g0 a5dids9skwzdhr1md4j13r-0}
                                                          #109=#{swap a5dids9skwzdhr1md4j13r-1})
                                                   (#110=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-28} (#[#{L15a:overflood-check:Effect.1119 pfwewp4o1ot9y43qsci5xntr9-6141} 39 #<live-info>] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #13# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 104] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 1])]]) () #f () 0 #f uninitialized 0 #f #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #14# #15# ()] #111=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-97} () () #f (#110#) 1 #f uninitialized 0 #f #f 0 #112=#<info> #113=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-98} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #19# #12# 0] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #114=#{rpl a5dids9skwzdhr1md4j13r-42} 32]]) () #f (#111#) 1 #f uninitialized 0 #f #f 0 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #(libspec event 32815)>] (#21#)] #f] () #115=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #114# (#[#{L15a:return-point:Effect.1121 pfwewp4o1ot9y43qsci5xntr9-6143} 71 #112# #114# #116=#{mrvl a5dids9skwzdhr1md4j13r-43} ()]) () #f (#111#) 9 #f uninitialized 0 #f #f 0 #117=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #116# (#[#{L15a:remove-frame:Effect.1123 pfwewp4o1ot9y43qsci5xntr9-6145} 103 #<live-info> #112#]) () #f (#115#) 1 #f uninitialized 0 #f #f 0 #118=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-99} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #106# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 0]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119=+ (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -7])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f (#117# #110#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #120=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-44} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121=asmlibcall ()]]) () #f (#118#) 1 #f uninitialized 0 #f #f 0 #122=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-101} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #107# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 7] #106#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #107# #12# 15] #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 30]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #108# #107#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 -3])]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #39# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #6# #119# (#39# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 16])]]) () #f (#120# #118#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:inline:Pred.1117 pfwewp4o1ot9y43qsci5xntr9-6149} 22 #<live-info> #6# #38# (#[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #11# #12# 88] #39#)] #123=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-45} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:inline:Rhs.1116 pfwewp4o1ot9y43qsci5xntr9-6150} 21 #<info> #121# ()]]) () #f (#122#) 1 #f uninitialized 0 #f #f 0 #124=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-103} (#[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #109# #29#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 3] #[#{L15a:label-ref:Triv.1115 pfwewp4o1ot9y43qsci5xntr9-6151} 52 #0# 65]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #109# #12# 11] #108#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #125=fv1 #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #26# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 14]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #82# #109#] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #126=%rsi #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal #{anon a5dids9skwzdhr1md4j13r-11}>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #29# #[#{L15a:literal:Triv.1113 pfwewp4o1ot9y43qsci5xntr9-6126} 20 #<literal dynamic-wind>]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #10# #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 5]] #[#{L15a:set!:Effect.1125 pfwewp4o1ot9y43qsci5xntr9-6147} 135 #<live-info> #8# #[#{L15a:immediate:Triv.1114 pfwewp4o1ot9y43qsci5xntr9-6127} 36 4]]) () #f (#123# #122#) 0 #f uninitialized 0 #f #f 1 #[#{L15a:jump:Tail.1129 pfwewp4o1ot9y43qsci5xntr9-6138} 40 #<live-info> #[#{L15a:mref:Lvalue.1112 pfwewp4o1ot9y43qsci5xntr9-6152} 19 #29# #12# 13] (#8# #10# #26# #82# #126# #21# #125#)] #f]] #124# uninitialized]] #122# uninitialized]]] uninitialized uninitialized uninitialized] #118# uninitialized])
                                                   (#110# #111# #113# #115#
                                                     #117# #118# #120#
                                                     #122# #123# #124#))])
  (#105#))
output of do-live-analysis!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (overflood-check <live: %r8 fv0>)
   (set! <live: fv0> n.3 %r8)
   (if (inline <live: fv0 n.3> #<info> eq? n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.35 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.35 (depth = 1, pariah):
   (return-point #<info> rpl.35 mrvl.36 ())
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.37 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec = 34827)> (%r8 %rdi fv0))
rpl.37 (depth = 1, pariah):
   (return-point #<info> rpl.37 #f ())
   (set! <live: fv0 n.3> t.25 %ac0)
   (remove-frame <live: fv0 t.25 n.3> #<info>)
   (if (inline <live: fv0 n.3> #<info> eq? t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump <live: %ac0> fv0 (%ac0))
lf.71 (depth = 1):
   (overflow-check <live: fv0 n.3>)
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.38 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.38 (depth = 1, pariah):
   (return-point #<info> rpl.38 mrvl.39 ())
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.74")
ej.74 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> t.16 (inline #<info> \x2D;/ovfl n.3 8))
   (if (inline <live: fv0 t.16 n.3> #<info> condition-code) (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.40 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec - 34838)> (%r8 %rdi fv0))
rpl.40 (depth = 1, pariah):
   (return-point #<info> rpl.40 #f ())
   (set! <live: fv0 n.3> t.22 %ac0)
   (remove-frame <live: fv0 t.22 n.3> #<info>)
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> (mref %sfp zero 0) (label-ref rpl.41 32))
   (joto "dcl.9")
rpl.41 (depth = 0):
   (return-point #<info> rpl.41 #f ())
   (set! <live: fv0 n.3> t.15 %ac0)
   (remove-frame <live: fv0 t.15 n.3> #<info>)
   (set! <live: fv0 t.15 n.3> t.24 (inline #<info> logor n.3 t.15))
   (if (inline <live: fv0 t.15 n.3> #<info> log!test t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> t.23 (inline #<info> sra t.15 3))
   (set! <live: fv0 t.15 n.3> t.18 (inline #<info> */ovfl n.3 t.23))
   (if (inline <live: fv0 t.18 t.15 n.3> #<info> condition-code) (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump <live: %rdi %r8 fv0> #<literal #(libspec * 34840)> (%r8 %rdi fv0))
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump <live: %ac0> fv0 (%ac0))
output of record-call-live!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (overflood-check <live: %r8 fv0>)
   (set! <live: fv0> n.3 %r8)
   (if (inline <live: fv0 n.3> #<info> eq? n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.35 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.35 (depth = 1, pariah):
   (return-point #<info> rpl.35 mrvl.36 ())
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.37 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec = 34827)> (%r8 %rdi fv0))
rpl.37 (depth = 1, pariah):
   (return-point #<info> rpl.37 #f ())
   (set! <live: fv0 n.3> t.25 %ac0)
   (remove-frame <live: fv0 t.25 n.3> #<info>)
   (if (inline <live: fv0 n.3> #<info> eq? t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump <live: %ac0> fv0 (%ac0))
lf.71 (depth = 1):
   (overflow-check <live: fv0 n.3>)
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.38 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.38 (depth = 1, pariah):
   (return-point #<info> rpl.38 mrvl.39 ())
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.74")
ej.74 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> t.16 (inline #<info> \x2D;/ovfl n.3 8))
   (if (inline <live: fv0 t.16 n.3> #<info> condition-code) (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.40 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec - 34838)> (%r8 %rdi fv0))
rpl.40 (depth = 1, pariah):
   (return-point #<info> rpl.40 #f ())
   (set! <live: fv0 n.3> t.22 %ac0)
   (remove-frame <live: fv0 t.22 n.3> #<info>)
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> (mref %sfp zero 0) (label-ref rpl.41 32))
   (joto "dcl.9")
rpl.41 (depth = 0):
   (return-point #<info> rpl.41 #f ())
   (set! <live: fv0 n.3> t.15 %ac0)
   (remove-frame <live: fv0 t.15 n.3> #<info>)
   (set! <live: fv0 t.15 n.3> t.24 (inline #<info> logor n.3 t.15))
   (if (inline <live: fv0 t.15 n.3> #<info> log!test t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> t.23 (inline #<info> sra t.15 3))
   (set! <live: fv0 t.15 n.3> t.18 (inline #<info> */ovfl n.3 t.23))
   (if (inline <live: fv0 t.18 t.15 n.3> #<info> condition-code) (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump <live: %rdi %r8 fv0> #<literal #(libspec * 34840)> (%r8 %rdi fv0))
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump <live: %ac0> fv0 (%ac0))
output of do-spillable-conflict!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (overflood-check <live: %r8 fv0>)
   (set! <live: fv0> n.3 %r8)
   (if (inline <live: fv0 n.3> #<info> eq? n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.35 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.35 (depth = 1, pariah):
   (return-point #<info> rpl.35 mrvl.36 ())
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.37 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec = 34827)> (%r8 %rdi fv0))
rpl.37 (depth = 1, pariah):
   (return-point #<info> rpl.37 #f ())
   (set! <live: fv0 n.3> t.25 %ac0)
   (remove-frame <live: fv0 t.25 n.3> #<info>)
   (if (inline <live: fv0 n.3> #<info> eq? t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump <live: %ac0> fv0 (%ac0))
lf.71 (depth = 1):
   (overflow-check <live: fv0 n.3>)
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.38 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.38 (depth = 1, pariah):
   (return-point #<info> rpl.38 mrvl.39 ())
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.74")
ej.74 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> t.16 (inline #<info> \x2D;/ovfl n.3 8))
   (if (inline <live: fv0 t.16 n.3> #<info> condition-code) (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.40 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec - 34838)> (%r8 %rdi fv0))
rpl.40 (depth = 1, pariah):
   (return-point #<info> rpl.40 #f ())
   (set! <live: fv0 n.3> t.22 %ac0)
   (remove-frame <live: fv0 t.22 n.3> #<info>)
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> (mref %sfp zero 0) (label-ref rpl.41 32))
   (joto "dcl.9")
rpl.41 (depth = 0):
   (return-point #<info> rpl.41 #f ())
   (set! <live: fv0 n.3> t.15 %ac0)
   (remove-frame <live: fv0 t.15 n.3> #<info>)
   (set! <live: fv0 t.15 n.3> t.24 (inline #<info> logor n.3 t.15))
   (if (inline <live: fv0 t.15 n.3> #<info> log!test t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> t.23 (inline #<info> sra t.15 3))
   (set! <live: fv0 t.15 n.3> t.18 (inline #<info> */ovfl n.3 t.23))
   (if (inline <live: fv0 t.18 t.15 n.3> #<info> condition-code) (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump <live: %rdi %r8 fv0> #<literal #(libspec * 34840)> (%r8 %rdi fv0))
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump <live: %ac0> fv0 (%ac0))
output of assign-frame!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (overflood-check <live: %r8 fv0>)
   (set! <live: fv0> n.3 %r8)
   (if (inline <live: fv0 n.3> #<info> eq? n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.35 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.35 (depth = 1, pariah):
   (return-point #<info> rpl.35 mrvl.36 ())
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.37 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec = 34827)> (%r8 %rdi fv0))
rpl.37 (depth = 1, pariah):
   (return-point #<info> rpl.37 #f ())
   (set! <live: fv0 n.3> t.25 %ac0)
   (remove-frame <live: fv0 t.25 n.3> #<info>)
   (if (inline <live: fv0 n.3> #<info> eq? t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump <live: %ac0> fv0 (%ac0))
lf.71 (depth = 1):
   (overflow-check <live: fv0 n.3>)
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.38 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.38 (depth = 1, pariah):
   (return-point #<info> rpl.38 mrvl.39 ())
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.74")
ej.74 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> t.16 (inline #<info> \x2D;/ovfl n.3 8))
   (if (inline <live: fv0 t.16 n.3> #<info> condition-code) (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.40 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec - 34838)> (%r8 %rdi fv0))
rpl.40 (depth = 1, pariah):
   (return-point #<info> rpl.40 #f ())
   (set! <live: fv0 n.3> t.22 %ac0)
   (remove-frame <live: fv0 t.22 n.3> #<info>)
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> (mref %sfp zero 0) (label-ref rpl.41 32))
   (joto "dcl.9")
rpl.41 (depth = 0):
   (return-point #<info> rpl.41 #f ())
   (set! <live: fv0 n.3> t.15 %ac0)
   (remove-frame <live: fv0 t.15 n.3> #<info>)
   (set! <live: fv0 t.15 n.3> t.24 (inline #<info> logor n.3 t.15))
   (if (inline <live: fv0 t.15 n.3> #<info> log!test t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> t.23 (inline #<info> sra t.15 3))
   (set! <live: fv0 t.15 n.3> t.18 (inline #<info> */ovfl n.3 t.23))
   (if (inline <live: fv0 t.18 t.15 n.3> #<info> condition-code) (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump <live: %rdi %r8 fv0> #<literal #(libspec * 34840)> (%r8 %rdi fv0))
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump <live: %ac0> fv0 (%ac0))
output of record-inspector-information!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (overflood-check <live: %r8 fv0>)
   (set! <live: fv0> n.3 %r8)
   (if (inline <live: fv0 n.3> #<info> eq? n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.35 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.35 (depth = 1, pariah):
   (return-point #<info> rpl.35 mrvl.36 ())
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.37 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec = 34827)> (%r8 %rdi fv0))
rpl.37 (depth = 1, pariah):
   (return-point #<info> rpl.37 #f ())
   (set! <live: fv0 n.3> t.25 %ac0)
   (remove-frame <live: fv0 t.25 n.3> #<info>)
   (if (inline <live: fv0 n.3> #<info> eq? t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump <live: %ac0> fv0 (%ac0))
lf.71 (depth = 1):
   (overflow-check <live: fv0 n.3>)
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.38 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.38 (depth = 1, pariah):
   (return-point #<info> rpl.38 mrvl.39 ())
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (remove-frame <live: fv0 n.3> #<info>)
   (goto "ej.74")
ej.74 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> t.16 (inline #<info> \x2D;/ovfl n.3 8))
   (if (inline <live: fv0 t.16 n.3> #<info> condition-code) (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.40 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec - 34838)> (%r8 %rdi fv0))
rpl.40 (depth = 1, pariah):
   (return-point #<info> rpl.40 #f ())
   (set! <live: fv0 n.3> t.22 %ac0)
   (remove-frame <live: fv0 t.22 n.3> #<info>)
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> (mref %sfp zero 0) (label-ref rpl.41 32))
   (joto "dcl.9")
rpl.41 (depth = 0):
   (return-point #<info> rpl.41 #f ())
   (set! <live: fv0 n.3> t.15 %ac0)
   (remove-frame <live: fv0 t.15 n.3> #<info>)
   (set! <live: fv0 t.15 n.3> t.24 (inline #<info> logor n.3 t.15))
   (if (inline <live: fv0 t.15 n.3> #<info> log!test t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> t.23 (inline #<info> sra t.15 3))
   (set! <live: fv0 t.15 n.3> t.18 (inline #<info> */ovfl n.3 t.23))
   (if (inline <live: fv0 t.18 t.15 n.3> #<info> condition-code) (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump <live: %rdi %r8 fv0> #<literal #(libspec * 34840)> (%r8 %rdi fv0))
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump <live: %ac0> fv0 (%ac0))
output of assign-new-frame!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (overflood-check <live: %r8 fv0>)
   (set! <live: fv0> n.3 %r8)
   (if (inline <live: fv0 n.3> #<info> eq? n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (set! <live: fv0 n.3> fv1 n.3)
   (fp-offset <live: fv0 n.3> 16)
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.35 32))
   (jump <live: fv0> #<literal #(libspec event 32815)>)
rpl.35 (depth = 1, pariah):
   (rp-header mrvl.36 16 1)
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (set! <live: fv0> n.3 fv1)
   (fp-offset <live: fv0 n.3> -16)
   (overflood-check <live: fv0 n.3>)
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (set! <live: %rdi %r8 fv0 n.3> fv1 n.3)
   (fp-offset <live: %rdi %r8 fv0 n.3> 16)
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.37 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec = 34827)>)
rpl.37 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.25 %ac0)
   (set! <live: fv0 t.25> n.3 fv1)
   (fp-offset <live: fv0 t.25 n.3> -16)
   (overflood-check <live: fv0 t.25 n.3>)
   (if (inline <live: fv0 n.3> #<info> eq? t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump <live: %ac0> fv0)
lf.71 (depth = 1):
   (overflow-check <live: fv0 n.3>)
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (set! <live: fv0 n.3> fv1 n.3)
   (fp-offset <live: fv0 n.3> 16)
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.38 32))
   (jump <live: fv0> #<literal #(libspec event 32814)>)
rpl.38 (depth = 1, pariah):
   (rp-header mrvl.39 16 1)
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (set! <live: fv0> n.3 fv1)
   (fp-offset <live: fv0 n.3> -16)
   (overflood-check <live: fv0 n.3>)
   (goto "ej.74")
ej.74 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> t.16 (inline #<info> \x2D;/ovfl n.3 8))
   (if (inline <live: fv0 t.16 n.3> #<info> condition-code) (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (set! <live: %rdi %r8 fv0 n.3> fv1 n.3)
   (fp-offset <live: %rdi %r8 fv0 n.3> 16)
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.40 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec - 34838)>)
rpl.40 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.22 %ac0)
   (set! <live: fv0 t.22> n.3 fv1)
   (fp-offset <live: fv0 t.22 n.3> -16)
   (overflood-check <live: fv0 t.22 n.3>)
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (set! <live: %r8 fv0 n.3> fv1 n.3)
   (fp-offset <live: %r8 fv0 n.3> 16)
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> (mref %sfp zero 0) (label-ref rpl.41 32))
   (joto "dcl.9")
rpl.41 (depth = 0):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.15 %ac0)
   (set! <live: fv0 t.15> n.3 fv1)
   (fp-offset <live: fv0 t.15 n.3> -16)
   (overflood-check <live: fv0 t.15 n.3>)
   (set! <live: fv0 t.15 n.3> t.24 (inline #<info> logor n.3 t.15))
   (if (inline <live: fv0 t.15 n.3> #<info> log!test t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> t.23 (inline #<info> sra t.15 3))
   (set! <live: fv0 t.15 n.3> t.18 (inline #<info> */ovfl n.3 t.23))
   (if (inline <live: fv0 t.18 t.15 n.3> #<info> condition-code) (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump <live: %rdi %r8 fv0> #<literal #(libspec * 34840)>)
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump <live: %ac0> fv0)
output of record-fp-offsets!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (overflood-check <live: %r8 fv0>)
   (set! <live: fv0> n.3 %r8)
   (if (inline <live: fv0 n.3> #<info> eq? n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (set! <live: fv0 n.3> fv1 n.3)
   (fp-offset <live: fv0 n.3> 16)
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.35 32))
   (jump <live: fv0> #<literal #(libspec event 32815)>)
rpl.35 (depth = 1, pariah):
   (rp-header mrvl.36 16 1)
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (set! <live: fv0> n.3 fv1)
   (fp-offset <live: fv0 n.3> -16)
   (overflood-check <live: fv0 n.3>)
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (set! <live: %rdi %r8 fv0 n.3> fv1 n.3)
   (fp-offset <live: %rdi %r8 fv0 n.3> 16)
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.37 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec = 34827)>)
rpl.37 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.25 %ac0)
   (set! <live: fv0 t.25> n.3 fv1)
   (fp-offset <live: fv0 t.25 n.3> -16)
   (overflood-check <live: fv0 t.25 n.3>)
   (if (inline <live: fv0 n.3> #<info> eq? t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump <live: %ac0> fv0)
lf.71 (depth = 1):
   (overflow-check <live: fv0 n.3>)
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (set! <live: fv0 n.3> fv1 n.3)
   (fp-offset <live: fv0 n.3> 16)
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.38 32))
   (jump <live: fv0> #<literal #(libspec event 32814)>)
rpl.38 (depth = 1, pariah):
   (rp-header mrvl.39 16 1)
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (set! <live: fv0> n.3 fv1)
   (fp-offset <live: fv0 n.3> -16)
   (overflood-check <live: fv0 n.3>)
   (goto "ej.74")
ej.74 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> t.16 (inline #<info> \x2D;/ovfl n.3 8))
   (if (inline <live: fv0 t.16 n.3> #<info> condition-code) (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (set! <live: %rdi %r8 fv0 n.3> fv1 n.3)
   (fp-offset <live: %rdi %r8 fv0 n.3> 16)
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.40 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec - 34838)>)
rpl.40 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.22 %ac0)
   (set! <live: fv0 t.22> n.3 fv1)
   (fp-offset <live: fv0 t.22 n.3> -16)
   (overflood-check <live: fv0 t.22 n.3>)
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (set! <live: %r8 fv0 n.3> fv1 n.3)
   (fp-offset <live: %r8 fv0 n.3> 16)
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> (mref %sfp zero 0) (label-ref rpl.41 32))
   (joto "dcl.9")
rpl.41 (depth = 0):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.15 %ac0)
   (set! <live: fv0 t.15> n.3 fv1)
   (fp-offset <live: fv0 t.15 n.3> -16)
   (overflood-check <live: fv0 t.15 n.3>)
   (set! <live: fv0 t.15 n.3> t.24 (inline #<info> logor n.3 t.15))
   (if (inline <live: fv0 t.15 n.3> #<info> log!test t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> t.23 (inline #<info> sra t.15 3))
   (set! <live: fv0 t.15 n.3> t.18 (inline #<info> */ovfl n.3 t.23))
   (if (inline <live: fv0 t.18 t.15 n.3> #<info> condition-code) (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump <live: %rdi %r8 fv0> #<literal #(libspec * 34840)>)
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump <live: %ac0> fv0)
output of finalize-frame-locations!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (overflood-check <live: %r8 fv0>)
   (set! <live: fv0> n.3 %r8)
   (if (inline <live: fv0 n.3> #<info> eq? n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: fv0 n.3> #0=%sfp (inline #<info> + #0# 16))
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.35 32))
   (jump <live: fv0> #<literal #(libspec event 32815)>)
rpl.35 (depth = 1, pariah):
   (rp-header mrvl.36 16 1)
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (set! <live: fv0> n.3 (mref %sfp zero -8))
   (set! <live: fv0 n.3> #0=%sfp (inline #<info> - #0# 16))
   (overflood-check <live: fv0 n.3>)
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (set! <live: %rdi %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %rdi %r8 fv0 n.3> #0=%sfp (inline #<info> + #0# 16))
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.37 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec = 34827)>)
rpl.37 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.25 %ac0)
   (set! <live: fv0 t.25> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.25 n.3> #0=%sfp (inline #<info> - #0# 16))
   (overflood-check <live: fv0 t.25 n.3>)
   (if (inline <live: fv0 n.3> #<info> eq? t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump <live: %ac0> (mref %sfp zero 0))
lf.71 (depth = 1):
   (overflow-check <live: fv0 n.3>)
   (set! <live: fv0 n.3> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 n.3> #<info> condition-code) (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: fv0 n.3> #0=%sfp (inline #<info> + #0# 16))
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.38 32))
   (jump <live: fv0> #<literal #(libspec event 32814)>)
rpl.38 (depth = 1, pariah):
   (rp-header mrvl.39 16 1)
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (set! <live: fv0> n.3 (mref %sfp zero -8))
   (set! <live: fv0 n.3> #0=%sfp (inline #<info> - #0# 16))
   (overflood-check <live: fv0 n.3>)
   (goto "ej.74")
ej.74 (depth = 1):
   (if (inline <live: fv0 n.3> #<info> log!test n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> t.16 (inline #<info> \x2D;/ovfl n.3 8))
   (if (inline <live: fv0 t.16 n.3> #<info> condition-code) (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (set! <live: %rdi %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %rdi %r8 fv0 n.3> #0=%sfp (inline #<info> + #0# 16))
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) (label-ref rpl.40 32))
   (jump <live: %rdi %r8 fv0> #<literal #(libspec - 34838)>)
rpl.40 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.22 %ac0)
   (set! <live: fv0 t.22> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.22 n.3> #0=%sfp (inline #<info> - #0# 16))
   (overflood-check <live: fv0 t.22 n.3>)
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (set! <live: %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %r8 fv0 n.3> #0=%sfp (inline #<info> + #0# 16))
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> (mref %sfp zero 0) (label-ref rpl.41 32))
   (joto "dcl.9")
rpl.41 (depth = 0):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.15 %ac0)
   (set! <live: fv0 t.15> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.15 n.3> #0=%sfp (inline #<info> - #0# 16))
   (overflood-check <live: fv0 t.15 n.3>)
   (set! <live: fv0 t.15 n.3> t.24 (inline #<info> logor n.3 t.15))
   (if (inline <live: fv0 t.15 n.3> #<info> log!test t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> t.23 (inline #<info> sra t.15 3))
   (set! <live: fv0 t.15 n.3> t.18 (inline #<info> */ovfl n.3 t.23))
   (if (inline <live: fv0 t.18 t.15 n.3> #<info> condition-code) (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump <live: %rdi %r8 fv0> #<literal #(libspec * 34840)>)
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump <live: %ac0> (mref %sfp zero 0))
output of select-instructions!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (set! <live: fv0> n.3 %r8)
   (if (asm "asm-eq" n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (asm #f n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> u.107 (label-ref rpl.35 32))
   (set! <live: fv0> (mref %sfp zero 0) u.107)
   (jump #<literal #(libspec event 32815)>)
rpl.35 (depth = 1, pariah):
   (rp-header mrvl.36 16 1)
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (set! <live: fv0> n.3 (mref %sfp zero -8))
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (set! <live: %rdi %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %rdi %r8 fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> u.108 (label-ref rpl.37 32))
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) u.108)
   (jump #<literal #(libspec = 34827)>)
rpl.37 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.25 %ac0)
   (set! <live: fv0 t.25> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.25 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (if (asm "asm-eq" t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump (mref %sfp zero 0))
lf.71 (depth = 1):
   (overflow-check (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (set! <live: fv0 n.3> #0=urax.109 (asm "asm-kill")) (asm #f #0#))
   (set! <live: fv0 n.3> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> u.110 (label-ref rpl.38 32))
   (set! <live: fv0> (mref %sfp zero 0) u.110)
   (jump #<literal #(libspec event 32814)>)
rpl.38 (depth = 1, pariah):
   (rp-header mrvl.39 16 1)
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (set! <live: fv0> n.3 (mref %sfp zero -8))
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.74")
ej.74 (depth = 1):
   (if (asm #f n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> u.111 n.3)
   (set! <live: fv0 n.3> #0=u.111 (asm "asm-sub" #0# 8))
   (set! <live: fv0 n.3> t.16 u.111)
   (if (asm "asm-check-flag-internal") (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (set! <live: %rdi %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %rdi %r8 fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> u.112 (label-ref rpl.40 32))
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) u.112)
   (jump #<literal #(libspec - 34838)>)
rpl.40 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.22 %ac0)
   (set! <live: fv0 t.22> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.22 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (set! <live: %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %r8 fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> u.113 (label-ref rpl.41 32))
   (set! <live: %r8 fv0> (mref %sfp zero 0) u.113)
   (joto "dcl.9")
rpl.41 (depth = 0):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.15 %ac0)
   (set! <live: fv0 t.15> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.15 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (set! <live: fv0 t.15 n.3> u.114 t.15)
   (set! <live: fv0 t.15 n.3> #0=u.114 (asm "asm-logor" #0# n.3))
   (set! <live: fv0 t.15 n.3> t.24 u.114)
   (if (asm #f t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> u.115 t.15)
   (set! <live: fv0 t.15 n.3> #0=u.115 (asm "asm-sra" #0# 3))
   (set! <live: fv0 t.15 n.3> t.23 u.115)
   (set! <live: fv0 t.23 t.15 n.3> u.116 n.3)
   (set! <live: fv0 t.15 n.3> #0=u.116 (asm "asm-mul" #0# t.23))
   (set! <live: fv0 t.15 n.3> t.18 u.116)
   (if (asm "asm-check-flag-internal") (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump #<literal #(libspec * 34840)>)
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump (mref %sfp zero 0))
output of do-unspillable-conflict!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (set! <live: fv0> n.3 %r8)
   (if (asm "asm-eq" n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (asm #f n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> u.107 (label-ref rpl.35 32))
   (set! <live: fv0> (mref %sfp zero 0) u.107)
   (jump #<literal #(libspec event 32815)>)
rpl.35 (depth = 1, pariah):
   (rp-header mrvl.36 16 1)
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (set! <live: fv0> n.3 (mref %sfp zero -8))
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (set! <live: %rdi %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %rdi %r8 fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> u.108 (label-ref rpl.37 32))
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) u.108)
   (jump #<literal #(libspec = 34827)>)
rpl.37 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.25 %ac0)
   (set! <live: fv0 t.25> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.25 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (if (asm "asm-eq" t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump (mref %sfp zero 0))
lf.71 (depth = 1):
   (overflow-check (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (set! <live: fv0 n.3> #0=urax.109 (asm "asm-kill")) (asm #f #0#))
   (set! <live: fv0 n.3> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> u.110 (label-ref rpl.38 32))
   (set! <live: fv0> (mref %sfp zero 0) u.110)
   (jump #<literal #(libspec event 32814)>)
rpl.38 (depth = 1, pariah):
   (rp-header mrvl.39 16 1)
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (set! <live: fv0> n.3 (mref %sfp zero -8))
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.74")
ej.74 (depth = 1):
   (if (asm #f n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> u.111 n.3)
   (set! <live: fv0 n.3> #0=u.111 (asm "asm-sub" #0# 8))
   (set! <live: fv0 n.3> t.16 u.111)
   (if (asm "asm-check-flag-internal") (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (set! <live: %rdi %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %rdi %r8 fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> u.112 (label-ref rpl.40 32))
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) u.112)
   (jump #<literal #(libspec - 34838)>)
rpl.40 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.22 %ac0)
   (set! <live: fv0 t.22> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.22 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (set! <live: %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %r8 fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> u.113 (label-ref rpl.41 32))
   (set! <live: %r8 fv0> (mref %sfp zero 0) u.113)
   (joto "dcl.9")
rpl.41 (depth = 0):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.15 %ac0)
   (set! <live: fv0 t.15> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.15 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (set! <live: fv0 t.15 n.3> u.114 t.15)
   (set! <live: fv0 t.15 n.3> #0=u.114 (asm "asm-logor" #0# n.3))
   (set! <live: fv0 t.15 n.3> t.24 u.114)
   (if (asm #f t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> u.115 t.15)
   (set! <live: fv0 t.15 n.3> #0=u.115 (asm "asm-sra" #0# 3))
   (set! <live: fv0 t.15 n.3> t.23 u.115)
   (set! <live: fv0 t.23 t.15 n.3> u.116 n.3)
   (set! <live: fv0 t.15 n.3> #0=u.116 (asm "asm-mul" #0# t.23))
   (set! <live: fv0 t.15 n.3> t.18 u.116)
   (if (asm "asm-check-flag-internal") (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump #<literal #(libspec * 34840)>)
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump (mref %sfp zero 0))
output of assign-registers!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (set! <live: fv0> n.3 %r8)
   (if (asm "asm-eq" n.3 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (asm #f n.3 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! <live: fv0> u.107 (label-ref rpl.35 32))
   (set! <live: fv0> (mref %sfp zero 0) u.107)
   (jump #<literal #(libspec event 32815)>)
rpl.35 (depth = 1, pariah):
   (rp-header mrvl.36 16 1)
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (set! <live: fv0> n.3 (mref %sfp zero -8))
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 0)
   (set! <live: %rdi %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %rdi %r8 fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> u.108 (label-ref rpl.37 32))
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) u.108)
   (jump #<literal #(libspec = 34827)>)
rpl.37 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.25 %ac0)
   (set! <live: fv0 t.25> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.25 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (if (asm "asm-eq" t.25 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! <live: fv0> %ac0 8)
   (jump (mref %sfp zero 0))
lf.71 (depth = 1):
   (overflow-check (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (set! <live: fv0 n.3> #0=urax.109 (asm "asm-kill")) (asm #f #0#))
   (set! <live: fv0 n.3> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (set! <live: fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! <live: fv0> u.110 (label-ref rpl.38 32))
   (set! <live: fv0> (mref %sfp zero 0) u.110)
   (jump #<literal #(libspec event 32814)>)
rpl.38 (depth = 1, pariah):
   (rp-header mrvl.39 16 1)
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (set! <live: fv0> n.3 (mref %sfp zero -8))
   (set! <live: fv0 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.74")
ej.74 (depth = 1):
   (if (asm #f n.3 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! <live: fv0 n.3> u.111 n.3)
   (set! <live: fv0 n.3> #0=u.111 (asm "asm-sub" #0# 8))
   (set! <live: fv0 n.3> t.16 u.111)
   (if (asm "asm-check-flag-internal") (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! <live: fv0 n.3> %r8 n.3)
   (set! <live: %r8 fv0 n.3> %rdi 8)
   (set! <live: %rdi %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %rdi %r8 fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! <live: %rdi %r8 fv0> u.112 (label-ref rpl.40 32))
   (set! <live: %rdi %r8 fv0> (mref %sfp zero 0) u.112)
   (jump #<literal #(libspec - 34838)>)
rpl.40 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.22 %ac0)
   (set! <live: fv0 t.22> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.22 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.79")
lf.85 (depth = 1):
   (set! <live: fv0 n.3> t.22 t.16)
   (goto "ej.79")
ej.79 (depth = 1):
   (set! <live: fv0 n.3> %r8 t.22)
   (set! <live: %r8 fv0 n.3> (mref %sfp zero 8) n.3)
   (set! <live: %r8 fv0 n.3> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.80")
docall.80 (depth = 1):
   (set! <live: %r8 fv0> u.113 (label-ref rpl.41 32))
   (set! <live: %r8 fv0> (mref %sfp zero 0) u.113)
   (joto "dcl.9")
rpl.41 (depth = 0):
   (rp-header #f 16 1)
   (set! <live: fv0 n.3> t.15 %ac0)
   (set! <live: fv0 t.15> n.3 (mref %sfp zero -8))
   (set! <live: fv0 t.15 n.3> #0=%sfp (asm "asm-sub" #0# 16))
   (set! <live: fv0 t.15 n.3> u.114 t.15)
   (set! <live: fv0 t.15 n.3> #0=u.114 (asm "asm-logor" #0# n.3))
   (set! <live: fv0 t.15 n.3> t.24 u.114)
   (if (asm #f t.24 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! <live: fv0 t.15 n.3> u.115 t.15)
   (set! <live: fv0 t.15 n.3> #0=u.115 (asm "asm-sra" #0# 3))
   (set! <live: fv0 t.15 n.3> t.23 u.115)
   (set! <live: fv0 t.23 t.15 n.3> u.116 n.3)
   (set! <live: fv0 t.15 n.3> #0=u.116 (asm "asm-mul" #0# t.23))
   (set! <live: fv0 t.15 n.3> t.18 u.116)
   (if (asm "asm-check-flag-internal") (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! <live: fv0 t.15> %r8 n.3)
   (set! <live: %r8 fv0> %rdi t.15)
   (jump #<literal #(libspec * 34840)>)
lf.83 (depth = 0):
   (set! <live: fv0> %ac0 t.18)
   (jump (mref %sfp zero 0))
output of finalize-register-locations!:
digraph BLOCKS {
   node [shape = box]; dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 lf_71 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   lf_71 -> lt_72;
   lf_71 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
}

fact:dcl.9 (depth = 1):
   (set! %ac0 %r8)
   (if (asm "asm-eq" %ac0 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (asm #f %ac0 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.35 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32815)>)
rpl.35 (depth = 1, pariah):
   (rp-header mrvl.36 16 1)
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! %r8 %ac0)
   (set! %rdi 0)
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.37 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec = 34827)>)
rpl.37 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! %rcx %ac0)
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (if (asm "asm-eq" %rcx 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! %ac0 8)
   (jump (mref %sfp zero 0))
lf.71 (depth = 1):
   (overflow-check (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (set! #0=%ts (asm "asm-kill")) (asm #f #0#))
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.38 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32814)>)
rpl.38 (depth = 1, pariah):
   (rp-header mrvl.39 16 1)
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.74")
ej.74 (depth = 1):
   (if (asm #f %ac0 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! %r8 %ac0)
   (set! #0=%r8 (asm "asm-sub" #0# 8))
   (if (asm "asm-check-flag-internal") (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! %r8 %ac0)
   (set! %rdi 8)
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.40 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec - 34838)>)
rpl.40 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! %r8 %ac0)
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.79")
lf.85 (depth = 1):
   (goto "ej.79")
ej.79 (depth = 1):
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.80")
docall.80 (depth = 1):
   (set! %rcx (label-ref rpl.41 32))
   (set! (mref %sfp zero 0) %rcx)
   (joto "dcl.9")
rpl.41 (depth = 0):
   (rp-header #f 16 1)
   (set! %rdi %ac0)
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (set! %rcx %rdi)
   (set! #0=%rcx (asm "asm-logor" #0# %ac0))
   (if (asm #f %rcx 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! %rcx %rdi)
   (set! #0=%rcx (asm "asm-sra" #0# 3))
   (set! %rdx %rcx)
   (set! %rcx %ac0)
   (set! #0=%rcx (asm "asm-mul" #0# %rdx))
   (if (asm "asm-check-flag-internal") (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! %r8 %ac0)
   (jump #<literal #(libspec * 34840)>)
lf.83 (depth = 0):
   (set! %ac0 %rcx)
   (jump (mref %sfp zero 0))
output of expose-overflow-check-blocks!:
digraph BLOCKS {
   node [shape = box]; lf_71 overflowed_118 [color=red] dcl_9 lf_69 lf_88 [color=red] lt_89 [color=red] docall_90 [color=red] rpl_35 [color=red] mrvl_36 [color=red] ej_91 [color=red] docall_92 [color=red] rpl_37 [color=red] lt_68 post_overflow_check_117 lt_72 [color=red] docall_73 [color=red] rpl_38 [color=red] mrvl_39 [color=red] ej_74 lt_75 Lfail_17 [color=red] docall_77 [color=red] rpl_40 [color=red] lf_85 ej_79 docall_80 rpl_41 lt_81 Lfail_19 [color=red] lf_83

   lt_81 -> Lfail_19;
   lt_81 -> lf_83;
   rpl_41 -> lt_81;
   rpl_41 -> Lfail_19;
   docall_80 -> dcl_9;
   ej_79 -> docall_80;
   ej_79 -> rpl_41;
   lf_85 -> ej_79;
   rpl_40 -> ej_79;
   Lfail_17 -> docall_77;
   Lfail_17 -> rpl_40;
   lt_75 -> Lfail_17;
   lt_75 -> lf_85;
   ej_74 -> lt_75;
   ej_74 -> Lfail_17;
   mrvl_39 -> ej_74;
   rpl_38 -> mrvl_39;
   lt_72 -> docall_73;
   lt_72 -> rpl_38;
   post_overflow_check_117 -> lt_72;
   post_overflow_check_117 -> ej_74;
   rpl_37 -> lf_71;
   rpl_37 -> lt_68;
   ej_91 -> docall_92;
   ej_91 -> rpl_37;
   mrvl_36 -> ej_91;
   rpl_35 -> mrvl_36;
   lt_89 -> docall_90;
   lt_89 -> rpl_35;
   lf_88 -> lt_89;
   lf_88 -> ej_91;
   lf_69 -> lf_71;
   lf_69 -> lf_88;
   dcl_9 -> lt_68;
   dcl_9 -> lf_69;
   overflowed_118 -> post_overflow_check_117;
   lf_71 -> post_overflow_check_117;
   lf_71 -> overflowed_118;
}

fact:lf.71 (depth = 0):
   (if (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (goto "post-overflow-check.117") (goto "overflowed.118"))
overflowed.118 (depth = 0, pariah):
   (set! %ts (asm "asm-kill"))
   (asm #f %ts)
   (goto "post-overflow-check.117")
dcl.9 (depth = 1):
   (set! %ac0 %r8)
   (if (asm "asm-eq" %ac0 0) (goto "lt.68") (goto "lf.69"))
lf.69 (depth = 1):
   (if (asm #f %ac0 7) (goto "lf.71") (goto "lf.88"))
lf.88 (depth = 1, pariah):
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.89") (goto "ej.91"))
lt.89 (depth = 1, pariah):
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.90")
docall.90 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.35 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32815)>)
rpl.35 (depth = 1, pariah):
   (rp-header mrvl.36 16 1)
   (goto "mrvl.36")
mrvl.36 (depth = 1, pariah):
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.91")
ej.91 (depth = 1, pariah):
   (set! %r8 %ac0)
   (set! %rdi 0)
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.92")
docall.92 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.37 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec = 34827)>)
rpl.37 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! %rcx %ac0)
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (if (asm "asm-eq" %rcx 6) (goto "lf.71") (goto "lt.68"))
lt.68 (depth = 0):
   (set! %ac0 8)
   (jump (mref %sfp zero 0))
post-overflow-check.117 (depth = 1):
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.72") (goto "ej.74"))
lt.72 (depth = 1, pariah):
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.73")
docall.73 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.38 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32814)>)
rpl.38 (depth = 1, pariah):
   (rp-header mrvl.39 16 1)
   (goto "mrvl.39")
mrvl.39 (depth = 1, pariah):
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.74")
ej.74 (depth = 1):
   (if (asm #f %ac0 7) (goto "lt.75") (goto "Lfail.17"))
lt.75 (depth = 1):
   (set! %r8 %ac0)
   (set! #0=%r8 (asm "asm-sub" #0# 8))
   (if (asm "asm-check-flag-internal") (goto "Lfail.17") (goto "lf.85"))
Lfail.17 (depth = 1, pariah):
   (set! %r8 %ac0)
   (set! %rdi 8)
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.77")
docall.77 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.40 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec - 34838)>)
rpl.40 (depth = 1, pariah):
   (rp-header #f 16 1)
   (set! %r8 %ac0)
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.79")
lf.85 (depth = 1):
   (goto "ej.79")
ej.79 (depth = 1):
   (set! (mref %sfp zero 8) %ac0)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.80")
docall.80 (depth = 1):
   (set! %rcx (label-ref rpl.41 32))
   (set! (mref %sfp zero 0) %rcx)
   (joto "dcl.9")
rpl.41 (depth = 0):
   (rp-header #f 16 1)
   (set! %rdi %ac0)
   (set! %ac0 (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (set! %rcx %rdi)
   (set! #0=%rcx (asm "asm-logor" #0# %ac0))
   (if (asm #f %rcx 7) (goto "lt.81") (goto "Lfail.19"))
lt.81 (depth = 0):
   (set! %rcx %rdi)
   (set! #0=%rcx (asm "asm-sra" #0# 3))
   (set! %rdx %rcx)
   (set! %rcx %ac0)
   (set! #0=%rcx (asm "asm-mul" #0# %rdx))
   (if (asm "asm-check-flag-internal") (goto "Lfail.19") (goto "lf.83"))
Lfail.19 (depth = 0, pariah):
   (set! %r8 %ac0)
   (jump #<literal #(libspec * 34840)>)
lf.83 (depth = 0):
   (set! %ac0 %rcx)
   (jump (mref %sfp zero 0))
output of do-live-analysis!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.42 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.42 (depth = 0, pariah):
   (return-point #<info> rpl.42 mrvl.43 ())
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (set! <live: fv0 t.5> %xp (inline #<info> + %ap -7))
   (set! <live: %xp fv0 t.5> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 t.5> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: fv0 t.5> %xp (inline #<info> asmlibcall))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (set! <live: fv0 g0.0> %xp (inline #<info> + %ap -3))
   (set! <live: %xp fv0 g0.0> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 g0.0> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: fv0 g0.0> %xp (inline #<info> asmlibcall))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) (label-ref swap.10 65))
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> fv1 swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump <live: %rsi %rdi %r8 %cp %ac0 fv1 fv0> (mref %xp zero 13) (%ac0 %cp %r8 %rdi %rsi fv0 ...))
output of record-call-live!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.42 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.42 (depth = 0, pariah):
   (return-point #<info> rpl.42 mrvl.43 ())
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (set! <live: fv0 t.5> %xp (inline #<info> + %ap -7))
   (set! <live: %xp fv0 t.5> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 t.5> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: fv0 t.5> %xp (inline #<info> asmlibcall))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (set! <live: fv0 g0.0> %xp (inline #<info> + %ap -3))
   (set! <live: %xp fv0 g0.0> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 g0.0> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: fv0 g0.0> %xp (inline #<info> asmlibcall))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) (label-ref swap.10 65))
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> fv1 swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump <live: %rsi %rdi %r8 %cp %ac0 fv1 fv0> (mref %xp zero 13) (%ac0 %cp %r8 %rdi %rsi fv0 ...))
output of do-spillable-conflict!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.42 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.42 (depth = 0, pariah):
   (return-point #<info> rpl.42 mrvl.43 ())
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (set! <live: fv0 t.5> %xp (inline #<info> + %ap -7))
   (set! <live: %xp fv0 t.5> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 t.5> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: fv0 t.5> %xp (inline #<info> asmlibcall))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (set! <live: fv0 g0.0> %xp (inline #<info> + %ap -3))
   (set! <live: %xp fv0 g0.0> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 g0.0> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: fv0 g0.0> %xp (inline #<info> asmlibcall))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) (label-ref swap.10 65))
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> fv1 swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump <live: %rsi %rdi %r8 %cp %ac0 fv1 fv0> (mref %xp zero 13) (%ac0 %cp %r8 %rdi %rsi fv0 ...))
output of assign-frame!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.42 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.42 (depth = 0, pariah):
   (return-point #<info> rpl.42 mrvl.43 ())
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (set! <live: fv0 t.5> %xp (inline #<info> + %ap -7))
   (set! <live: %xp fv0 t.5> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 t.5> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: fv0 t.5> %xp (inline #<info> asmlibcall))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (set! <live: fv0 g0.0> %xp (inline #<info> + %ap -3))
   (set! <live: %xp fv0 g0.0> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 g0.0> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: fv0 g0.0> %xp (inline #<info> asmlibcall))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) (label-ref swap.10 65))
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> fv1 swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump <live: %rsi %rdi %r8 %cp %ac0 fv1 fv0> (mref %xp zero 13) (%ac0 %cp %r8 %rdi %rsi fv0 ...))
output of record-inspector-information!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.42 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.42 (depth = 0, pariah):
   (return-point #<info> rpl.42 mrvl.43 ())
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (set! <live: fv0 t.5> %xp (inline #<info> + %ap -7))
   (set! <live: %xp fv0 t.5> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 t.5> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: fv0 t.5> %xp (inline #<info> asmlibcall))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (set! <live: fv0 g0.0> %xp (inline #<info> + %ap -3))
   (set! <live: %xp fv0 g0.0> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 g0.0> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: fv0 g0.0> %xp (inline #<info> asmlibcall))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) (label-ref swap.10 65))
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> fv1 swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump <live: %rsi %rdi %r8 %cp %ac0 fv1 fv0> (mref %xp zero 13) (%ac0 %cp %r8 %rdi %rsi fv0 ...))
output of assign-new-frame!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (fp-offset <live: fv0> 8)
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.42 32))
   (jump <live: fv0> #<literal #(libspec event 32815)>)
rpl.42 (depth = 0, pariah):
   (rp-header mrvl.43 8 0)
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (fp-offset <live: fv0> -8)
   (overflood-check <live: fv0>)
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (set! <live: fv0 t.5> %xp (inline #<info> + %ap -7))
   (set! <live: %xp fv0 t.5> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 t.5> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: fv0 t.5> %xp (inline #<info> asmlibcall))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (set! <live: fv0 g0.0> %xp (inline #<info> + %ap -3))
   (set! <live: %xp fv0 g0.0> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 g0.0> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: fv0 g0.0> %xp (inline #<info> asmlibcall))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) (label-ref swap.10 65))
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> fv1 swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump <live: %rsi %rdi %r8 %cp %ac0 fv1 fv0> (mref %xp zero 13))
output of record-fp-offsets!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (fp-offset <live: fv0> 8)
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.42 32))
   (jump <live: fv0> #<literal #(libspec event 32815)>)
rpl.42 (depth = 0, pariah):
   (rp-header mrvl.43 8 0)
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (fp-offset <live: fv0> -8)
   (overflood-check <live: fv0>)
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (set! <live: fv0 t.5> %xp (inline #<info> + %ap -7))
   (set! <live: %xp fv0 t.5> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 t.5> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: fv0 t.5> %xp (inline #<info> asmlibcall))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (set! <live: fv0 g0.0> %xp (inline #<info> + %ap -3))
   (set! <live: %xp fv0 g0.0> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 g0.0> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: fv0 g0.0> %xp (inline #<info> asmlibcall))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) (label-ref swap.10 65))
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> fv1 swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump <live: %rsi %rdi %r8 %cp %ac0 fv1 fv0> (mref %xp zero 13))
output of finalize-frame-locations!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (inline #<info> + #0# 8))
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.42 32))
   (jump <live: fv0> #<literal #(libspec event 32815)>)
rpl.42 (depth = 0, pariah):
   (rp-header mrvl.43 8 0)
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (inline #<info> - #0# 8))
   (overflood-check <live: fv0>)
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (set! <live: fv0 t.5> %xp (inline #<info> + %ap -7))
   (set! <live: %xp fv0 t.5> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 t.5> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: fv0 t.5> %xp (inline #<info> asmlibcall))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (set! <live: fv0 g0.0> %xp (inline #<info> + %ap -3))
   (set! <live: %xp fv0 g0.0> #0=%ap (inline #<info> + #0# 16))
   (if (inline <live: %xp fv0 g0.0> #<info> u< (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: fv0 g0.0> %xp (inline #<info> asmlibcall))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) (label-ref swap.10 65))
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> (mref %sfp zero 8) swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump <live: %rsi %rdi %r8 %cp %ac0 fv1 fv0> (mref %xp zero 13))
output of select-instructions!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (set! <live: fv0> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> u.119 (label-ref rpl.42 32))
   (set! <live: fv0> (mref %sfp zero 0) u.119)
   (jump #<literal #(libspec event 32815)>)
rpl.42 (depth = 0, pariah):
   (rp-header mrvl.43 8 0)
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (move-related %xp %ap)
   (set! <live: fv0 t.5> %xp (asm #f %ap))
   (set! <live: %xp fv0 t.5> #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: %xp fv0 t.5> urax.120 (asm "asm-kill"))
   (set! <live: fv0 t.5> #0=%xp (asm #f urax.120 #0#))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (move-related %xp %ap)
   (set! <live: fv0 g0.0> %xp (asm #f %ap))
   (set! <live: %xp fv0 g0.0> #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: %xp fv0 g0.0> urax.120 (asm "asm-kill"))
   (set! <live: fv0 g0.0> #0=%xp (asm #f urax.120 #0#))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> u.121 (label-ref swap.10 65))
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) u.121)
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> (mref %sfp zero 8) swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump (mref %xp zero 13))
output of do-unspillable-conflict!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (set! <live: fv0> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> u.119 (label-ref rpl.42 32))
   (set! <live: fv0> (mref %sfp zero 0) u.119)
   (jump #<literal #(libspec event 32815)>)
rpl.42 (depth = 0, pariah):
   (rp-header mrvl.43 8 0)
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (move-related %xp %ap)
   (set! <live: fv0 t.5> %xp (asm #f %ap))
   (set! <live: %xp fv0 t.5> #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: %xp fv0 t.5> urax.120 (asm "asm-kill"))
   (set! <live: fv0 t.5> #0=%xp (asm #f urax.120 #0#))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (move-related %xp %ap)
   (set! <live: fv0 g0.0> %xp (asm #f %ap))
   (set! <live: %xp fv0 g0.0> #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: %xp fv0 g0.0> urax.120 (asm "asm-kill"))
   (set! <live: fv0 g0.0> #0=%xp (asm #f urax.120 #0#))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> u.121 (label-ref swap.10 65))
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) u.121)
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> (mref %sfp zero 8) swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump (mref %xp zero 13))
output of assign-registers!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (set! <live: fv0> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! <live: fv0> u.119 (label-ref rpl.42 32))
   (set! <live: fv0> (mref %sfp zero 0) u.119)
   (jump #<literal #(libspec event 32815)>)
rpl.42 (depth = 0, pariah):
   (rp-header mrvl.43 8 0)
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.99")
ej.99 (depth = 0):
   (set! <live: fv0> t.5 0)
   (move-related %xp %ap)
   (set! <live: fv0 t.5> %xp (asm #f %ap))
   (set! <live: %xp fv0 t.5> #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! <live: %xp fv0 t.5> urax.120 (asm "asm-kill"))
   (set! <live: fv0 t.5> #0=%xp (asm #f urax.120 #0#))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! <live: fv0 t.5> t.20 %xp)
   (set! <live: fv0 t.20> (mref t.20 zero 7) t.5)
   (set! <live: fv0 t.20> (mref t.20 zero 15) 30)
   (set! <live: fv0> g0.0 t.20)
   (move-related %xp %ap)
   (set! <live: fv0 g0.0> %xp (asm #f %ap))
   (set! <live: %xp fv0 g0.0> #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! <live: %xp fv0 g0.0> urax.120 (asm "asm-kill"))
   (set! <live: fv0 g0.0> #0=%xp (asm #f urax.120 #0#))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! <live: fv0 g0.0> swap.1 %xp)
   (set! <live: fv0 swap.1 g0.0> u.121 (label-ref swap.10 65))
   (set! <live: fv0 swap.1 g0.0> (mref swap.1 zero 3) u.121)
   (set! <live: fv0 swap.1> (mref swap.1 zero 11) g0.0)
   (set! <live: fv0 swap.1> (mref %sfp zero 8) swap.1)
   (set! <live: fv1 fv0 swap.1> %r8 14)
   (set! <live: %r8 fv1 fv0> %rdi swap.1)
   (set! <live: %rdi %r8 fv1 fv0> %rsi #<literal anon.11>)
   (set! <live: %rsi %rdi %r8 fv1 fv0> %xp #<literal dynamic-wind>)
   (set! <live: %rsi %rdi %r8 %xp fv1 fv0> %cp (mref %xp zero 5))
   (set! <live: %rsi %rdi %r8 %cp %xp fv1 fv0> %ac0 4)
   (jump (mref %xp zero 13))
output of finalize-register-locations!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (set! #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.42 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32815)>)
rpl.42 (depth = 0, pariah):
   (rp-header mrvl.43 8 0)
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (set! #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.99")
ej.99 (depth = 0):
   (set! %rcx 0)
   (set! %xp (asm #f %ap))
   (set! #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! %ts (asm "asm-kill"))
   (set! #0=%xp (asm #f %ts #0#))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! (mref %xp zero 7) %rcx)
   (set! (mref %xp zero 15) 30)
   (set! %rcx %xp)
   (set! %xp (asm #f %ap))
   (set! #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! %ts (asm "asm-kill"))
   (set! #0=%xp (asm #f %ts #0#))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! %rdi %xp)
   (set! %rdx (label-ref swap.10 65))
   (set! (mref %rdi zero 3) %rdx)
   (set! (mref %rdi zero 11) %rcx)
   (set! (mref %sfp zero 8) %rdi)
   (set! %r8 14)
   (set! %rsi #<literal anon.11>)
   (set! %xp #<literal dynamic-wind>)
   (set! %cp (mref %xp zero 5))
   (set! %ac0 4)
   (jump (mref %xp zero 13))
output of expose-overflow-check-blocks!:
digraph BLOCKS {
   node [shape = box]; dcl_28 lt_97 [color=red] docall_98 [color=red] rpl_42 [color=red] mrvl_43 [color=red] ej_99 Lget_room_44 [color=red] ej_101 Lget_room_45 [color=red] ej_103

   Lget_room_45 -> ej_103;
   ej_101 -> Lget_room_45;
   ej_101 -> ej_103;
   Lget_room_44 -> ej_101;
   ej_99 -> Lget_room_44;
   ej_99 -> ej_101;
   mrvl_43 -> ej_99;
   rpl_42 -> mrvl_43;
   lt_97 -> docall_98;
   lt_97 -> rpl_42;
   dcl_28 -> lt_97;
   dcl_28 -> ej_99;
}
dcl.28 (depth = 0):
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.97") (goto "ej.99"))
lt.97 (depth = 0, pariah):
   (set! #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.98")
docall.98 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.42 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32815)>)
rpl.42 (depth = 0, pariah):
   (rp-header mrvl.43 8 0)
   (goto "mrvl.43")
mrvl.43 (depth = 0, pariah):
   (set! #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.99")
ej.99 (depth = 0):
   (set! %rcx 0)
   (set! %xp (asm #f %ap))
   (set! #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.44") (goto "ej.101"))
Lget-room.44 (depth = 0, pariah):
   (set! %ts (asm "asm-kill"))
   (set! #0=%xp (asm #f %ts #0#))
   (goto "ej.101")
ej.101 (depth = 0):
   (set! (mref %xp zero 7) %rcx)
   (set! (mref %xp zero 15) 30)
   (set! %rcx %xp)
   (set! %xp (asm #f %ap))
   (set! #0=%ap (asm "asm-add" #0# 16))
   (if (asm "asm-eq" (mref #[...] #[...] 88) %ap) (goto "Lget-room.45") (goto "ej.103"))
Lget-room.45 (depth = 0, pariah):
   (set! %ts (asm "asm-kill"))
   (set! #0=%xp (asm #f %ts #0#))
   (goto "ej.103")
ej.103 (depth = 0):
   (set! %rdi %xp)
   (set! %rdx (label-ref swap.10 65))
   (set! (mref %rdi zero 3) %rdx)
   (set! (mref %rdi zero 11) %rcx)
   (set! (mref %sfp zero 8) %rdi)
   (set! %r8 14)
   (set! %rsi #<literal anon.11>)
   (set! %xp #<literal dynamic-wind>)
   (set! %cp (mref %xp zero 5))
   (set! %ac0 4)
   (jump (mref %xp zero 13))
output of do-live-analysis!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (overflood-check <live: %cp fv0>)
   (set! <live: fv0> cp.7 %cp)
   (overflow-check <live: fv0 cp.7>)
   (set! <live: fv0 cp.7> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 cp.7> #<info> condition-code) (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.29 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.29 (depth = 0, pariah):
   (return-point #<info> rpl.29 mrvl.30 ())
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (remove-frame <live: fv0 cp.7> #<info>)
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump <live: %r8 %cp %ac0 fv0> (mref %xp zero 13) (%ac0 %cp %r8 fv0))
rpl.31 (depth = 0):
   (return-point #<info> rpl.31 mrvl.32 ())
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (remove-frame <live: fv0 g1.4 cp.7> #<info>)
   (set! <live: fv0 g1.4> t.14 (inline #<info> lea1 (mref #[...] #[...] 11)))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (inline <live: fv0 t.14> #<info> log!test g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (inline <live: %td fv0 t.14> #<info> u< %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (inline <live: fv0 t.14> #<info> asmlibcall!)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (inline #<info> - #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of record-call-live!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (overflood-check <live: %cp fv0>)
   (set! <live: fv0> cp.7 %cp)
   (overflow-check <live: fv0 cp.7>)
   (set! <live: fv0 cp.7> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 cp.7> #<info> condition-code) (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.29 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.29 (depth = 0, pariah):
   (return-point #<info> rpl.29 mrvl.30 ())
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (remove-frame <live: fv0 cp.7> #<info>)
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump <live: %r8 %cp %ac0 fv0> (mref %xp zero 13) (%ac0 %cp %r8 fv0))
rpl.31 (depth = 0):
   (return-point #<info> rpl.31 mrvl.32 ())
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (remove-frame <live: fv0 g1.4 cp.7> #<info>)
   (set! <live: fv0 g1.4> t.14 (inline #<info> lea1 (mref #[...] #[...] 11)))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (inline <live: fv0 t.14> #<info> log!test g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (inline <live: %td fv0 t.14> #<info> u< %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (inline <live: fv0 t.14> #<info> asmlibcall!)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (inline #<info> - #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of do-spillable-conflict!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (overflood-check <live: %cp fv0>)
   (set! <live: fv0> cp.7 %cp)
   (overflow-check <live: fv0 cp.7>)
   (set! <live: fv0 cp.7> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 cp.7> #<info> condition-code) (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.29 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.29 (depth = 0, pariah):
   (return-point #<info> rpl.29 mrvl.30 ())
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (remove-frame <live: fv0 cp.7> #<info>)
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump <live: %r8 %cp %ac0 fv0> (mref %xp zero 13) (%ac0 %cp %r8 fv0))
rpl.31 (depth = 0):
   (return-point #<info> rpl.31 mrvl.32 ())
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (remove-frame <live: fv0 g1.4 cp.7> #<info>)
   (set! <live: fv0 g1.4> t.14 (inline #<info> lea1 (mref #[...] #[...] 11)))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (inline <live: fv0 t.14> #<info> log!test g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (inline <live: %td fv0 t.14> #<info> u< %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (inline <live: fv0 t.14> #<info> asmlibcall!)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (inline #<info> - #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of assign-frame!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (overflood-check <live: %cp fv0>)
   (set! <live: fv0> cp.7 %cp)
   (overflow-check <live: fv0 cp.7>)
   (set! <live: fv0 cp.7> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 cp.7> #<info> condition-code) (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.29 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.29 (depth = 0, pariah):
   (return-point #<info> rpl.29 mrvl.30 ())
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (remove-frame <live: fv0 cp.7> #<info>)
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump <live: %r8 %cp %ac0 fv0> (mref %xp zero 13) (%ac0 %cp %r8 fv0))
rpl.31 (depth = 0):
   (return-point #<info> rpl.31 mrvl.32 ())
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (remove-frame <live: fv0 g1.4 cp.7> #<info>)
   (set! <live: fv0 g1.4> t.14 (inline #<info> lea1 (mref #[...] #[...] 11)))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (inline <live: fv0 t.14> #<info> log!test g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (inline <live: %td fv0 t.14> #<info> u< %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (inline <live: fv0 t.14> #<info> asmlibcall!)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (inline #<info> - #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of record-inspector-information!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (overflood-check <live: %cp fv0>)
   (set! <live: fv0> cp.7 %cp)
   (overflow-check <live: fv0 cp.7>)
   (set! <live: fv0 cp.7> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 cp.7> #<info> condition-code) (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.29 32))
   (jump <live: fv0> #<literal #(libspec event 32814)> (fv0))
rpl.29 (depth = 0, pariah):
   (return-point #<info> rpl.29 mrvl.30 ())
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (remove-frame <live: fv0 cp.7> #<info>)
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump <live: %r8 %cp %ac0 fv0> (mref %xp zero 13) (%ac0 %cp %r8 fv0))
rpl.31 (depth = 0):
   (return-point #<info> rpl.31 mrvl.32 ())
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (remove-frame <live: fv0 g1.4 cp.7> #<info>)
   (set! <live: fv0 g1.4> t.14 (inline #<info> lea1 (mref #[...] #[...] 11)))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (inline <live: fv0 t.14> #<info> log!test g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (inline <live: %td fv0 t.14> #<info> u< %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (inline <live: fv0 t.14> #<info> asmlibcall!)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (inline #<info> - #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0 (%ac0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of assign-new-frame!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (overflood-check <live: %cp fv0>)
   (set! <live: fv0> cp.7 %cp)
   (overflow-check <live: fv0 cp.7>)
   (set! <live: fv0 cp.7> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 cp.7> #<info> condition-code) (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (set! <live: fv0 cp.7> fv1 cp.7)
   (fp-offset <live: fv0 cp.7> 16)
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.29 32))
   (jump <live: fv0> #<literal #(libspec event 32814)>)
rpl.29 (depth = 0, pariah):
   (rp-header mrvl.30 16 1)
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (set! <live: fv0> cp.7 fv1)
   (fp-offset <live: fv0 cp.7> -16)
   (overflood-check <live: fv0 cp.7>)
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (set! <live: %r8 fv0 g1.4 cp.7> fv1 cp.7)
   (set! <live: %r8 fv0 g1.4 cp.7> fv2 g1.4)
   (fp-offset <live: %r8 fv0 g1.4 cp.7> 24)
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump <live: %r8 %cp %ac0 fv0> (mref %xp zero 13))
rpl.31 (depth = 0):
   (rp-header mrvl.32 24 3)
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (set! <live: fv0> cp.7 fv1)
   (set! <live: fv0 cp.7> g1.4 fv2)
   (fp-offset <live: fv0 g1.4 cp.7> -24)
   (overflood-check <live: fv0 g1.4 cp.7>)
   (set! <live: fv0 g1.4> t.14 (inline #<info> lea1 (mref #[...] #[...] 11)))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (inline <live: fv0 t.14> #<info> log!test g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0)
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (inline <live: %td fv0 t.14> #<info> u< %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (inline <live: fv0 t.14> #<info> asmlibcall!)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (inline #<info> - #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0)
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of record-fp-offsets!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (overflood-check <live: %cp fv0>)
   (set! <live: fv0> cp.7 %cp)
   (overflow-check <live: fv0 cp.7>)
   (set! <live: fv0 cp.7> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 cp.7> #<info> condition-code) (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (set! <live: fv0 cp.7> fv1 cp.7)
   (fp-offset <live: fv0 cp.7> 16)
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.29 32))
   (jump <live: fv0> #<literal #(libspec event 32814)>)
rpl.29 (depth = 0, pariah):
   (rp-header mrvl.30 16 1)
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (set! <live: fv0> cp.7 fv1)
   (fp-offset <live: fv0 cp.7> -16)
   (overflood-check <live: fv0 cp.7>)
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (set! <live: %r8 fv0 g1.4 cp.7> fv1 cp.7)
   (set! <live: %r8 fv0 g1.4 cp.7> fv2 g1.4)
   (fp-offset <live: %r8 fv0 g1.4 cp.7> 24)
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump <live: %r8 %cp %ac0 fv0> (mref %xp zero 13))
rpl.31 (depth = 0):
   (rp-header mrvl.32 24 3)
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (set! <live: fv0> cp.7 fv1)
   (set! <live: fv0 cp.7> g1.4 fv2)
   (fp-offset <live: fv0 g1.4 cp.7> -24)
   (overflood-check <live: fv0 g1.4 cp.7>)
   (set! <live: fv0 g1.4> t.14 (inline #<info> lea1 (mref #[...] #[...] 11)))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (inline <live: fv0 t.14> #<info> log!test g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0)
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (inline <live: %td fv0 t.14> #<info> u< %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (inline <live: fv0 t.14> #<info> asmlibcall!)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (inline #<info> - #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> fv0)
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of finalize-frame-locations!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (overflood-check <live: %cp fv0>)
   (set! <live: fv0> cp.7 %cp)
   (overflow-check <live: fv0 cp.7>)
   (set! <live: fv0 cp.7> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0 cp.7> #<info> condition-code) (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (set! <live: fv0 cp.7> (mref %sfp zero 8) cp.7)
   (set! <live: fv0 cp.7> #0=%sfp (inline #<info> + #0# 16))
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.29 32))
   (jump <live: fv0> #<literal #(libspec event 32814)>)
rpl.29 (depth = 0, pariah):
   (rp-header mrvl.30 16 1)
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (set! <live: fv0> cp.7 (mref %sfp zero -8))
   (set! <live: fv0 cp.7> #0=%sfp (inline #<info> - #0# 16))
   (overflood-check <live: fv0 cp.7>)
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (set! <live: %r8 fv0 g1.4 cp.7> (mref %sfp zero 8) cp.7)
   (set! <live: %r8 fv0 g1.4 cp.7> (mref %sfp zero 16) g1.4)
   (set! <live: %r8 fv0 g1.4 cp.7> #0=%sfp (inline #<info> + #0# 24))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump <live: %r8 %cp %ac0 fv0> (mref %xp zero 13))
rpl.31 (depth = 0):
   (rp-header mrvl.32 24 3)
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (set! <live: fv0> cp.7 (mref %sfp zero -16))
   (set! <live: fv0 cp.7> g1.4 (mref %sfp zero -8))
   (set! <live: fv0 g1.4 cp.7> #0=%sfp (inline #<info> - #0# 24))
   (overflood-check <live: fv0 g1.4 cp.7>)
   (set! <live: fv0 g1.4> t.14 (inline #<info> lea1 (mref #[...] #[...] 11)))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (inline <live: fv0 t.14> #<info> log!test g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> (mref %sfp zero 0))
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (inline <live: %td fv0 t.14> #<info> u< %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (inline <live: fv0 t.14> #<info> asmlibcall!)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (inline #<info> - #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump <live: %ac0> (mref %sfp zero 0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of select-instructions!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (set! <live: fv0> cp.7 %cp)
   (overflow-check (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (set! <live: fv0 cp.7> #0=urax.122 (asm "asm-kill")) (asm #f #0#))
   (set! <live: fv0 cp.7> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (set! <live: fv0 cp.7> (mref %sfp zero 8) cp.7)
   (set! <live: fv0 cp.7> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> u.123 (label-ref rpl.29 32))
   (set! <live: fv0> (mref %sfp zero 0) u.123)
   (jump #<literal #(libspec event 32814)>)
rpl.29 (depth = 0, pariah):
   (rp-header mrvl.30 16 1)
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (set! <live: fv0> cp.7 (mref %sfp zero -8))
   (set! <live: fv0 cp.7> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (set! <live: %r8 fv0 g1.4 cp.7> (mref %sfp zero 8) cp.7)
   (set! <live: %r8 fv0 g1.4 cp.7> (mref %sfp zero 16) g1.4)
   (set! <live: %r8 fv0 g1.4 cp.7> #0=%sfp (asm "asm-add" #0# 24))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> u.124 (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) u.124)
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump (mref %xp zero 13))
rpl.31 (depth = 0):
   (rp-header mrvl.32 24 3)
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (set! <live: fv0> cp.7 (mref %sfp zero -16))
   (set! <live: fv0 cp.7> g1.4 (mref %sfp zero -8))
   (set! <live: fv0 g1.4 cp.7> #0=%sfp (asm "asm-sub" #0# 24))
   (set! <live: fv0 g1.4> u.125 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4> t.14 (asm #f u.125))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (asm #f g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump (mref %sfp zero 0))
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (asm "asm-eq" %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (set! <live: fv0 t.14> urax.122 (asm "asm-kill"))
   (asm #f urax.122)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (asm "asm-sub" #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump (mref %sfp zero 0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of do-unspillable-conflict!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (set! <live: fv0> cp.7 %cp)
   (overflow-check (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (set! <live: fv0 cp.7> #0=urax.122 (asm "asm-kill")) (asm #f #0#))
   (set! <live: fv0 cp.7> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (set! <live: fv0 cp.7> (mref %sfp zero 8) cp.7)
   (set! <live: fv0 cp.7> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> u.123 (label-ref rpl.29 32))
   (set! <live: fv0> (mref %sfp zero 0) u.123)
   (jump #<literal #(libspec event 32814)>)
rpl.29 (depth = 0, pariah):
   (rp-header mrvl.30 16 1)
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (set! <live: fv0> cp.7 (mref %sfp zero -8))
   (set! <live: fv0 cp.7> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (set! <live: %r8 fv0 g1.4 cp.7> (mref %sfp zero 8) cp.7)
   (set! <live: %r8 fv0 g1.4 cp.7> (mref %sfp zero 16) g1.4)
   (set! <live: %r8 fv0 g1.4 cp.7> #0=%sfp (asm "asm-add" #0# 24))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> u.124 (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) u.124)
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump (mref %xp zero 13))
rpl.31 (depth = 0):
   (rp-header mrvl.32 24 3)
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (set! <live: fv0> cp.7 (mref %sfp zero -16))
   (set! <live: fv0 cp.7> g1.4 (mref %sfp zero -8))
   (set! <live: fv0 g1.4 cp.7> #0=%sfp (asm "asm-sub" #0# 24))
   (set! <live: fv0 g1.4> u.125 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4> t.14 (asm #f u.125))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (asm #f g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump (mref %sfp zero 0))
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (asm "asm-eq" %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (set! <live: fv0 t.14> urax.122 (asm "asm-kill"))
   (asm #f urax.122)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (asm "asm-sub" #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump (mref %sfp zero 0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of assign-registers!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (set! <live: fv0> cp.7 %cp)
   (overflow-check (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (set! <live: fv0 cp.7> #0=urax.122 (asm "asm-kill")) (asm #f #0#))
   (set! <live: fv0 cp.7> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (set! <live: fv0 cp.7> (mref %sfp zero 8) cp.7)
   (set! <live: fv0 cp.7> #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! <live: fv0> u.123 (label-ref rpl.29 32))
   (set! <live: fv0> (mref %sfp zero 0) u.123)
   (jump #<literal #(libspec event 32814)>)
rpl.29 (depth = 0, pariah):
   (rp-header mrvl.30 16 1)
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (set! <live: fv0> cp.7 (mref %sfp zero -8))
   (set! <live: fv0 cp.7> #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.50")
ej.50 (depth = 0):
   (set! <live: fv0 cp.7> g1.4 (mref %tc zero 568))
   (set! <live: fv0 g1.4 cp.7> t.21 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4 cp.7> %r8 (mref t.21 zero 7))
   (set! <live: %r8 fv0 g1.4 cp.7> (mref %sfp zero 8) cp.7)
   (set! <live: %r8 fv0 g1.4 cp.7> (mref %sfp zero 16) g1.4)
   (set! <live: %r8 fv0 g1.4 cp.7> #0=%sfp (asm "asm-add" #0# 24))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! <live: %r8 fv0> %xp #<literal optimize-level>)
   (set! <live: %r8 %xp fv0> %cp (mref %xp zero 5))
   (set! <live: %r8 %cp %xp fv0> u.124 (label-ref rpl.31 32))
   (set! <live: %r8 %cp %xp fv0> (mref %sfp zero 0) u.124)
   (set! <live: %r8 %cp %xp fv0> %ac0 1)
   (jump (mref %xp zero 13))
rpl.31 (depth = 0):
   (rp-header mrvl.32 24 3)
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (set! <live: fv0> cp.7 (mref %sfp zero -16))
   (set! <live: fv0 cp.7> g1.4 (mref %sfp zero -8))
   (set! <live: fv0 g1.4 cp.7> #0=%sfp (asm "asm-sub" #0# 24))
   (set! <live: fv0 g1.4> u.125 (mref cp.7 zero 11))
   (set! <live: fv0 g1.4> t.14 (asm #f u.125))
   (set! <live: fv0 t.14 g1.4> (mref t.14 zero 0) g1.4)
   (if (asm #f g1.4 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! <live: fv0> %ac0 62)
   (jump (mref %sfp zero 0))
lf.53 (depth = 0):
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (if (asm "asm-eq" %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (set! <live: fv0 t.14> urax.122 (asm "asm-kill"))
   (asm #f urax.122)
   (set! <live: fv0 t.14> %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! <live: fv0 t.14> #0=%td (asm "asm-sub" #0# 8))
   (set! <live: %td fv0 t.14> (mref %tc zero 88) %td)
   (set! <live: fv0> (mref %td zero 0) t.14)
   (set! <live: fv0> %ac0 62)
   (jump (mref %sfp zero 0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of finalize-register-locations!:
digraph BLOCKS {
   node [shape = box]; entry_46 dcl_26 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   dcl_26 -> lt_48;
   dcl_26 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
}

swap:entry.46 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.26") (goto "lf.58"))
dcl.26 (depth = 0):
   (overflow-check (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (set! #0=%ts (asm "asm-kill")) (asm #f #0#))
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (set! (mref %sfp zero 8) %cp)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.29 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32814)>)
rpl.29 (depth = 0, pariah):
   (rp-header mrvl.30 16 1)
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (set! %cp (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.50")
ej.50 (depth = 0):
   (set! %rcx (mref %tc zero 568))
   (set! %rdx (mref %cp zero 11))
   (set! %r8 (mref %rdx zero 7))
   (set! (mref %sfp zero 8) %cp)
   (set! (mref %sfp zero 16) %rcx)
   (set! #0=%sfp (asm "asm-add" #0# 24))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! %xp #<literal optimize-level>)
   (set! %cp (mref %xp zero 5))
   (set! %rcx (label-ref rpl.31 32))
   (set! (mref %sfp zero 0) %rcx)
   (set! %ac0 1)
   (jump (mref %xp zero 13))
rpl.31 (depth = 0):
   (rp-header mrvl.32 24 3)
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (set! %cp (mref %sfp zero -16))
   (set! %rcx (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 24))
   (set! %rdx (mref %cp zero 11))
   (set! #0=%rdx (asm #f #0#))
   (set! (mref %rdx zero 0) %rcx)
   (if (asm #f %rcx 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! %ac0 62)
   (jump (mref %sfp zero 0))
lf.53 (depth = 0):
   (set! %td (mref %tc zero 88))
   (if (asm "asm-eq" %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (set! %ts (asm "asm-kill"))
   (asm #f %ts)
   (set! %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! #0=%td (asm "asm-sub" #0# 8))
   (set! (mref %tc zero 88) %td)
   (set! (mref %td zero 0) %rdx)
   (set! %ac0 62)
   (jump (mref %sfp zero 0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of expose-overflow-check-blocks!:
digraph BLOCKS {
   node [shape = box]; dcl_26 overflowed_127 [color=red] entry_46 post_overflow_check_126 lt_48 [color=red] docall_49 [color=red] rpl_29 [color=red] mrvl_30 [color=red] ej_50 docall_51 rpl_31 mrvl_32 lt_52 lf_53 lf_56 [color=red] ej_55 lf_58 [color=red]

   lf_56 -> ej_55;
   lf_53 -> ej_55;
   lf_53 -> lf_56;
   mrvl_32 -> lt_52;
   mrvl_32 -> lf_53;
   rpl_31 -> mrvl_32;
   ej_50 -> docall_51;
   ej_50 -> rpl_31;
   mrvl_30 -> ej_50;
   rpl_29 -> mrvl_30;
   lt_48 -> docall_49;
   lt_48 -> rpl_29;
   post_overflow_check_126 -> lt_48;
   post_overflow_check_126 -> ej_50;
   entry_46 -> dcl_26;
   entry_46 -> lf_58;
   overflowed_127 -> post_overflow_check_126;
   dcl_26 -> post_overflow_check_126;
   dcl_26 -> overflowed_127;
}

swap:dcl.26 (depth = 0):
   (if (asm "asm-eq" (mref #[...] #[...] 72) %sfp) (goto "post-overflow-check.126") (goto "overflowed.127"))
overflowed.127 (depth = 0, pariah):
   (set! %ts (asm "asm-kill"))
   (asm #f %ts)
   (goto "post-overflow-check.126")
entry.46 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.26") (goto "lf.58"))
post-overflow-check.126 (depth = 0):
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.48") (goto "ej.50"))
lt.48 (depth = 0, pariah):
   (set! (mref %sfp zero 8) %cp)
   (set! #0=%sfp (asm "asm-add" #0# 16))
   (goto "docall.49")
docall.49 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.29 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32814)>)
rpl.29 (depth = 0, pariah):
   (rp-header mrvl.30 16 1)
   (goto "mrvl.30")
mrvl.30 (depth = 0, pariah):
   (set! %cp (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 16))
   (goto "ej.50")
ej.50 (depth = 0):
   (set! %rcx (mref %tc zero 568))
   (set! %rdx (mref %cp zero 11))
   (set! %r8 (mref %rdx zero 7))
   (set! (mref %sfp zero 8) %cp)
   (set! (mref %sfp zero 16) %rcx)
   (set! #0=%sfp (asm "asm-add" #0# 24))
   (goto "docall.51")
docall.51 (depth = 0):
   (set! %xp #<literal optimize-level>)
   (set! %cp (mref %xp zero 5))
   (set! %rcx (label-ref rpl.31 32))
   (set! (mref %sfp zero 0) %rcx)
   (set! %ac0 1)
   (jump (mref %xp zero 13))
rpl.31 (depth = 0):
   (rp-header mrvl.32 24 3)
   (goto "mrvl.32")
mrvl.32 (depth = 0):
   (set! %cp (mref %sfp zero -16))
   (set! %rcx (mref %sfp zero -8))
   (set! #0=%sfp (asm "asm-sub" #0# 24))
   (set! %rdx (mref %cp zero 11))
   (set! #0=%rdx (asm #f #0#))
   (set! (mref %rdx zero 0) %rcx)
   (if (asm #f %rcx 7) (goto "lt.52") (goto "lf.53"))
lt.52 (depth = 0):
   (set! %ac0 62)
   (jump (mref %sfp zero 0))
lf.53 (depth = 0):
   (set! %td (mref %tc zero 88))
   (if (asm "asm-eq" %ap %td) (goto "ej.55") (goto "lf.56"))
lf.56 (depth = 0, pariah):
   (set! %ts (asm "asm-kill"))
   (asm #f %ts)
   (set! %td (mref %tc zero 88))
   (goto "ej.55")
ej.55 (depth = 0):
   (set! #0=%td (asm "asm-sub" #0# 8))
   (set! (mref %tc zero 88) %td)
   (set! (mref %td zero 0) %rdx)
   (set! %ac0 62)
   (jump (mref %sfp zero 0))
lf.58 (depth = 0, pariah):
   (goto doargerr)
output of do-live-analysis!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.33 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.33 (depth = 0, pariah):
   (return-point #<info> rpl.33 mrvl.34 ())
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump <live: %r8 fv0> (label-ref dcl.9 0) (%r8 fv0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of record-call-live!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.33 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.33 (depth = 0, pariah):
   (return-point #<info> rpl.33 mrvl.34 ())
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump <live: %r8 fv0> (label-ref dcl.9 0) (%r8 fv0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of do-spillable-conflict!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.33 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.33 (depth = 0, pariah):
   (return-point #<info> rpl.33 mrvl.34 ())
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump <live: %r8 fv0> (label-ref dcl.9 0) (%r8 fv0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of assign-frame!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.33 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.33 (depth = 0, pariah):
   (return-point #<info> rpl.33 mrvl.34 ())
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump <live: %r8 fv0> (label-ref dcl.9 0) (%r8 fv0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of record-inspector-information!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.33 32))
   (jump <live: fv0> #<literal #(libspec event 32815)> (fv0))
rpl.33 (depth = 0, pariah):
   (return-point #<info> rpl.33 mrvl.34 ())
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (remove-frame <live: fv0> #<info>)
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump <live: %r8 fv0> (label-ref dcl.9 0) (%r8 fv0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of assign-new-frame!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (fp-offset <live: fv0> 8)
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.33 32))
   (jump <live: fv0> #<literal #(libspec event 32815)>)
rpl.33 (depth = 0, pariah):
   (rp-header mrvl.34 8 0)
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (fp-offset <live: fv0> -8)
   (overflood-check <live: fv0>)
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump <live: %r8 fv0> (label-ref dcl.9 0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of record-fp-offsets!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (fp-offset <live: fv0> 8)
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.33 32))
   (jump <live: fv0> #<literal #(libspec event 32815)>)
rpl.33 (depth = 0, pariah):
   (rp-header mrvl.34 8 0)
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (fp-offset <live: fv0> -8)
   (overflood-check <live: fv0>)
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump <live: %r8 fv0> (label-ref dcl.9 0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of finalize-frame-locations!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (inline <live: %cp %ac0 fv0> #<info> eq? %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (overflood-check <live: fv0>)
   (set! <live: fv0> (mref %tc zero 104) (inline #<info> \x2D;/eq (mref #[...] #[...] 104) 1))
   (if (inline <live: fv0> #<info> condition-code) (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (inline #<info> + #0# 8))
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> (mref %sfp zero 0) (label-ref rpl.33 32))
   (jump <live: fv0> #<literal #(libspec event 32815)>)
rpl.33 (depth = 0, pariah):
   (rp-header mrvl.34 8 0)
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (inline #<info> - #0# 8))
   (overflood-check <live: fv0>)
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump <live: %r8 fv0> (label-ref dcl.9 0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of select-instructions!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (set! <live: fv0> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> u.128 (label-ref rpl.33 32))
   (set! <live: fv0> (mref %sfp zero 0) u.128)
   (jump #<literal #(libspec event 32815)>)
rpl.33 (depth = 0, pariah):
   (rp-header mrvl.34 8 0)
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump (label-ref dcl.9 0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of do-unspillable-conflict!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (set! <live: fv0> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> u.128 (label-ref rpl.33 32))
   (set! <live: fv0> (mref %sfp zero 0) u.128)
   (jump #<literal #(libspec event 32815)>)
rpl.33 (depth = 0, pariah):
   (rp-header mrvl.34 8 0)
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump (label-ref dcl.9 0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of assign-registers!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (set! <live: fv0> (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! <live: fv0> u.128 (label-ref rpl.33 32))
   (set! <live: fv0> (mref %sfp zero 0) u.128)
   (jump #<literal #(libspec event 32815)>)
rpl.33 (depth = 0, pariah):
   (rp-header mrvl.34 8 0)
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (set! <live: fv0> #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.63")
ej.63 (depth = 0):
   (set! <live: fv0> %r8 40)
   (jump (label-ref dcl.9 0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of finalize-register-locations!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (set! #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.33 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32815)>)
rpl.33 (depth = 0, pariah):
   (rp-header mrvl.34 8 0)
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (set! #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.63")
ej.63 (depth = 0):
   (set! %r8 40)
   (jump (label-ref dcl.9 0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of expose-overflow-check-blocks!:
digraph BLOCKS {
   node [shape = box]; entry_59 dcl_27 lt_61 [color=red] docall_62 [color=red] rpl_33 [color=red] mrvl_34 [color=red] ej_63 lf_65 [color=red]

   mrvl_34 -> ej_63;
   rpl_33 -> mrvl_34;
   lt_61 -> docall_62;
   lt_61 -> rpl_33;
   dcl_27 -> lt_61;
   dcl_27 -> ej_63;
   entry_59 -> dcl_27;
   entry_59 -> lf_65;
}
entry.59 (depth = 0):
   (if (asm "asm-eq" %ac0 0) (goto "dcl.27") (goto "lf.65"))
dcl.27 (depth = 0):
   (set! (mref %tc zero 104) (asm "asm-sub" (mref #[...] #[...] 104) 1))
   (if (asm "asm-check-flag-internal") (goto "lt.61") (goto "ej.63"))
lt.61 (depth = 0, pariah):
   (set! #0=%sfp (asm "asm-add" #0# 8))
   (goto "docall.62")
docall.62 (depth = 0, pariah):
   (set! %rcx (label-ref rpl.33 32))
   (set! (mref %sfp zero 0) %rcx)
   (jump #<literal #(libspec event 32815)>)
rpl.33 (depth = 0, pariah):
   (rp-header mrvl.34 8 0)
   (goto "mrvl.34")
mrvl.34 (depth = 0, pariah):
   (set! #0=%sfp (asm "asm-sub" #0# 8))
   (goto "ej.63")
ej.63 (depth = 0):
   (set! %r8 40)
   (jump (label-ref dcl.9 0))
lf.65 (depth = 0, pariah):
   (goto doargerr)
output of np-remove-repeater-blocks-again!:
Warning in pretty-print: cycle detected; proceeding with (print-graph #t)
(letrec ([#0=#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#1=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-46} () () #f () 0 0 2096 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#2=%ac0 #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0])] #3=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-26} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4=%tc #5=zero 72] #6=%sfp)] #7=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{post-overflow-check a5dids9skwzdhr1md4j13r-126} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8=#<info> #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f (#3# #9=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{overflowed a5dids9skwzdhr1md4j13r-127} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10=%ts #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:asm:Effect.1259 pfwewp4o1ot9y43qsci5xntr9-6303} 37 #11=#<info> #<procedure> (#10#)]) () #f () 1 #f uninitialized 0 #f #f #f #7#]) 0 0 2064 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12=#<info> #<procedure asm-check-flag-internal> ()] #13=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-48} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #14=%cp] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#7#) 1 0 17 0 #f #f 0 #<info> #15=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-49} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16=%rcx #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #17=#{rpl a5dids9skwzdhr1md4j13r-29} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#13#) 1 16 16 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32814)>]] #f] () #18=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #17# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #19=#{mrvl a5dids9skwzdhr1md4j13r-30} 16 1]) () #f (#13#) 9 16 17 0 #f #f 0 #20=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #19# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #14# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#18#) 1 16 17 0 #f #f 0 #21=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-50} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 568]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22=%rdx #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #14# #5# 11]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23=%r8 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #22# #5# 7]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #14#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 16] #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 24])]]) () #f (#20# #7#) 0 0 17 0 #f #f 1 #<info> #24=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-51} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25=%xp #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal optimize-level>]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #14# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 5]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #26=#{rpl a5dids9skwzdhr1md4j13r-31} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1]]) () #f (#21#) 0 24 4112 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 13]] #f] () #27=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #26# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #28=#{mrvl a5dids9skwzdhr1md4j13r-32} 24 3]) () #f (#21#) 8 24 19 0 #f #f 1 #29=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #28# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #14# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -16]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 24])]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #14# #5# 11]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #<info> #<procedure> (#22#)]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #22# #5# 0] #16#]) () #f (#27#) 0 24 19 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #30=#<info> #<procedure> (#16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 7])] #31=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-52} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 62]]) () #f (#29#) 0 0 16 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0]] #f] #32=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-53} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #33=%td #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88]]) () #f (#29#) 0 0 20 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#34=%ap #33#)] #35=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-55} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #33# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#33# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88] #33#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #33# #5# 0] #22#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 62]]) () #f (#36=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-56} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:asm:Effect.1259 pfwewp4o1ot9y43qsci5xntr9-6303} 37 #<info> #<procedure> (#10#)] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #33# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88]]) () #f (#32#) 1 0 20 0 #f #f 0 #35#] #32#) 0 0 276 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0]] #f] #36# 276] 20]] 19 19 4115]]] 17 17 17] #21# 17] #9# uninitialized] #37=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-58} () () #f (#1#) 1 0 2080 0 #f #f 0 #[#{L16:goto:Tail.1263 pfwewp4o1ot9y43qsci5xntr9-6301} 54 #38=doargerr] #f] 2096])
                                                 (#3# #9# #1# #7# #13# #15#
                                                      #18# #20# #21# #24#
                                                      #27# #29# #31# #32#
                                                      #36# #35# #37#))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda (#39=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-59} () () #f () 0 0 131 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0])] #40=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-27} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f (#39#) 0 0 1 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12# #<procedure asm-check-flag-internal> ()] #41=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-61} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#40#) 1 0 1 0 #f #f 0 #<info> #42=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-62} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #43=#{rpl a5dids9skwzdhr1md4j13r-33} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#41#) 1 8 1 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32815)>]] #f] () #44=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #43# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #45=#{mrvl a5dids9skwzdhr1md4j13r-34} 8 0]) () #f (#41#) 9 8 1 0 #f #f 0 #46=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #45# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#44#) 1 8 1 0 #f #f 0 #47=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-63} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 40]]) () #f (#46# #40#) 0 0 1 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #48=#{dcl a5dids9skwzdhr1md4j13r-9} 0]] #f]]] 1 1 1] #47# 1] #49=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-65} () () #f (#39#) 1 0 130 0 #f #f 0 #[#{L16:goto:Tail.1263 pfwewp4o1ot9y43qsci5xntr9-6301} 54 #38#] #f] 131])
                                              (#39# #40# #41# #42# #44#
                                                #46# #47# #49#))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#50=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #48# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #23#]) () #f (#51=#[#{joto-block pfwewp4o1ot9y43qsci5xntr9-6120} #{docall a5dids9skwzdhr1md4j13r-80} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #52=#{rpl a5dids9skwzdhr1md4j13r-41} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#53=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-79} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-85} () () #f (#54=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-75} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#23# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#55=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-74} () () #f (#56=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #57=#{mrvl a5dids9skwzdhr1md4j13r-39} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#58=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #59=#{rpl a5dids9skwzdhr1md4j13r-38} (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #57# 16 1]) () #f (#60=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-72} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#61=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{post-overflow-check a5dids9skwzdhr1md4j13r-117} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f (#62=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-71} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 72] #6#)] #61# #63=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{overflowed a5dids9skwzdhr1md4j13r-118} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:asm:Effect.1259 pfwewp4o1ot9y43qsci5xntr9-6303} 37 #11# #<procedure> (#10#)]) () #f () 1 #f uninitialized 0 #f #f #f #61#] uninitialized] #63#) 0 0 257 1 1 #f 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12# #<procedure asm-check-flag-internal> ()] #60# #55# 257]) 1 0 257 1 1 #f 0 #<info> #64=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-73} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #59# 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#60#) 1 16 256 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32814)>]] #f] () #58# 257 257 257]) 9 16 257 1 1 #f 0 #56#]) 1 16 257 1 1 #f 0 #55#] #61#) 0 0 257 1 1 #f 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #30# #<procedure> (#2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 7])] #54# #65=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{Lfail a5dids9skwzdhr1md4j13r-17} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #66=%rdi #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#54# #55#) 1 0 257 1 1 #f 0 #<info> #67=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-77} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #68=#{rpl a5dids9skwzdhr1md4j13r-40} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#65#) 1 16 196864 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec - 34838)>]] #f] () #69=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #68# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #f 16 1] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#65#) 9 16 769 1 1 #f 0 #53#] 769 257 196865] 257]) 0 0 257 1 1 #f 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-check-flag-internal> ()] #65# #53# 261]) 16 0 261 1 1 #f 4 #53#] #69#) 0 0 265 1 1 #f 4 #<info> #51# () #70=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #52# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #f 16 1] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #66# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #66#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-logor> (#16# #2#)]]) () #f (#53#) 8 16 769 0 0 #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #30# #<procedure> (#16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 7])] #71=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-81} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #66#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sra> (#16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 3])]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22# #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-mul> (#16# #22#)]]) () #f (#70#) 0 0 273 0 0 #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-check-flag-internal> ()] #72=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{Lfail a5dids9skwzdhr1md4j13r-19} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#]) () #f (#71# #70#) 1 0 273 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec * 34840)>]] #f] #73=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-83} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #16#]) () #f (#71#) 0 0 320 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0]] #f] 337] #72# 273] 769 257 65793]) 0 16 65792 1 1 #f 4 () #50#]) 32 0 65792 1 0 0 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0])] #74=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-68} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8]]) () #f (#75=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #76=#{rpl a5dids9skwzdhr1md4j13r-37} (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #f 16 1] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#77=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-91} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #66# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#78=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #79=#{mrvl a5dids9skwzdhr1md4j13r-36} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#80=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #81=#{rpl a5dids9skwzdhr1md4j13r-35} (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #79# 16 1]) () #f (#82=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-89} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#83=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-88} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f (#84=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-69} () () #f (#50#) 0 0 257 1 1 #f 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #30# #<procedure> (#2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 7])] #62# #83# 257]) 1 0 257 1 1 #f 0 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12# #<procedure asm-check-flag-internal> ()] #82# #77# 257]) 1 0 257 1 1 #f 0 #<info> #85=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-90} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #81# 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#82#) 1 16 256 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32815)>]] #f] () #80# 257 257 257]) 9 16 257 1 1 #f 0 #78#]) 1 16 257 1 1 #f 0 #77#] #83#) 1 0 257 1 1 #f 0 #<info> #86=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-92} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #76# 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#77#) 1 16 196864 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec = 34827)>]] #f] () #75# 769 257 196865]) 9 16 769 1 1 #f 0 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 6])] #62# #74# 257] #50#) 0 0 256 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0]] #f] #84# 257]
                                                     #50#)
                                              (#62# #63# #50# #84# #83#
                                               #82# #85# #80# #78# #77#
                                               #86# #75# #74# #61# #60#
                                               #64# #58# #56# #55# #54#
                                               #65# #67# #69# #53# #51#
                                               #70# #71# #72# #73#))]
         [#87=#{main a5dids9skwzdhr1md4j13r-13} (lambda (#88=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-28} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f () 0 0 16 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12# #<procedure asm-check-flag-internal> ()] #89=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-97} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#88#) 1 0 16 0 #f #f 0 #<info> #90=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-98} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #91=#{rpl a5dids9skwzdhr1md4j13r-42} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#89#) 1 8 16 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32815)>]] #f] () #92=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #91# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #93=#{mrvl a5dids9skwzdhr1md4j13r-43} 8 0]) () #f (#89#) 9 8 16 0 #f #f 0 #94=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #93# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#92#) 1 8 16 0 #f #f 0 #95=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-99} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure> (#34#)]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #34# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#34# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#94# #88#) 0 0 16 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88] #34#)] #96=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-44} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #<info> #<procedure> (#10# #25#)]]) () #f (#95#) 1 0 145 0 #f #f 0 #97=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-101} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 7] #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 15] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 30]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #25#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure> (#34#)]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #34# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#34# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#96# #95#) 0 0 145 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88] #34#)] #98=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-45} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #<info> #<procedure> (#10# #25#)]]) () #f (#97#) 1 0 148 0 #f #f 0 #99=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-103} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #66# #25#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #0# 65]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #66# #5# 3] #22#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #66# #5# 11] #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #66#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 14]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 %rsi #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #{anon a5dids9skwzdhr1md4j13r-11}>]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal dynamic-wind>]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #14# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 5]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 4]]) () #f (#98# #97#) 0 0 148 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 13]] #f]] #99# 148]] #97# 145]]] 16 16 16] #95# 16])
                                                  (#88# #89# #90# #92# #94#
                                                    #95# #96# #97# #98#
                                                    #99#))])
  (#87#))
output of np-optimize-block-order!:
Warning in pretty-print: cycle detected; proceeding with (print-graph #t)
(letrec ([#0=#{swap a5dids9skwzdhr1md4j13r-10} (lambda (#1=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-46} () () #f () 0 0 2096 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#2=%ac0 #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0])] #3=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-26} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4=%tc #5=zero 72] #6=%sfp)] #7=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{post-overflow-check a5dids9skwzdhr1md4j13r-126} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8=#<info> #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f (#3# #9=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{overflowed a5dids9skwzdhr1md4j13r-127} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10=%ts #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:asm:Effect.1259 pfwewp4o1ot9y43qsci5xntr9-6303} 37 #11=#<info> #<procedure> (#10#)]) () #f () 1 #f uninitialized 0 #f #f #f #7#]) 0 0 2064 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12=#<info> #<procedure asm-check-flag-internal> ()] #13=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-48} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #14=%cp] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#7#) 1 0 17 0 #f #f 0 #<info> #15=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-49} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16=%rcx #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #17=#{rpl a5dids9skwzdhr1md4j13r-29} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#13#) 1 16 16 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32814)>]] #f] () #18=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #17# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #19=#{mrvl a5dids9skwzdhr1md4j13r-30} 16 1]) () #f (#13#) 9 16 17 0 #f #f 0 #20=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #19# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #14# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#18#) 1 16 17 0 #f #f 0 #21=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-50} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 568]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22=%rdx #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #14# #5# 11]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23=%r8 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #22# #5# 7]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #14#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 16] #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 24])]]) () #f (#20# #7#) 0 0 17 0 #f #f 1 #<info> #24=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-51} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25=%xp #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal optimize-level>]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #14# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 5]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #26=#{rpl a5dids9skwzdhr1md4j13r-31} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1]]) () #f (#21#) 0 24 4112 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 13]] #f] () #27=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #26# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #28=#{mrvl a5dids9skwzdhr1md4j13r-32} 24 3]) () #f (#21#) 8 24 19 0 #f #f 1 #29=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #28# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #14# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -16]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 24])]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #14# #5# 11]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #<info> #<procedure> (#22#)]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #22# #5# 0] #16#]) () #f (#27#) 0 24 19 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #30=#<info> #<procedure> (#16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 7])] #31=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-52} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 62]]) () #f (#29#) 0 0 16 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0]] #f] #32=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-53} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #33=%td #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88]]) () #f (#29#) 0 0 20 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#34=%ap #33#)] #35=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-55} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #33# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#33# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88] #33#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #33# #5# 0] #22#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 62]]) () #f (#36=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-56} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:asm:Effect.1259 pfwewp4o1ot9y43qsci5xntr9-6303} 37 #<info> #<procedure> (#10#)] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #33# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88]]) () #f (#32#) 1 0 20 0 #f #f 0 #35#] #32#) 0 0 276 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0]] #f] #36# 276] 20]] 19 19 4115]]] 17 17 17] #21# 17] #9# uninitialized] #37=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-58} () () #f (#1#) 1 0 2080 0 #f #f 0 #[#{L16:goto:Tail.1263 pfwewp4o1ot9y43qsci5xntr9-6301} 54 #38=doargerr] #f] 2096])
                                                 (#1# #3# #7# #21# #24# #27#
                                                      #29# #31# #32# #35#
                                                      #36# #13# #15# #18#
                                                      #20# #9# #37#))]
         [#{anon a5dids9skwzdhr1md4j13r-11} (lambda (#39=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{entry a5dids9skwzdhr1md4j13r-59} () () #f () 0 0 131 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0])] #40=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-27} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f (#39#) 0 0 1 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12# #<procedure asm-check-flag-internal> ()] #41=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-61} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#40#) 1 0 1 0 #f #f 0 #<info> #42=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-62} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #43=#{rpl a5dids9skwzdhr1md4j13r-33} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#41#) 1 8 1 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32815)>]] #f] () #44=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #43# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #45=#{mrvl a5dids9skwzdhr1md4j13r-34} 8 0]) () #f (#41#) 9 8 1 0 #f #f 0 #46=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #45# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#44#) 1 8 1 0 #f #f 0 #47=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-63} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 40]]) () #f (#46# #40#) 0 0 1 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #48=#{dcl a5dids9skwzdhr1md4j13r-9} 0]] #f]]] 1 1 1] #47# 1] #49=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-65} () () #f (#39#) 1 0 130 0 #f #f 0 #[#{L16:goto:Tail.1263 pfwewp4o1ot9y43qsci5xntr9-6301} 54 #38#] #f] 131])
                                              (#39# #40# #47# #41# #42#
                                                #44# #46# #49#))]
         [#{fact a5dids9skwzdhr1md4j13r-12} (lambda (#50=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #48# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #23#]) () #f (#51=#[#{joto-block pfwewp4o1ot9y43qsci5xntr9-6120} #{docall a5dids9skwzdhr1md4j13r-80} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #52=#{rpl a5dids9skwzdhr1md4j13r-41} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#53=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-79} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{lf a5dids9skwzdhr1md4j13r-85} () () #f (#54=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-75} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#23# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#55=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-74} () () #f (#56=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #57=#{mrvl a5dids9skwzdhr1md4j13r-39} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#58=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #59=#{rpl a5dids9skwzdhr1md4j13r-38} (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #57# 16 1]) () #f (#60=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-72} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#61=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{post-overflow-check a5dids9skwzdhr1md4j13r-117} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f (#62=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-71} () () #f () 0 #f uninitialized 0 #f #f #f #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 72] #6#)] #61# #63=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{overflowed a5dids9skwzdhr1md4j13r-118} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:asm:Effect.1259 pfwewp4o1ot9y43qsci5xntr9-6303} 37 #11# #<procedure> (#10#)]) () #f () 1 #f uninitialized 0 #f #f #f #61#] uninitialized] #63#) 0 0 257 1 1 #f 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12# #<procedure asm-check-flag-internal> ()] #60# #55# 257]) 1 0 257 1 1 #f 0 #<info> #64=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-73} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #59# 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#60#) 1 16 256 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32814)>]] #f] () #58# 257 257 257]) 9 16 257 1 1 #f 0 #56#]) 1 16 257 1 1 #f 0 #55#] #61#) 0 0 257 1 1 #f 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #30# #<procedure> (#2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 7])] #54# #65=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{Lfail a5dids9skwzdhr1md4j13r-17} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #66=%rdi #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#54# #55#) 1 0 257 1 1 #f 0 #<info> #67=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-77} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #68=#{rpl a5dids9skwzdhr1md4j13r-40} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#65#) 1 16 196864 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec - 34838)>]] #f] () #69=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #68# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #f 16 1] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#65#) 9 16 769 1 1 #f 0 #53#] 769 257 196865] 257]) 0 0 257 1 1 #f 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-check-flag-internal> ()] #65# #53# 261]) 16 0 261 1 1 #f 4 #53#] #69#) 0 0 265 1 1 #f 4 #<info> #51# () #70=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #52# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #f 16 1] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #66# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #66#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-logor> (#16# #2#)]]) () #f (#53#) 8 16 769 0 0 #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #30# #<procedure> (#16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 7])] #71=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lt a5dids9skwzdhr1md4j13r-81} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #66#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sra> (#16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 3])]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22# #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-mul> (#16# #22#)]]) () #f (#70#) 0 0 273 0 0 #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-check-flag-internal> ()] #72=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{Lfail a5dids9skwzdhr1md4j13r-19} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#]) () #f (#71# #70#) 1 0 273 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec * 34840)>]] #f] #73=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lf a5dids9skwzdhr1md4j13r-83} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #16#]) () #f (#71#) 0 0 320 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0]] #f] 337] #72# 273] 769 257 65793]) 0 16 65792 1 1 #f 4 () #50#]) 32 0 65792 1 0 0 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0])] #74=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{lt a5dids9skwzdhr1md4j13r-68} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8]]) () #f (#75=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #76=#{rpl a5dids9skwzdhr1md4j13r-37} (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #f 16 1] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#77=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{ej a5dids9skwzdhr1md4j13r-91} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #66# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#78=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #79=#{mrvl a5dids9skwzdhr1md4j13r-36} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# -8]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#80=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #81=#{rpl a5dids9skwzdhr1md4j13r-35} (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #79# 16 1]) () #f (#82=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-89} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #2#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#83=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-88} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f (#84=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{lf a5dids9skwzdhr1md4j13r-69} () () #f (#50#) 0 0 257 1 1 #f 4 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #30# #<procedure> (#2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 7])] #62# #83# 257]) 1 0 257 1 1 #f 0 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12# #<procedure asm-check-flag-internal> ()] #82# #77# 257]) 1 0 257 1 1 #f 0 #<info> #85=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-90} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #81# 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#82#) 1 16 256 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32815)>]] #f] () #80# 257 257 257]) 9 16 257 1 1 #f 0 #78#]) 1 16 257 1 1 #f 0 #77#] #83#) 1 0 257 1 1 #f 0 #<info> #86=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-92} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #76# 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#77#) 1 16 196864 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec = 34827)>]] #f] () #75# 769 257 196865]) 9 16 769 1 1 #f 0 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 6])] #62# #74# 257] #50#) 0 0 256 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0]] #f] #84# 257]
                                                     #50#)
                                              (#50# #84# #62# #61# #55#
                                               #54# #53# #51# #70# #71#
                                               #73# #72# #65# #67# #69#
                                               #60# #64# #58# #56# #63#
                                               #83# #82# #85# #80# #78#
                                               #77# #86# #75# #74#))]
         [#87=#{main a5dids9skwzdhr1md4j13r-13} (lambda (#88=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{dcl a5dids9skwzdhr1md4j13r-28} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 104] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 1])]]) () #f () 0 0 16 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #12# #<procedure asm-check-flag-internal> ()] #89=#[#{newframe-block pfwewp4o1ot9y43qsci5xntr9-6123} #{lt a5dids9skwzdhr1md4j13r-97} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#88#) 1 0 16 0 #f #f 0 #<info> #90=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{docall a5dids9skwzdhr1md4j13r-98} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #91=#{rpl a5dids9skwzdhr1md4j13r-42} 32]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 0] #16#]) () #f (#89#) 1 8 16 0 #f #f 0 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #(libspec event 32815)>]] #f] () #92=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #91# (#[#{L16:rp-header:Effect.1260 pfwewp4o1ot9y43qsci5xntr9-6304} 53 #93=#{mrvl a5dids9skwzdhr1md4j13r-43} 8 0]) () #f (#89#) 9 8 16 0 #f #f 0 #94=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #93# (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #6# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-sub> (#6# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 8])]]) () #f (#92#) 1 8 16 0 #f #f 0 #95=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-99} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 0]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure> (#34#)]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #34# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#34# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#94# #88#) 0 0 16 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88] #34#)] #96=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-44} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #<info> #<procedure> (#10# #25#)]]) () #f (#95#) 1 0 145 0 #f #f 0 #97=#[#{if-block pfwewp4o1ot9y43qsci5xntr9-6121} #{ej a5dids9skwzdhr1md4j13r-101} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 7] #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 15] #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 30]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #16# #25#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure> (#34#)]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #34# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-add> (#34# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 16])]]) () #f (#96# #95#) 0 0 145 0 #f #f 1 #[#{L16:asm:Pred.1264 pfwewp4o1ot9y43qsci5xntr9-6298} 23 #<info> #<procedure asm-eq> (#[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #4# #5# 88] #34#)] #98=#[#{goto-block pfwewp4o1ot9y43qsci5xntr9-6119} #{Lget-room a5dids9skwzdhr1md4j13r-45} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #10# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #8# #<procedure asm-kill> ()]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:asm:Rhs.1257 pfwewp4o1ot9y43qsci5xntr9-6164} 20 #<info> #<procedure> (#10# #25#)]]) () #f (#97#) 1 0 148 0 #f #f 0 #99=#[#{tail-block pfwewp4o1ot9y43qsci5xntr9-6122} #{ej a5dids9skwzdhr1md4j13r-103} (#[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #66# #25#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #22# #[#{L16:label-ref:Triv.1256 pfwewp4o1ot9y43qsci5xntr9-6160} 51 #0# 65]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #66# #5# 3] #22#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #66# #5# 11] #16#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #6# #5# 8] #66#] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #23# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 14]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 %rsi #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal #{anon a5dids9skwzdhr1md4j13r-11}>]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #25# #[#{L16:literal:Triv.1254 pfwewp4o1ot9y43qsci5xntr9-6161} 19 #<literal dynamic-wind>]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #14# #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 5]] #[#{L16:set!:Effect.1258 pfwewp4o1ot9y43qsci5xntr9-6302} 21 #2# #[#{L16:immediate:Triv.1255 pfwewp4o1ot9y43qsci5xntr9-6305} 35 4]]) () #f (#98# #97#) 0 0 148 0 #f #f 1 #[#{L16:jump:Tail.1261 pfwewp4o1ot9y43qsci5xntr9-6299} 22 #[#{L16:mref:Lvalue.1253 pfwewp4o1ot9y43qsci5xntr9-6306} 18 #25# #5# 13]] #f]] #99# 148]] #97# 145]]] 16 16 16] #95# 16])
                                                  (#88# #95# #97# #99# #98#
                                                    #96# #89# #90# #92#
                                                    #94#))])
  (#87#))
output of np-generate-code:
Warning in pretty-print: cycle detected; proceeding with (print-graph #t)
#0=#($c-func
     #1=(code #0# 0 0 #f 1 229
          ((byte . 73) (byte . 131) (byte . 110) (byte . 104)
           (byte . 1) #2=(byte . 15) (byte . 132) (long . 150)
           (byte . 72) (byte . 49) (byte . 201) (byte . 77)
           (byte . 141) (byte . 97) (byte . -7) (byte . 73)
           (byte . 131) (byte . 193) (byte . 16) (byte . 77)
           (byte . 57) (byte . 78) (byte . 88) (byte . 114)
           (byte . 115) (byte . 73) (byte . 137) (byte . 76)
           (byte . 36) (byte . 7) (byte . 73) (byte . 199) (byte . 68)
           (byte . 36) (byte . 15) (long . 30) (byte . 76) (byte . 137)
           (byte . 225) (byte . 77) (byte . 141) (byte . 97)
           (byte . -3) (byte . 73) (byte . 131) (byte . 193)
           (byte . 16) (byte . 77) (byte . 57) (byte . 78) (byte . 88)
           (byte . 114) (byte . 69) (byte . 76) (byte . 137)
           (byte . 231) (byte . 72) (byte . 186)
           (abs 65
                #3=(code #($c-func #3# #f #f #f) 0 1 "swap" 1 321
                     ((byte . 72) (byte . 131) (byte . 253) (byte . 0) #2#
                      (byte . 133) (long . 299) (byte . 77) (byte . 57)
                      (byte . 110) (byte . 72) #2# (byte . 134)
                      (long . 272) (byte . 73) (byte . 131) (byte . 110)
                      (byte . 104) (byte . 1) #2# (byte . 132) (long . 185)
                      (byte . 73) (byte . 139) (byte . 142) (long . 568)
                      (byte . 73) (byte . 139) (byte . 87) (byte . 11)
                      (byte . 76) (byte . 139) (byte . 66) (byte . 7)
                      (byte . 77) (byte . 137) (byte . 125) (byte . 8)
                      (byte . 73) (byte . 137) (byte . 77) (byte . 16)
                      (byte . 73) (byte . 131) (byte . 197) (byte . 24)
                      (byte . 73) (byte . 188)
                      (abs 0 (object optimize-level)) (byte . 77)
                      (byte . 139) (byte . 124) (byte . 36) (byte . 5)
                      (byte . 72) (byte . 141) (byte . 13) (long . 48)
                      (byte . 73) (byte . 137) (byte . 77) (byte . 0)
                      (byte . 72) (byte . 199) (byte . 197) (long . 1)
                      (byte . 65) #4=(byte . 255) (byte . 100) (byte . 36)
                      (byte . 13) (quad . 24) #5=(code-top-link)
                      (quad . 24) (abs 193 #3#) (byte . 77) (byte . 139)
                      (byte . 125) (byte . -16) (byte . 73) (byte . 139)
                      (byte . 77) (byte . -8) (byte . 73) (byte . 131)
                      (byte . 237) (byte . 24) (byte . 73) (byte . 139)
                      (byte . 87) (byte . 11) (byte . 72) (byte . 131)
                      (byte . 194) (byte . 7) (byte . 72) (byte . 137)
                      (byte . 10) (byte . 246) (byte . 193) (byte . 7)
                      (byte . 117) (byte . 11) (byte . 72) (byte . 199)
                      (byte . 197) (long . 62) (byte . 65) #4# (byte . 101)
                      (byte . 0) (byte . 73) (byte . 139) (byte . 94)
                      (byte . 88) (byte . 73) (byte . 57) (byte . 217)
                      (byte . 115) (byte . 22) (byte . 72) (byte . 131)
                      (byte . 235) (byte . 8) (byte . 73) (byte . 137)
                      (byte . 94) (byte . 88) (byte . 72) (byte . 137)
                      (byte . 19) (byte . 72) (byte . 199) (byte . 197)
                      (long . 62) (byte . 65) #4# (byte . 101) (byte . 0)
                      (byte . 72) (byte . 184) (quad . 4294967295) #4#
                      (byte . 208)
                      (x86_64-call
                        65
                        (library-code #(libspec scan-remembered-set 338)))
                      (byte . 73) (byte . 139) (byte . 94) (byte . 88)
                      #6=(byte . 235) (byte . -40) (byte . 77) (byte . 137)
                      (byte . 125) (byte . 8) (byte . 73) (byte . 131)
                      (byte . 197) (byte . 16) (byte . 72) (byte . 141)
                      (byte . 13) (long . 48) (byte . 73) (byte . 137)
                      (byte . 77) (byte . 0) (byte . 72) (byte . 184)
                      (quad . 4294967295) #4# (byte . 224)
                      (x86_64-jump
                        65
                        (library-code #7=#(libspec event 32814)))
                      (quad . 8) #5# (quad . 16) (abs 344 #3#) (byte . 77)
                      (byte . 139) (byte . 125) (byte . -8) (byte . 73)
                      (byte . 131) (byte . 237) (byte . 16) #8=(byte . 233)
                      (long . -261) (byte . 72) (byte . 184)
                      (quad . 4294967295) #4# (byte . 208)
                      (x86_64-call
                        65
                        (library-code #9=#(libspec dooverflow 146)))
                      #8# (long . -289) (byte . 72) (byte . 184)
                      (quad . 4294967295) #4# (byte . 224)
                      (x86_64-jump
                        65
                        (library-code #10=#(libspec doargerr 164))))
                     #[#{code-info gr886ae7iuw4wt9ft4vxym-2} #f (lambda () (let ((#11=#{g1 a5dids9skwzdhr1md4j13r-129} (#12=#{g2 a5dids9skwzdhr1md4j13r-130}))) #13=(#12# #14=#{g0 a5dids9skwzdhr1md4j13r-131}) (set! #14# #11#))) #(#14#) #((#{closure cedozdf6uqtmcjjt-2} . 1) (#11# . 2)) #(#[#{rp-info gr886ae7iuw4wt9ft4vxym-1} 193 #f #13# 3] #[#{rp-info gr886ae7iuw4wt9ft4vxym-1} 344 #f #f 1])]
                     ()))
           (byte . 72) (byte . 137) (byte . 87) (byte . 3) (byte . 72)
           (byte . 137) (byte . 79) (byte . 11) (byte . 73)
           (byte . 137) (byte . 125) (byte . 8) (byte . 73)
           (byte . 199) (byte . 192) (long . 14) (byte . 72)
           (byte . 190)
           (abs 0
                #15=(closure
                      .
                      #16=#($c-func
                            #17=(code #16# 0 0 #f 1 109
                                  ((byte . 72) (byte . 131) (byte . 253)
                                   (byte . 0) (byte . 117) (byte . 91)
                                   (byte . 73) (byte . 131) (byte . 110)
                                   (byte . 104) (byte . 1) (byte . 116)
                                   (byte . 19) (byte . 73) (byte . 199)
                                   (byte . 192) (long . 40) (byte . 72)
                                   (byte . 184) (quad . 4294967295) #4#
                                   (byte . 224)
                                   (x86_64-jump
                                     65
                                     #18=(code #($c-func #18# #f #f #f) 0 0
                                           "fact" 2 536
                                           ((byte . 76) (byte . 137)
                                            (byte . 197) (byte . 72)
                                            (byte . 131) (byte . 253)
                                            (byte . 0) #2# (byte . 132)
                                            (long . 512) (byte . 64)
                                            (byte . 246) (byte . 197)
                                            (byte . 7) #2# (byte . 133)
                                            (long . 334) (byte . 77)
                                            (byte . 57) (byte . 110)
                                            (byte . 72) #2# (byte . 134)
                                            (long . 307) (byte . 73)
                                            (byte . 131) (byte . 110)
                                            (byte . 104) (byte . 1) #2#
                                            (byte . 132) (long . 220)
                                            (byte . 64) (byte . 246)
                                            (byte . 197) (byte . 7)
                                            (byte . 117) (byte . 125)
                                            (byte . 73) (byte . 137)
                                            (byte . 232) (byte . 73)
                                            (byte . 131) (byte . 232)
                                            (byte . 8) (byte . 112)
                                            (byte . 116) (byte . 73)
                                            (byte . 137) (byte . 109)
                                            (byte . 8) (byte . 73)
                                            (byte . 131) (byte . 197)
                                            (byte . 16) (byte . 72)
                                            (byte . 141) (byte . 13)
                                            (long . 38) (byte . 73)
                                            (byte . 137) (byte . 77)
                                            (byte . 0) #6# (byte . -80)
                                            (quad . 8) #5# (quad . 16)
                                            #19=(abs 65
                                                     (library-code
                                                       #(libspec
                                                         values-error
                                                         144)))
                                            (byte . 72) (byte . 137)
                                            (byte . 239) (byte . 73)
                                            (byte . 139) (byte . 109)
                                            (byte . -8) (byte . 73)
                                            (byte . 131) (byte . 237)
                                            (byte . 16) (byte . 72)
                                            (byte . 137) (byte . 249)
                                            (byte . 72) (byte . 9)
                                            (byte . 233) (byte . 246)
                                            (byte . 193) (byte . 7)
                                            (byte . 117) (byte . 26)
                                            (byte . 72) (byte . 137)
                                            (byte . 249) (byte . 72)
                                            (byte . 193) (byte . 249)
                                            (byte . 3) (byte . 72)
                                            (byte . 137) (byte . 202)
                                            (byte . 72) (byte . 137)
                                            (byte . 233) (byte . 72)
                                            (byte . 15) (byte . 175)
                                            (byte . 202) (byte . 112)
                                            (byte . 7) (byte . 72)
                                            (byte . 137) (byte . 205)
                                            (byte . 65) #4# (byte . 101)
                                            (byte . 0) (byte . 73)
                                            (byte . 137) (byte . 232)
                                            (byte . 72) (byte . 184)
                                            (quad . 4294967295) #4#
                                            (byte . 224)
                                            (x86_64-jump
                                              65
                                              (library-code
                                                #(libspec * 34840)))
                                            (byte . 73) (byte . 137)
                                            (byte . 232) (byte . 72)
                                            (byte . 199) (byte . 199)
                                            (long . 8) (byte . 73)
                                            (byte . 137) (byte . 109)
                                            (byte . 8) (byte . 73)
                                            (byte . 131) (byte . 197)
                                            (byte . 16) (byte . 72)
                                            (byte . 141) (byte . 13)
                                            (long . 48) (byte . 73)
                                            (byte . 137) (byte . 77)
                                            (byte . 0) (byte . 72)
                                            (byte . 184)
                                            (quad . 4294967295) #4#
                                            (byte . 224)
                                            (x86_64-jump
                                              65
                                              (library-code
                                                #(libspec - 34838)))
                                            (quad . 8) #5# (quad . 16) #19#
                                            (byte . 73) (byte . 137)
                                            (byte . 232) (byte . 73)
                                            (byte . 139) (byte . 109)
                                            (byte . -8) (byte . 73)
                                            (byte . 131) (byte . 237)
                                            (byte . 16) #8# (long . -205)
                                            (byte . 73) (byte . 137)
                                            (byte . 109) (byte . 8)
                                            (byte . 73) (byte . 131)
                                            (byte . 197) (byte . 16)
                                            (byte . 72) (byte . 141)
                                            (byte . 13) (long . 48)
                                            (byte . 73) (byte . 137)
                                            (byte . 77) (byte . 0)
                                            (byte . 72) (byte . 184)
                                            (quad . 4294967295) #4#
                                            (byte . 224)
                                            (x86_64-jump
                                              65
                                              (library-code #7#))
                                            (quad . 8) #5# (quad . 16)
                                            (abs 392 #18#) (byte . 73)
                                            (byte . 139) (byte . 109)
                                            (byte . -8) (byte . 73)
                                            (byte . 131) (byte . 237)
                                            (byte . 16) #8# (long . -296)
                                            (byte . 72) (byte . 184)
                                            (quad . 4294967295) #4#
                                            (byte . 208)
                                            (x86_64-call
                                              65
                                              (library-code #9#))
                                            #8# (long . -324) (byte . 73)
                                            (byte . 131) (byte . 110)
                                            (byte . 104) (byte . 1)
                                            (byte . 117) (byte . 71)
                                            (byte . 73) (byte . 137)
                                            (byte . 109) (byte . 8)
                                            (byte . 73) (byte . 131)
                                            (byte . 197) (byte . 16)
                                            (byte . 72) (byte . 141)
                                            (byte . 13) (long . 48)
                                            (byte . 73) (byte . 137)
                                            (byte . 77) (byte . 0)
                                            (byte . 72) (byte . 184)
                                            (quad . 4294967295) #4#
                                            (byte . 224)
                                            (x86_64-jump
                                              65
                                              (library-code
                                                #20=#(libspec event
                                                      32815)))
                                            (quad . 8) #5# (quad . 16)
                                            (abs 492 #18#) (byte . 73)
                                            (byte . 139) (byte . 109)
                                            (byte . -8) (byte . 73)
                                            (byte . 131) (byte . 237)
                                            (byte . 16) (byte . 73)
                                            (byte . 137) (byte . 232)
                                            (byte . 72) (byte . 49)
                                            (byte . 255) (byte . 73)
                                            (byte . 137) (byte . 109)
                                            (byte . 8) (byte . 73)
                                            (byte . 131) (byte . 197)
                                            (byte . 16) (byte . 72)
                                            (byte . 141) (byte . 13)
                                            (long . 48) (byte . 73)
                                            (byte . 137) (byte . 77)
                                            (byte . 0) (byte . 72)
                                            (byte . 184)
                                            (quad . 4294967295) #4#
                                            (byte . 224)
                                            (x86_64-jump
                                              65
                                              (library-code
                                                #(libspec = 34827)))
                                            (quad . 8) #5# (quad . 16) #19#
                                            (byte . 72) (byte . 137)
                                            (byte . 233) (byte . 73)
                                            (byte . 139) (byte . 109)
                                            (byte . -8) (byte . 73)
                                            (byte . 131) (byte . 237)
                                            (byte . 16) (byte . 72)
                                            (byte . 131) (byte . 249)
                                            (byte . 6) #2# (byte . 132)
                                            (long . -502) (byte . 72)
                                            (byte . 199) (byte . 197)
                                            (long . 8) (byte . 65) #4#
                                            (byte . 101) (byte . 0))
                                           #[#{code-info gr886ae7iuw4wt9ft4vxym-2} #f #21=(lambda (n) (if #22=(= n 0) 1 (* n #23=(fact #24=(- n 1))))) #f #((n . 1)) #(#[#{rp-info gr886ae7iuw4wt9ft4vxym-1} 177 #f #23# 1] #[#{rp-info gr886ae7iuw4wt9ft4vxym-1} 313 #f #24# 1] #[#{rp-info gr886ae7iuw4wt9ft4vxym-1} 392 #f #f 1] #[#{rp-info gr886ae7iuw4wt9ft4vxym-1} 492 #f #f 1] #[#{rp-info gr886ae7iuw4wt9ft4vxym-1} 569 #f #22# 1])]
                                           ()))
                                   (byte . 73) (byte . 131) (byte . 197)
                                   (byte . 8) (byte . 72) (byte . 141)
                                   (byte . 13) (long . 48) (byte . 73)
                                   (byte . 137) (byte . 77) (byte . 0)
                                   (byte . 72) (byte . 184)
                                   (quad . 4294967295) #4# (byte . 224)
                                   (x86_64-jump 65 (library-code #20#))
                                   (quad . 0) #5# (quad . 8) (abs 156 #17#)
                                   (byte . 73) (byte . 131) (byte . 237)
                                   (byte . 8) #6# (byte . -84) (byte . 72)
                                   (byte . 184) (quad . 4294967295) #4#
                                   (byte . 224)
                                   (x86_64-jump 65 (library-code #10#)))
                                  #[#{code-info gr886ae7iuw4wt9ft4vxym-2} #f (lambda () (letrec* ((fact #21#)) (fact 5))) #f #25=#() #25#]
                                  ())
                            #f #15# #f)))
           (byte . 73) (byte . 188) (abs 0 (object dynamic-wind))
           (byte . 77) (byte . 139) (byte . 124) (byte . 36) (byte . 5)
           (byte . 72) (byte . 199) (byte . 197) (long . 4) (byte . 65)
           #4# (byte . 100) (byte . 36) (byte . 13) (byte . 73)
           (byte . 188) (quad . 4294967295) (byte . 65) #4#
           (byte . 212)
           (x86_64-call 65 (library-code #26=#(libspec get-room 166)))
           #6# (byte . -84) (byte . 73) (byte . 188)
           (quad . 4294967295) (byte . 65) #4# (byte . 212)
           (x86_64-call 65 (library-code #26#)) #8# (long . -133)
           (byte . 73) (byte . 131) (byte . 197) (byte . 8) (byte . 72)
           (byte . 141) (byte . 13) (long . 48) (byte . 73)
           (byte . 137) (byte . 77) (byte . 0) (byte . 72) (byte . 184)
           (quad . 4294967295) #4# (byte . 224)
           (x86_64-jump 65 (library-code #20#)) (quad . 0) #5#
           (quad . 8) (abs 285 #1#) (byte . 73) (byte . 131)
           (byte . 237) (byte . 8) #8# (long . -218))
          #[#{code-info gr886ae7iuw4wt9ft4vxym-2} #f #f #25# #25# #25#]
          ())
     #f #f #f)
120
> (exit)
